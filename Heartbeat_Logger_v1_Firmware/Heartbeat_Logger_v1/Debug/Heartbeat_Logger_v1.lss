
Heartbeat_Logger_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049e0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000024  20000000  000049e0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000868  20000024  00004a04  00010024  2**2
                  ALLOC
  3 .stack        00000404  2000088c  0000526c  00010024  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010024  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001004c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029cea  00000000  00000000  000100a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000044d0  00000000  00000000  00039d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b522  00000000  00000000  0003e261  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008b8  00000000  00000000  00049783  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ae0  00000000  00000000  0004a03b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013ad6  00000000  00000000  0004ab1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fe3e  00000000  00000000  0005e5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005c142  00000000  00000000  0006e42f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001748  00000000  00000000  000ca574  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20000c90 	.word	0x20000c90
       4:	00003935 	.word	0x00003935
       8:	0000392d 	.word	0x0000392d
       c:	0000392d 	.word	0x0000392d
	...
      2c:	0000392d 	.word	0x0000392d
	...
      38:	0000392d 	.word	0x0000392d
      3c:	0000392d 	.word	0x0000392d
      40:	0000392d 	.word	0x0000392d
      44:	0000392d 	.word	0x0000392d
      48:	0000392d 	.word	0x0000392d
      4c:	0000392d 	.word	0x0000392d
      50:	000024e1 	.word	0x000024e1
      54:	0000392d 	.word	0x0000392d
      58:	00002301 	.word	0x00002301
      5c:	00002b81 	.word	0x00002b81
      60:	00002b91 	.word	0x00002b91
      64:	00002ba1 	.word	0x00002ba1
      68:	00002bb1 	.word	0x00002bb1
	...
      74:	00003619 	.word	0x00003619
      78:	00003629 	.word	0x00003629
      7c:	00003639 	.word	0x00003639
      80:	00003649 	.word	0x00003649
      84:	00003659 	.word	0x00003659
      88:	00003669 	.word	0x00003669
	...
      94:	00004321 	.word	0x00004321
      98:	00001e69 	.word	0x00001e69
      9c:	0000392d 	.word	0x0000392d
      a0:	0000392d 	.word	0x0000392d

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000024 	.word	0x20000024
      c4:	00000000 	.word	0x00000000
      c8:	000049e0 	.word	0x000049e0

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd08      	pop	{r3, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	000049e0 	.word	0x000049e0
      f8:	20000028 	.word	0x20000028
      fc:	000049e0 	.word	0x000049e0
     100:	00000000 	.word	0x00000000

00000104 <mem_cpy>:
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
     104:	b510      	push	{r4, lr}
     106:	2a00      	cmp	r2, #0
     108:	d005      	beq.n	116 <mem_cpy+0x12>
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
     10a:	2300      	movs	r3, #0
     10c:	5ccc      	ldrb	r4, [r1, r3]
     10e:	54c4      	strb	r4, [r0, r3]
     110:	3301      	adds	r3, #1
     112:	4293      	cmp	r3, r2
     114:	d1fa      	bne.n	10c <mem_cpy+0x8>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
     116:	bd10      	pop	{r4, pc}

00000118 <ld_clust>:
     118:	1c02      	adds	r2, r0, #0
     11a:	7ecb      	ldrb	r3, [r1, #27]
     11c:	021b      	lsls	r3, r3, #8
     11e:	7e88      	ldrb	r0, [r1, #26]
     120:	4318      	orrs	r0, r3
     122:	7813      	ldrb	r3, [r2, #0]
     124:	2b03      	cmp	r3, #3
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
     126:	d105      	bne.n	134 <ld_clust+0x1c>
     128:	7d4b      	ldrb	r3, [r1, #21]
					res = sync_window(dj.fs);
     12a:	021b      	lsls	r3, r3, #8
     12c:	7d0a      	ldrb	r2, [r1, #20]
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
     12e:	4313      	orrs	r3, r2
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
     130:	041b      	lsls	r3, r3, #16
     132:	4318      	orrs	r0, r3
     134:	4770      	bx	lr
     136:	46c0      	nop			; (mov r8, r8)

00000138 <get_ldnumber>:
					dj.fs->wflag = 1;
     138:	b530      	push	{r4, r5, lr}
     13a:	6801      	ldr	r1, [r0, #0]
					res = sync_window(dj.fs);
     13c:	2900      	cmp	r1, #0
     13e:	d01a      	beq.n	176 <get_ldnumber+0x3e>
					if (res != FR_OK) break;
     140:	780c      	ldrb	r4, [r1, #0]
     142:	2c20      	cmp	r4, #32
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
     144:	d909      	bls.n	15a <get_ldnumber+0x22>
     146:	2c3a      	cmp	r4, #58	; 0x3a
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     148:	d01e      	beq.n	188 <get_ldnumber+0x50>
     14a:	1c0b      	adds	r3, r1, #0
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
     14c:	3301      	adds	r3, #1
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
     14e:	781a      	ldrb	r2, [r3, #0]
     150:	2a20      	cmp	r2, #32
     152:	d904      	bls.n	15e <get_ldnumber+0x26>
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
     154:	2a3a      	cmp	r2, #58	; 0x3a
     156:	d1f9      	bne.n	14c <get_ldnumber+0x14>
     158:	e004      	b.n	164 <get_ldnumber+0x2c>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
     15a:	1c22      	adds	r2, r4, #0
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
     15c:	1c0b      	adds	r3, r1, #0
     15e:	2500      	movs	r5, #0
     160:	2a3a      	cmp	r2, #58	; 0x3a
     162:	d113      	bne.n	18c <get_ldnumber+0x54>
     164:	1c4a      	adds	r2, r1, #1
			} else {
				dir = dj.dir;
     166:	4293      	cmp	r3, r2
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
     168:	d108      	bne.n	17c <get_ldnumber+0x44>
     16a:	2c30      	cmp	r4, #48	; 0x30
				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
     16c:	d109      	bne.n	182 <get_ldnumber+0x4a>
     16e:	3102      	adds	r1, #2
     170:	6001      	str	r1, [r0, #0]
     172:	2500      	movs	r5, #0
     174:	e00a      	b.n	18c <get_ldnumber+0x54>
     176:	2501      	movs	r5, #1
     178:	426d      	negs	r5, r5
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
     17a:	e007      	b.n	18c <get_ldnumber+0x54>
     17c:	2501      	movs	r5, #1
     17e:	426d      	negs	r5, r5
     180:	e004      	b.n	18c <get_ldnumber+0x54>
     182:	2501      	movs	r5, #1
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
     184:	426d      	negs	r5, r5
     186:	e001      	b.n	18c <get_ldnumber+0x54>
     188:	1c0b      	adds	r3, r1, #0
     18a:	e7eb      	b.n	164 <get_ldnumber+0x2c>
     18c:	1c28      	adds	r0, r5, #0
			} else {
				dir = dj.dir;
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
				st_clust(dir, dcl);					/* Table start cluster */
				dj.fs->wflag = 1;
     18e:	bd30      	pop	{r4, r5, pc}

00000190 <sync_window>:
     190:	b5f0      	push	{r4, r5, r6, r7, lr}
     192:	b083      	sub	sp, #12
				res = sync_fs(dj.fs);
     194:	7902      	ldrb	r2, [r0, #4]
     196:	2300      	movs	r3, #0
     198:	2a00      	cmp	r2, #0
     19a:	d029      	beq.n	1f0 <sync_window+0x60>
     19c:	1c04      	adds	r4, r0, #0
	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
     19e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
     1a0:	3330      	adds	r3, #48	; 0x30
					res = sync_window(dj.fs);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
     1a2:	469c      	mov	ip, r3
     1a4:	4484      	add	ip, r0
     1a6:	4663      	mov	r3, ip
     1a8:	9301      	str	r3, [sp, #4]
     1aa:	7840      	ldrb	r0, [r0, #1]
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
     1ac:	4661      	mov	r1, ip
     1ae:	1c2a      	adds	r2, r5, #0
     1b0:	2301      	movs	r3, #1
     1b2:	4e11      	ldr	r6, [pc, #68]	; (1f8 <sync_window+0x68>)
     1b4:	47b0      	blx	r6
     1b6:	2301      	movs	r3, #1
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
     1b8:	2800      	cmp	r0, #0
     1ba:	d119      	bne.n	1f0 <sync_window+0x60>
     1bc:	2300      	movs	r3, #0
     1be:	7123      	strb	r3, [r4, #4]
     1c0:	6a23      	ldr	r3, [r4, #32]
     1c2:	1aea      	subs	r2, r5, r3
     1c4:	2300      	movs	r3, #0
     1c6:	69a1      	ldr	r1, [r4, #24]
     1c8:	428a      	cmp	r2, r1
     1ca:	d211      	bcs.n	1f0 <sync_window+0x60>
     1cc:	78e6      	ldrb	r6, [r4, #3]
     1ce:	2e01      	cmp	r6, #1
     1d0:	d90d      	bls.n	1ee <sync_window+0x5e>
     1d2:	4f09      	ldr	r7, [pc, #36]	; (1f8 <sync_window+0x68>)
     1d4:	69a3      	ldr	r3, [r4, #24]
     1d6:	469c      	mov	ip, r3
     1d8:	4465      	add	r5, ip
     1da:	7860      	ldrb	r0, [r4, #1]
     1dc:	9901      	ldr	r1, [sp, #4]
     1de:	1c2a      	adds	r2, r5, #0
     1e0:	2301      	movs	r3, #1
     1e2:	47b8      	blx	r7
     1e4:	3e01      	subs	r6, #1
     1e6:	2e01      	cmp	r6, #1
     1e8:	d1f4      	bne.n	1d4 <sync_window+0x44>
     1ea:	2300      	movs	r3, #0
     1ec:	e000      	b.n	1f0 <sync_window+0x60>
     1ee:	2300      	movs	r3, #0
				disk_write(fs->drv, fs->win, wsect, 1);
			}
		}
	}
	return FR_OK;
}
     1f0:	1c18      	adds	r0, r3, #0
     1f2:	b003      	add	sp, #12
     1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	00001c2d 	.word	0x00001c2d

000001fc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
     1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (disk_read(fs->drv, fs->win, sector, 1))
			return FR_DISK_ERR;
		fs->winsect = sector;
	}

	return FR_OK;
     1fe:	2400      	movs	r4, #0
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
	if (sector != fs->winsect) {	/* Changed current window */
     200:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     202:	428b      	cmp	r3, r1
     204:	d013      	beq.n	22e <move_window+0x32>
     206:	1c0e      	adds	r6, r1, #0
     208:	1c05      	adds	r5, r0, #0
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
     20a:	4b0a      	ldr	r3, [pc, #40]	; (234 <move_window+0x38>)
     20c:	4798      	blx	r3
     20e:	1e04      	subs	r4, r0, #0
     210:	d10a      	bne.n	228 <move_window+0x2c>
			return FR_DISK_ERR;
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
     212:	7868      	ldrb	r0, [r5, #1]
     214:	1c29      	adds	r1, r5, #0
     216:	3130      	adds	r1, #48	; 0x30
     218:	1c32      	adds	r2, r6, #0
     21a:	2301      	movs	r3, #1
     21c:	4f06      	ldr	r7, [pc, #24]	; (238 <move_window+0x3c>)
     21e:	47b8      	blx	r7
     220:	2800      	cmp	r0, #0
     222:	d103      	bne.n	22c <move_window+0x30>
			return FR_DISK_ERR;
		fs->winsect = sector;
     224:	62ee      	str	r6, [r5, #44]	; 0x2c
     226:	e002      	b.n	22e <move_window+0x32>
)
{
	if (sector != fs->winsect) {	/* Changed current window */
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
			return FR_DISK_ERR;
     228:	2401      	movs	r4, #1
     22a:	e000      	b.n	22e <move_window+0x32>
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
			return FR_DISK_ERR;
     22c:	2401      	movs	r4, #1
		fs->winsect = sector;
	}

	return FR_OK;
}
     22e:	1c20      	adds	r0, r4, #0
     230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	00000191 	.word	0x00000191
     238:	00001bad 	.word	0x00001bad

0000023c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     23c:	b510      	push	{r4, lr}
     23e:	1c04      	adds	r4, r0, #0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
     240:	2300      	movs	r3, #0
     242:	7103      	strb	r3, [r0, #4]
     244:	3b01      	subs	r3, #1
     246:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
     248:	4b1e      	ldr	r3, [pc, #120]	; (2c4 <check_fs+0x88>)
     24a:	4798      	blx	r3
		return 3;
     24c:	2303      	movs	r3, #3
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
     24e:	2800      	cmp	r0, #0
     250:	d135      	bne.n	2be <check_fs+0x82>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     252:	4b1d      	ldr	r3, [pc, #116]	; (2c8 <check_fs+0x8c>)
     254:	5ce2      	ldrb	r2, [r4, r3]
     256:	0212      	lsls	r2, r2, #8
     258:	4b1c      	ldr	r3, [pc, #112]	; (2cc <check_fs+0x90>)
     25a:	5ce3      	ldrb	r3, [r4, r3]
     25c:	431a      	orrs	r2, r3
     25e:	b212      	sxth	r2, r2
		return 2;
     260:	2302      	movs	r3, #2
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     262:	491b      	ldr	r1, [pc, #108]	; (2d0 <check_fs+0x94>)
     264:	428a      	cmp	r2, r1
     266:	d12a      	bne.n	2be <check_fs+0x82>
		return 2;
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
     268:	3367      	adds	r3, #103	; 0x67
     26a:	5ce3      	ldrb	r3, [r4, r3]
     26c:	061a      	lsls	r2, r3, #24
     26e:	2368      	movs	r3, #104	; 0x68
     270:	5ce3      	ldrb	r3, [r4, r3]
     272:	041b      	lsls	r3, r3, #16
     274:	4313      	orrs	r3, r2
     276:	2266      	movs	r2, #102	; 0x66
     278:	5ca2      	ldrb	r2, [r4, r2]
     27a:	4313      	orrs	r3, r2
     27c:	2267      	movs	r2, #103	; 0x67
     27e:	5ca2      	ldrb	r2, [r4, r2]
     280:	0212      	lsls	r2, r2, #8
     282:	4313      	orrs	r3, r2
     284:	021b      	lsls	r3, r3, #8
     286:	0a1b      	lsrs	r3, r3, #8
     288:	4a12      	ldr	r2, [pc, #72]	; (2d4 <check_fs+0x98>)
     28a:	4293      	cmp	r3, r2
     28c:	d016      	beq.n	2bc <check_fs+0x80>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     28e:	2385      	movs	r3, #133	; 0x85
     290:	5ce3      	ldrb	r3, [r4, r3]
     292:	061a      	lsls	r2, r3, #24
     294:	2384      	movs	r3, #132	; 0x84
     296:	5ce3      	ldrb	r3, [r4, r3]
     298:	041b      	lsls	r3, r3, #16
     29a:	4313      	orrs	r3, r2
     29c:	2282      	movs	r2, #130	; 0x82
     29e:	5ca2      	ldrb	r2, [r4, r2]
     2a0:	4313      	orrs	r3, r2
     2a2:	2283      	movs	r2, #131	; 0x83
     2a4:	5ca2      	ldrb	r2, [r4, r2]
     2a6:	0212      	lsls	r2, r2, #8
     2a8:	4313      	orrs	r3, r2
     2aa:	021b      	lsls	r3, r3, #8
     2ac:	0a1b      	lsrs	r3, r3, #8
     2ae:	4a0a      	ldr	r2, [pc, #40]	; (2d8 <check_fs+0x9c>)
     2b0:	4694      	mov	ip, r2
     2b2:	4463      	add	r3, ip
     2b4:	1e58      	subs	r0, r3, #1
     2b6:	4183      	sbcs	r3, r0
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
     2b8:	b2db      	uxtb	r3, r3
     2ba:	e000      	b.n	2be <check_fs+0x82>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
     2bc:	2300      	movs	r3, #0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
     2be:	1c18      	adds	r0, r3, #0
     2c0:	bd10      	pop	{r4, pc}
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	000001fd 	.word	0x000001fd
     2c8:	0000022f 	.word	0x0000022f
     2cc:	0000022e 	.word	0x0000022e
     2d0:	ffffaa55 	.word	0xffffaa55
     2d4:	00544146 	.word	0x00544146
     2d8:	ffabbeba 	.word	0xffabbeba

000002dc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
     2dc:	b510      	push	{r4, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
     2de:	2800      	cmp	r0, #0
     2e0:	d012      	beq.n	308 <validate+0x2c>
     2e2:	6802      	ldr	r2, [r0, #0]
     2e4:	2a00      	cmp	r2, #0
     2e6:	d011      	beq.n	30c <validate+0x30>
     2e8:	7811      	ldrb	r1, [r2, #0]
		return FR_INVALID_OBJECT;
     2ea:	2309      	movs	r3, #9
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
     2ec:	2900      	cmp	r1, #0
     2ee:	d00e      	beq.n	30e <validate+0x32>
     2f0:	88d4      	ldrh	r4, [r2, #6]
     2f2:	8881      	ldrh	r1, [r0, #4]
     2f4:	428c      	cmp	r4, r1
     2f6:	d10a      	bne.n	30e <validate+0x32>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
     2f8:	7850      	ldrb	r0, [r2, #1]
     2fa:	4b06      	ldr	r3, [pc, #24]	; (314 <validate+0x38>)
     2fc:	4798      	blx	r3
		return FR_NOT_READY;
     2fe:	2303      	movs	r3, #3

	return FR_OK;
     300:	07c0      	lsls	r0, r0, #31
     302:	17c0      	asrs	r0, r0, #31
     304:	4003      	ands	r3, r0
     306:	e002      	b.n	30e <validate+0x32>
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
     308:	2309      	movs	r3, #9
     30a:	e000      	b.n	30e <validate+0x32>
     30c:	2309      	movs	r3, #9

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
     30e:	1c18      	adds	r0, r3, #0
     310:	bd10      	pop	{r4, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	00001a5d 	.word	0x00001a5d

00000318 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
     318:	b5f0      	push	{r4, r5, r6, r7, lr}
     31a:	4657      	mov	r7, sl
     31c:	464e      	mov	r6, r9
     31e:	4645      	mov	r5, r8
     320:	b4e0      	push	{r5, r6, r7}
     322:	b084      	sub	sp, #16
     324:	1c07      	adds	r7, r0, #0
     326:	1c16      	adds	r6, r2, #0
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
     328:	2300      	movs	r3, #0
     32a:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
     32c:	1c08      	adds	r0, r1, #0
     32e:	4bd2      	ldr	r3, [pc, #840]	; (678 <STACK_SIZE+0x278>)
     330:	4798      	blx	r3
     332:	1c04      	adds	r4, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
     334:	230b      	movs	r3, #11
     336:	2800      	cmp	r0, #0
     338:	da00      	bge.n	33c <find_volume+0x24>
     33a:	e1e0      	b.n	6fe <STACK_SIZE+0x2fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
     33c:	0083      	lsls	r3, r0, #2
     33e:	4acf      	ldr	r2, [pc, #828]	; (67c <STACK_SIZE+0x27c>)
     340:	589d      	ldr	r5, [r3, r2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     342:	2d00      	cmp	r5, #0
     344:	d100      	bne.n	348 <find_volume+0x30>
     346:	e16a      	b.n	61e <STACK_SIZE+0x21e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
     348:	603d      	str	r5, [r7, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
     34a:	782b      	ldrb	r3, [r5, #0]
     34c:	2b00      	cmp	r3, #0
     34e:	d00d      	beq.n	36c <find_volume+0x54>
		stat = disk_status(fs->drv);
     350:	7868      	ldrb	r0, [r5, #1]
     352:	4bcb      	ldr	r3, [pc, #812]	; (680 <STACK_SIZE+0x280>)
     354:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     356:	07c3      	lsls	r3, r0, #31
     358:	d408      	bmi.n	36c <find_volume+0x54>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     35a:	2300      	movs	r3, #0
	*rfs = fs;							/* Return pointer to the file system object */

	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     35c:	2e00      	cmp	r6, #0
     35e:	d100      	bne.n	362 <find_volume+0x4a>
     360:	e1cd      	b.n	6fe <STACK_SIZE+0x2fe>
     362:	0743      	lsls	r3, r0, #29
     364:	d400      	bmi.n	368 <find_volume+0x50>
     366:	e15c      	b.n	622 <STACK_SIZE+0x222>
				return FR_WRITE_PROTECTED;
     368:	230a      	movs	r3, #10
     36a:	e1c8      	b.n	6fe <STACK_SIZE+0x2fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     36c:	2300      	movs	r3, #0
     36e:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     370:	b2e0      	uxtb	r0, r4
     372:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     374:	4bc3      	ldr	r3, [pc, #780]	; (684 <STACK_SIZE+0x284>)
     376:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     378:	2303      	movs	r3, #3
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     37a:	07c2      	lsls	r2, r0, #31
     37c:	d500      	bpl.n	380 <find_volume+0x68>
     37e:	e1be      	b.n	6fe <STACK_SIZE+0x2fe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     380:	2e00      	cmp	r6, #0
     382:	d100      	bne.n	386 <find_volume+0x6e>
     384:	e151      	b.n	62a <STACK_SIZE+0x22a>
		return FR_WRITE_PROTECTED;
     386:	3307      	adds	r3, #7
	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     388:	0742      	lsls	r2, r0, #29
     38a:	d500      	bpl.n	38e <find_volume+0x76>
     38c:	e1b7      	b.n	6fe <STACK_SIZE+0x2fe>
     38e:	e14c      	b.n	62a <STACK_SIZE+0x22a>
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     390:	7819      	ldrb	r1, [r3, #0]
     392:	1c22      	adds	r2, r4, #0
     394:	2900      	cmp	r1, #0
     396:	d009      	beq.n	3ac <find_volume+0x94>
     398:	79da      	ldrb	r2, [r3, #7]
     39a:	0611      	lsls	r1, r2, #24
     39c:	799a      	ldrb	r2, [r3, #6]
     39e:	0412      	lsls	r2, r2, #16
     3a0:	430a      	orrs	r2, r1
     3a2:	7919      	ldrb	r1, [r3, #4]
     3a4:	430a      	orrs	r2, r1
     3a6:	7959      	ldrb	r1, [r3, #5]
     3a8:	0209      	lsls	r1, r1, #8
     3aa:	430a      	orrs	r2, r1
     3ac:	4669      	mov	r1, sp
     3ae:	5042      	str	r2, [r0, r1]
     3b0:	3310      	adds	r3, #16
     3b2:	3004      	adds	r0, #4
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
     3b4:	2810      	cmp	r0, #16
     3b6:	d1eb      	bne.n	390 <find_volume+0x78>
     3b8:	2600      	movs	r6, #0
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     3ba:	2402      	movs	r4, #2
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
     3bc:	466b      	mov	r3, sp
     3be:	58f7      	ldr	r7, [r6, r3]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     3c0:	1c20      	adds	r0, r4, #0
     3c2:	2f00      	cmp	r7, #0
     3c4:	d005      	beq.n	3d2 <find_volume+0xba>
     3c6:	1c28      	adds	r0, r5, #0
     3c8:	1c39      	adds	r1, r7, #0
     3ca:	4baf      	ldr	r3, [pc, #700]	; (688 <STACK_SIZE+0x288>)
     3cc:	4798      	blx	r3
		} while (!LD2PT(vol) && fmt && ++i < 4);
     3ce:	2800      	cmp	r0, #0
     3d0:	d002      	beq.n	3d8 <find_volume+0xc0>
     3d2:	3604      	adds	r6, #4
     3d4:	2e10      	cmp	r6, #16
     3d6:	d1f1      	bne.n	3bc <find_volume+0xa4>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     3d8:	2803      	cmp	r0, #3
     3da:	d100      	bne.n	3de <find_volume+0xc6>
     3dc:	e123      	b.n	626 <STACK_SIZE+0x226>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     3de:	230d      	movs	r3, #13
     3e0:	2800      	cmp	r0, #0
     3e2:	d000      	beq.n	3e6 <find_volume+0xce>
     3e4:	e18b      	b.n	6fe <STACK_SIZE+0x2fe>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     3e6:	332f      	adds	r3, #47	; 0x2f
     3e8:	5cea      	ldrb	r2, [r5, r3]
     3ea:	0212      	lsls	r2, r2, #8
     3ec:	3b01      	subs	r3, #1
     3ee:	5ceb      	ldrb	r3, [r5, r3]
     3f0:	431a      	orrs	r2, r3
     3f2:	b212      	sxth	r2, r2
		return FR_NO_FILESYSTEM;
     3f4:	230d      	movs	r3, #13
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     3f6:	2180      	movs	r1, #128	; 0x80
     3f8:	0089      	lsls	r1, r1, #2
     3fa:	428a      	cmp	r2, r1
     3fc:	d000      	beq.n	400 <STACK_SIZE>
     3fe:	e17e      	b.n	6fe <STACK_SIZE+0x2fe>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     400:	333a      	adds	r3, #58	; 0x3a
     402:	5cec      	ldrb	r4, [r5, r3]
     404:	0223      	lsls	r3, r4, #8
     406:	2246      	movs	r2, #70	; 0x46
     408:	5cac      	ldrb	r4, [r5, r2]
     40a:	431c      	orrs	r4, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     40c:	d10d      	bne.n	42a <STACK_SIZE+0x2a>
     40e:	2357      	movs	r3, #87	; 0x57
     410:	5ceb      	ldrb	r3, [r5, r3]
     412:	061c      	lsls	r4, r3, #24
     414:	2356      	movs	r3, #86	; 0x56
     416:	5ceb      	ldrb	r3, [r5, r3]
     418:	041b      	lsls	r3, r3, #16
     41a:	4323      	orrs	r3, r4
     41c:	320e      	adds	r2, #14
     41e:	5cac      	ldrb	r4, [r5, r2]
     420:	431c      	orrs	r4, r3
     422:	2355      	movs	r3, #85	; 0x55
     424:	5cea      	ldrb	r2, [r5, r3]
     426:	0212      	lsls	r2, r2, #8
     428:	4314      	orrs	r4, r2
	fs->fsize = fasize;
     42a:	61ac      	str	r4, [r5, #24]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
     42c:	2340      	movs	r3, #64	; 0x40
     42e:	5cea      	ldrb	r2, [r5, r3]
     430:	70ea      	strb	r2, [r5, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
     432:	1e51      	subs	r1, r2, #1
		return FR_NO_FILESYSTEM;
     434:	3b33      	subs	r3, #51	; 0x33
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
     436:	2901      	cmp	r1, #1
     438:	d900      	bls.n	43c <STACK_SIZE+0x3c>
     43a:	e160      	b.n	6fe <STACK_SIZE+0x2fe>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
     43c:	3330      	adds	r3, #48	; 0x30
     43e:	5ce9      	ldrb	r1, [r5, r3]
     440:	70a9      	strb	r1, [r5, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;
     442:	3b30      	subs	r3, #48	; 0x30
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
     444:	2900      	cmp	r1, #0
     446:	d100      	bne.n	44a <STACK_SIZE+0x4a>
     448:	e159      	b.n	6fe <STACK_SIZE+0x2fe>
     44a:	1e48      	subs	r0, r1, #1
     44c:	4201      	tst	r1, r0
     44e:	d000      	beq.n	452 <STACK_SIZE+0x52>
     450:	e155      	b.n	6fe <STACK_SIZE+0x2fe>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     452:	3335      	adds	r3, #53	; 0x35
     454:	5ceb      	ldrb	r3, [r5, r3]
     456:	021b      	lsls	r3, r3, #8
     458:	2041      	movs	r0, #65	; 0x41
     45a:	5c28      	ldrb	r0, [r5, r0]
     45c:	4318      	orrs	r0, r3
     45e:	4681      	mov	r9, r0
     460:	8128      	strh	r0, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
		return FR_NO_FILESYSTEM;
     462:	230d      	movs	r3, #13
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
     464:	0700      	lsls	r0, r0, #28
     466:	d000      	beq.n	46a <STACK_SIZE+0x6a>
     468:	e149      	b.n	6fe <STACK_SIZE+0x2fe>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     46a:	3337      	adds	r3, #55	; 0x37
     46c:	5ce8      	ldrb	r0, [r5, r3]
     46e:	0203      	lsls	r3, r0, #8
     470:	2043      	movs	r0, #67	; 0x43
     472:	5c28      	ldrb	r0, [r5, r0]
     474:	4318      	orrs	r0, r3
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
     476:	d10d      	bne.n	494 <STACK_SIZE+0x94>
     478:	2353      	movs	r3, #83	; 0x53
     47a:	5ceb      	ldrb	r3, [r5, r3]
     47c:	0618      	lsls	r0, r3, #24
     47e:	2352      	movs	r3, #82	; 0x52
     480:	5ceb      	ldrb	r3, [r5, r3]
     482:	041b      	lsls	r3, r3, #16
     484:	4303      	orrs	r3, r0
     486:	2050      	movs	r0, #80	; 0x50
     488:	5c28      	ldrb	r0, [r5, r0]
     48a:	4318      	orrs	r0, r3
     48c:	2351      	movs	r3, #81	; 0x51
     48e:	5cee      	ldrb	r6, [r5, r3]
     490:	0236      	lsls	r6, r6, #8
     492:	4330      	orrs	r0, r6

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
     494:	233f      	movs	r3, #63	; 0x3f
     496:	5cee      	ldrb	r6, [r5, r3]
     498:	0233      	lsls	r3, r6, #8
     49a:	263e      	movs	r6, #62	; 0x3e
     49c:	5dae      	ldrb	r6, [r5, r6]
     49e:	431e      	orrs	r6, r3
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     4a0:	230d      	movs	r3, #13
     4a2:	2e00      	cmp	r6, #0
     4a4:	d100      	bne.n	4a8 <STACK_SIZE+0xa8>
     4a6:	e12a      	b.n	6fe <STACK_SIZE+0x2fe>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
     4a8:	4362      	muls	r2, r4
     4aa:	4692      	mov	sl, r2

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
     4ac:	464b      	mov	r3, r9
     4ae:	091b      	lsrs	r3, r3, #4
     4b0:	199b      	adds	r3, r3, r6
     4b2:	4453      	add	r3, sl
     4b4:	4698      	mov	r8, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     4b6:	230d      	movs	r3, #13
     4b8:	4540      	cmp	r0, r8
     4ba:	d200      	bcs.n	4be <STACK_SIZE+0xbe>
     4bc:	e11f      	b.n	6fe <STACK_SIZE+0x2fe>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     4be:	4643      	mov	r3, r8
     4c0:	1ac0      	subs	r0, r0, r3
     4c2:	4b72      	ldr	r3, [pc, #456]	; (68c <STACK_SIZE+0x28c>)
     4c4:	4798      	blx	r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     4c6:	230d      	movs	r3, #13
     4c8:	2800      	cmp	r0, #0
     4ca:	d100      	bne.n	4ce <STACK_SIZE+0xce>
     4cc:	e117      	b.n	6fe <STACK_SIZE+0x2fe>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     4ce:	2200      	movs	r2, #0
     4d0:	4b6f      	ldr	r3, [pc, #444]	; (690 <STACK_SIZE+0x290>)
     4d2:	4283      	cmp	r3, r0
     4d4:	4152      	adcs	r2, r2
     4d6:	2302      	movs	r3, #2
     4d8:	1a9a      	subs	r2, r3, r2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     4da:	4b6e      	ldr	r3, [pc, #440]	; (694 <STACK_SIZE+0x294>)
     4dc:	4298      	cmp	r0, r3
     4de:	d900      	bls.n	4e2 <STACK_SIZE+0xe2>
     4e0:	e0b1      	b.n	646 <STACK_SIZE+0x246>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     4e2:	3002      	adds	r0, #2
     4e4:	6168      	str	r0, [r5, #20]
	fs->volbase = bsect;								/* Volume start sector */
     4e6:	61ef      	str	r7, [r5, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     4e8:	19be      	adds	r6, r7, r6
     4ea:	622e      	str	r6, [r5, #32]
	fs->database = bsect + sysect;						/* Data start sector */
     4ec:	4643      	mov	r3, r8
     4ee:	19db      	adds	r3, r3, r7
     4f0:	62ab      	str	r3, [r5, #40]	; 0x28
	if (fmt == FS_FAT32) {
     4f2:	2a03      	cmp	r2, #3
     4f4:	d11e      	bne.n	534 <STACK_SIZE+0x134>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     4f6:	230d      	movs	r3, #13
     4f8:	464a      	mov	r2, r9
     4fa:	2a00      	cmp	r2, #0
     4fc:	d000      	beq.n	500 <STACK_SIZE+0x100>
     4fe:	e0fe      	b.n	6fe <STACK_SIZE+0x2fe>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
     500:	3352      	adds	r3, #82	; 0x52
     502:	5ceb      	ldrb	r3, [r5, r3]
     504:	061a      	lsls	r2, r3, #24
     506:	235e      	movs	r3, #94	; 0x5e
     508:	5ceb      	ldrb	r3, [r5, r3]
     50a:	041b      	lsls	r3, r3, #16
     50c:	4313      	orrs	r3, r2
     50e:	225c      	movs	r2, #92	; 0x5c
     510:	5caa      	ldrb	r2, [r5, r2]
     512:	431a      	orrs	r2, r3
     514:	235d      	movs	r3, #93	; 0x5d
     516:	5ceb      	ldrb	r3, [r5, r3]
     518:	021b      	lsls	r3, r3, #8
     51a:	4313      	orrs	r3, r2
     51c:	626b      	str	r3, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
     51e:	0082      	lsls	r2, r0, #2
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
     520:	4b5d      	ldr	r3, [pc, #372]	; (698 <STACK_SIZE+0x298>)
     522:	469c      	mov	ip, r3
     524:	4462      	add	r2, ip
     526:	0a52      	lsrs	r2, r2, #9
		return FR_NO_FILESYSTEM;
     528:	3bf3      	subs	r3, #243	; 0xf3
     52a:	3bff      	subs	r3, #255	; 0xff
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
     52c:	4294      	cmp	r4, r2
     52e:	d200      	bcs.n	532 <STACK_SIZE+0x132>
     530:	e0e5      	b.n	6fe <STACK_SIZE+0x2fe>
     532:	e0d3      	b.n	6dc <STACK_SIZE+0x2dc>
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     534:	230d      	movs	r3, #13
     536:	4649      	mov	r1, r9
     538:	2900      	cmp	r1, #0
     53a:	d100      	bne.n	53e <STACK_SIZE+0x13e>
     53c:	e0df      	b.n	6fe <STACK_SIZE+0x2fe>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     53e:	4456      	add	r6, sl
     540:	626e      	str	r6, [r5, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     542:	2a02      	cmp	r2, #2
     544:	d101      	bne.n	54a <STACK_SIZE+0x14a>
     546:	0040      	lsls	r0, r0, #1
     548:	e08d      	b.n	666 <STACK_SIZE+0x266>
     54a:	2103      	movs	r1, #3
     54c:	4341      	muls	r1, r0
     54e:	0849      	lsrs	r1, r1, #1
     550:	2301      	movs	r3, #1
     552:	4018      	ands	r0, r3
     554:	1808      	adds	r0, r1, r0
     556:	e086      	b.n	666 <STACK_SIZE+0x266>
	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
		&& move_window(fs, bsect + 1) == FR_OK)
     558:	1c79      	adds	r1, r7, #1
     55a:	1c28      	adds	r0, r5, #0
     55c:	4b4f      	ldr	r3, [pc, #316]	; (69c <STACK_SIZE+0x29c>)
     55e:	4798      	blx	r3
     560:	2203      	movs	r2, #3
     562:	2800      	cmp	r0, #0
     564:	d152      	bne.n	60c <STACK_SIZE+0x20c>
	{
		fs->fsi_flag = 0;
     566:	2300      	movs	r3, #0
     568:	716b      	strb	r3, [r5, #5]
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
     56a:	4b4d      	ldr	r3, [pc, #308]	; (6a0 <STACK_SIZE+0x2a0>)
     56c:	5ceb      	ldrb	r3, [r5, r3]
     56e:	021b      	lsls	r3, r3, #8
     570:	4a4c      	ldr	r2, [pc, #304]	; (6a4 <STACK_SIZE+0x2a4>)
     572:	5caa      	ldrb	r2, [r5, r2]
     574:	4313      	orrs	r3, r2
     576:	b21b      	sxth	r3, r3
     578:	2203      	movs	r2, #3
     57a:	494b      	ldr	r1, [pc, #300]	; (6a8 <STACK_SIZE+0x2a8>)
     57c:	428b      	cmp	r3, r1
     57e:	d145      	bne.n	60c <STACK_SIZE+0x20c>
			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
     580:	2333      	movs	r3, #51	; 0x33
     582:	5ceb      	ldrb	r3, [r5, r3]
     584:	061a      	lsls	r2, r3, #24
     586:	2332      	movs	r3, #50	; 0x32
     588:	5ceb      	ldrb	r3, [r5, r3]
     58a:	041b      	lsls	r3, r3, #16
     58c:	4313      	orrs	r3, r2
     58e:	2230      	movs	r2, #48	; 0x30
     590:	5caa      	ldrb	r2, [r5, r2]
     592:	431a      	orrs	r2, r3
     594:	2331      	movs	r3, #49	; 0x31
     596:	5ceb      	ldrb	r3, [r5, r3]
     598:	021b      	lsls	r3, r3, #8
     59a:	4313      	orrs	r3, r2
     59c:	2203      	movs	r2, #3
     59e:	4943      	ldr	r1, [pc, #268]	; (6ac <STACK_SIZE+0x2ac>)
     5a0:	428b      	cmp	r3, r1
     5a2:	d133      	bne.n	60c <STACK_SIZE+0x20c>
			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
     5a4:	4b42      	ldr	r3, [pc, #264]	; (6b0 <STACK_SIZE+0x2b0>)
     5a6:	5ceb      	ldrb	r3, [r5, r3]
     5a8:	061a      	lsls	r2, r3, #24
     5aa:	4b42      	ldr	r3, [pc, #264]	; (6b4 <STACK_SIZE+0x2b4>)
     5ac:	5ceb      	ldrb	r3, [r5, r3]
     5ae:	041b      	lsls	r3, r3, #16
     5b0:	4313      	orrs	r3, r2
     5b2:	2285      	movs	r2, #133	; 0x85
     5b4:	0092      	lsls	r2, r2, #2
     5b6:	5caa      	ldrb	r2, [r5, r2]
     5b8:	431a      	orrs	r2, r3
     5ba:	4b3f      	ldr	r3, [pc, #252]	; (6b8 <STACK_SIZE+0x2b8>)
     5bc:	5ceb      	ldrb	r3, [r5, r3]
     5be:	021b      	lsls	r3, r3, #8
     5c0:	4313      	orrs	r3, r2
     5c2:	2203      	movs	r2, #3
     5c4:	493d      	ldr	r1, [pc, #244]	; (6bc <STACK_SIZE+0x2bc>)
     5c6:	428b      	cmp	r3, r1
     5c8:	d120      	bne.n	60c <STACK_SIZE+0x20c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
     5ca:	4b3d      	ldr	r3, [pc, #244]	; (6c0 <STACK_SIZE+0x2c0>)
     5cc:	5ceb      	ldrb	r3, [r5, r3]
     5ce:	061a      	lsls	r2, r3, #24
     5d0:	4b3c      	ldr	r3, [pc, #240]	; (6c4 <STACK_SIZE+0x2c4>)
     5d2:	5ceb      	ldrb	r3, [r5, r3]
     5d4:	041b      	lsls	r3, r3, #16
     5d6:	4313      	orrs	r3, r2
     5d8:	2286      	movs	r2, #134	; 0x86
     5da:	0092      	lsls	r2, r2, #2
     5dc:	5caa      	ldrb	r2, [r5, r2]
     5de:	431a      	orrs	r2, r3
     5e0:	4b39      	ldr	r3, [pc, #228]	; (6c8 <STACK_SIZE+0x2c8>)
     5e2:	5ceb      	ldrb	r3, [r5, r3]
     5e4:	021b      	lsls	r3, r3, #8
     5e6:	4313      	orrs	r3, r2
     5e8:	612b      	str	r3, [r5, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
     5ea:	4b38      	ldr	r3, [pc, #224]	; (6cc <STACK_SIZE+0x2cc>)
     5ec:	5ceb      	ldrb	r3, [r5, r3]
     5ee:	061a      	lsls	r2, r3, #24
     5f0:	4b37      	ldr	r3, [pc, #220]	; (6d0 <STACK_SIZE+0x2d0>)
     5f2:	5ceb      	ldrb	r3, [r5, r3]
     5f4:	041b      	lsls	r3, r3, #16
     5f6:	4313      	orrs	r3, r2
     5f8:	2287      	movs	r2, #135	; 0x87
     5fa:	0092      	lsls	r2, r2, #2
     5fc:	5caa      	ldrb	r2, [r5, r2]
     5fe:	431a      	orrs	r2, r3
     600:	4b34      	ldr	r3, [pc, #208]	; (6d4 <STACK_SIZE+0x2d4>)
     602:	5ceb      	ldrb	r3, [r5, r3]
     604:	021b      	lsls	r3, r3, #8
     606:	4313      	orrs	r3, r2
     608:	60eb      	str	r3, [r5, #12]
     60a:	2203      	movs	r2, #3
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
     60c:	702a      	strb	r2, [r5, #0]
	fs->id = ++Fsid;	/* File system mount ID */
     60e:	4a32      	ldr	r2, [pc, #200]	; (6d8 <STACK_SIZE+0x2d8>)
     610:	8813      	ldrh	r3, [r2, #0]
     612:	3301      	adds	r3, #1
     614:	b29b      	uxth	r3, r3
     616:	8013      	strh	r3, [r2, #0]
     618:	80eb      	strh	r3, [r5, #6]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
     61a:	2300      	movs	r3, #0
     61c:	e06f      	b.n	6fe <STACK_SIZE+0x2fe>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     61e:	230c      	movs	r3, #12
     620:	e06d      	b.n	6fe <STACK_SIZE+0x2fe>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     622:	2300      	movs	r3, #0
     624:	e06b      	b.n	6fe <STACK_SIZE+0x2fe>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     626:	2301      	movs	r3, #1
     628:	e069      	b.n	6fe <STACK_SIZE+0x2fe>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
     62a:	1c28      	adds	r0, r5, #0
     62c:	2100      	movs	r1, #0
     62e:	4b16      	ldr	r3, [pc, #88]	; (688 <STACK_SIZE+0x288>)
     630:	4798      	blx	r3
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
     632:	2700      	movs	r7, #0
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     634:	2801      	cmp	r0, #1
     636:	d000      	beq.n	63a <STACK_SIZE+0x23a>
     638:	e6ce      	b.n	3d8 <find_volume+0xc0>
     63a:	1c2b      	adds	r3, r5, #0
     63c:	33f3      	adds	r3, #243	; 0xf3
     63e:	33ff      	adds	r3, #255	; 0xff
     640:	2000      	movs	r0, #0
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     642:	2400      	movs	r4, #0
     644:	e6a4      	b.n	390 <find_volume+0x78>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     646:	3002      	adds	r0, #2
     648:	6168      	str	r0, [r5, #20]
	fs->volbase = bsect;								/* Volume start sector */
     64a:	61ef      	str	r7, [r5, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     64c:	19be      	adds	r6, r7, r6
     64e:	622e      	str	r6, [r5, #32]
	fs->database = bsect + sysect;						/* Data start sector */
     650:	4643      	mov	r3, r8
     652:	19db      	adds	r3, r3, r7
     654:	62ab      	str	r3, [r5, #40]	; 0x28
     656:	e74e      	b.n	4f6 <STACK_SIZE+0xf6>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
     658:	2301      	movs	r3, #1
     65a:	425b      	negs	r3, r3
     65c:	612b      	str	r3, [r5, #16]
     65e:	60eb      	str	r3, [r5, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
     660:	3381      	adds	r3, #129	; 0x81
     662:	716b      	strb	r3, [r5, #5]
     664:	e7d2      	b.n	60c <STACK_SIZE+0x20c>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
     666:	4b0c      	ldr	r3, [pc, #48]	; (698 <STACK_SIZE+0x298>)
     668:	469c      	mov	ip, r3
     66a:	4460      	add	r0, ip
     66c:	0a40      	lsrs	r0, r0, #9
		return FR_NO_FILESYSTEM;
     66e:	3bf3      	subs	r3, #243	; 0xf3
     670:	3bff      	subs	r3, #255	; 0xff
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
     672:	4284      	cmp	r4, r0
     674:	d343      	bcc.n	6fe <STACK_SIZE+0x2fe>
     676:	e7ef      	b.n	658 <STACK_SIZE+0x258>
     678:	00000139 	.word	0x00000139
     67c:	20000044 	.word	0x20000044
     680:	00001a5d 	.word	0x00001a5d
     684:	00001a71 	.word	0x00001a71
     688:	0000023d 	.word	0x0000023d
     68c:	000043c1 	.word	0x000043c1
     690:	00000ff5 	.word	0x00000ff5
     694:	0000fff5 	.word	0x0000fff5
     698:	000001ff 	.word	0x000001ff
     69c:	000001fd 	.word	0x000001fd
     6a0:	0000022f 	.word	0x0000022f
     6a4:	0000022e 	.word	0x0000022e
     6a8:	ffffaa55 	.word	0xffffaa55
     6ac:	41615252 	.word	0x41615252
     6b0:	00000217 	.word	0x00000217
     6b4:	00000216 	.word	0x00000216
     6b8:	00000215 	.word	0x00000215
     6bc:	61417272 	.word	0x61417272
     6c0:	0000021b 	.word	0x0000021b
     6c4:	0000021a 	.word	0x0000021a
     6c8:	00000219 	.word	0x00000219
     6cc:	0000021f 	.word	0x0000021f
     6d0:	0000021e 	.word	0x0000021e
     6d4:	0000021d 	.word	0x0000021d
     6d8:	20000040 	.word	0x20000040
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
     6dc:	2301      	movs	r3, #1
     6de:	425b      	negs	r3, r3
     6e0:	612b      	str	r3, [r5, #16]
     6e2:	60eb      	str	r3, [r5, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
     6e4:	3381      	adds	r3, #129	; 0x81
     6e6:	716b      	strb	r3, [r5, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
     6e8:	3b1f      	subs	r3, #31
     6ea:	5ceb      	ldrb	r3, [r5, r3]
     6ec:	021b      	lsls	r3, r3, #8
     6ee:	2260      	movs	r2, #96	; 0x60
     6f0:	5caa      	ldrb	r2, [r5, r2]
     6f2:	4313      	orrs	r3, r2
     6f4:	2b01      	cmp	r3, #1
     6f6:	d100      	bne.n	6fa <STACK_SIZE+0x2fa>
     6f8:	e72e      	b.n	558 <STACK_SIZE+0x158>
     6fa:	2203      	movs	r2, #3
     6fc:	e786      	b.n	60c <STACK_SIZE+0x20c>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
     6fe:	1c18      	adds	r0, r3, #0
     700:	b004      	add	sp, #16
     702:	bc1c      	pop	{r2, r3, r4}
     704:	4690      	mov	r8, r2
     706:	4699      	mov	r9, r3
     708:	46a2      	mov	sl, r4
     70a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000070c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
     70c:	b538      	push	{r3, r4, r5, lr}
     70e:	1c04      	adds	r4, r0, #0
	FRESULT res;


	res = sync_window(fs);
     710:	4b2d      	ldr	r3, [pc, #180]	; (7c8 <sync_fs+0xbc>)
     712:	4798      	blx	r3
	if (res == FR_OK) {
     714:	2800      	cmp	r0, #0
     716:	d155      	bne.n	7c4 <sync_fs+0xb8>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
     718:	7823      	ldrb	r3, [r4, #0]
     71a:	2b03      	cmp	r3, #3
     71c:	d14a      	bne.n	7b4 <sync_fs+0xa8>
     71e:	7963      	ldrb	r3, [r4, #5]
     720:	2b01      	cmp	r3, #1
     722:	d147      	bne.n	7b4 <sync_fs+0xa8>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
     724:	1c21      	adds	r1, r4, #0
     726:	3130      	adds	r1, #48	; 0x30
     728:	1c0b      	adds	r3, r1, #0
     72a:	228c      	movs	r2, #140	; 0x8c
     72c:	0092      	lsls	r2, r2, #2
     72e:	18a0      	adds	r0, r4, r2
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
     730:	2200      	movs	r2, #0
     732:	701a      	strb	r2, [r3, #0]
     734:	3301      	adds	r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     736:	4283      	cmp	r3, r0
     738:	d1fb      	bne.n	732 <sync_fs+0x26>
	if (res == FR_OK) {
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
			ST_WORD(fs->win+BS_55AA, 0xAA55);
     73a:	2255      	movs	r2, #85	; 0x55
     73c:	4b23      	ldr	r3, [pc, #140]	; (7cc <sync_fs+0xc0>)
     73e:	54e2      	strb	r2, [r4, r3]
     740:	3255      	adds	r2, #85	; 0x55
     742:	4b23      	ldr	r3, [pc, #140]	; (7d0 <sync_fs+0xc4>)
     744:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
     746:	3bde      	subs	r3, #222	; 0xde
     748:	3bff      	subs	r3, #255	; 0xff
     74a:	3a7a      	subs	r2, #122	; 0x7a
     74c:	54a3      	strb	r3, [r4, r2]
     74e:	3201      	adds	r2, #1
     750:	54a3      	strb	r3, [r4, r2]
     752:	330f      	adds	r3, #15
     754:	3201      	adds	r2, #1
     756:	54a3      	strb	r3, [r4, r2]
     758:	320f      	adds	r2, #15
     75a:	2033      	movs	r0, #51	; 0x33
     75c:	5422      	strb	r2, [r4, r0]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
     75e:	303f      	adds	r0, #63	; 0x3f
     760:	2585      	movs	r5, #133	; 0x85
     762:	00ad      	lsls	r5, r5, #2
     764:	5560      	strb	r0, [r4, r5]
     766:	4d1b      	ldr	r5, [pc, #108]	; (7d4 <sync_fs+0xc8>)
     768:	5560      	strb	r0, [r4, r5]
     76a:	481b      	ldr	r0, [pc, #108]	; (7d8 <sync_fs+0xcc>)
     76c:	5422      	strb	r2, [r4, r0]
     76e:	4a1b      	ldr	r2, [pc, #108]	; (7dc <sync_fs+0xd0>)
     770:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
     772:	6923      	ldr	r3, [r4, #16]
     774:	3201      	adds	r2, #1
     776:	54a3      	strb	r3, [r4, r2]
     778:	0a18      	lsrs	r0, r3, #8
     77a:	4a19      	ldr	r2, [pc, #100]	; (7e0 <sync_fs+0xd4>)
     77c:	54a0      	strb	r0, [r4, r2]
     77e:	0c18      	lsrs	r0, r3, #16
     780:	4a18      	ldr	r2, [pc, #96]	; (7e4 <sync_fs+0xd8>)
     782:	54a0      	strb	r0, [r4, r2]
     784:	0e1b      	lsrs	r3, r3, #24
     786:	4a18      	ldr	r2, [pc, #96]	; (7e8 <sync_fs+0xdc>)
     788:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
     78a:	68e3      	ldr	r3, [r4, #12]
     78c:	3201      	adds	r2, #1
     78e:	54a3      	strb	r3, [r4, r2]
     790:	0a18      	lsrs	r0, r3, #8
     792:	4a16      	ldr	r2, [pc, #88]	; (7ec <sync_fs+0xe0>)
     794:	54a0      	strb	r0, [r4, r2]
     796:	0c18      	lsrs	r0, r3, #16
     798:	4a15      	ldr	r2, [pc, #84]	; (7f0 <sync_fs+0xe4>)
     79a:	54a0      	strb	r0, [r4, r2]
     79c:	0e1b      	lsrs	r3, r3, #24
     79e:	4a15      	ldr	r2, [pc, #84]	; (7f4 <sync_fs+0xe8>)
     7a0:	54a3      	strb	r3, [r4, r2]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
     7a2:	69e3      	ldr	r3, [r4, #28]
     7a4:	1c5a      	adds	r2, r3, #1
     7a6:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
     7a8:	7860      	ldrb	r0, [r4, #1]
     7aa:	2301      	movs	r3, #1
     7ac:	4d12      	ldr	r5, [pc, #72]	; (7f8 <sync_fs+0xec>)
     7ae:	47a8      	blx	r5
			fs->fsi_flag = 0;
     7b0:	2300      	movs	r3, #0
     7b2:	7163      	strb	r3, [r4, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
     7b4:	7860      	ldrb	r0, [r4, #1]
     7b6:	2100      	movs	r1, #0
     7b8:	2200      	movs	r2, #0
     7ba:	4b10      	ldr	r3, [pc, #64]	; (7fc <sync_fs+0xf0>)
     7bc:	4798      	blx	r3
     7be:	1e43      	subs	r3, r0, #1
     7c0:	4198      	sbcs	r0, r3
)
{
	FRESULT res;


	res = sync_window(fs);
     7c2:	b2c0      	uxtb	r0, r0
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
			res = FR_DISK_ERR;
	}

	return res;
}
     7c4:	bd38      	pop	{r3, r4, r5, pc}
     7c6:	46c0      	nop			; (mov r8, r8)
     7c8:	00000191 	.word	0x00000191
     7cc:	0000022e 	.word	0x0000022e
     7d0:	0000022f 	.word	0x0000022f
     7d4:	00000215 	.word	0x00000215
     7d8:	00000216 	.word	0x00000216
     7dc:	00000217 	.word	0x00000217
     7e0:	00000219 	.word	0x00000219
     7e4:	0000021a 	.word	0x0000021a
     7e8:	0000021b 	.word	0x0000021b
     7ec:	0000021d 	.word	0x0000021d
     7f0:	0000021e 	.word	0x0000021e
     7f4:	0000021f 	.word	0x0000021f
     7f8:	00001c2d 	.word	0x00001c2d
     7fc:	00001cd1 	.word	0x00001cd1

00000800 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     800:	1c02      	adds	r2, r0, #0
	clst -= 2;
     802:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     804:	6943      	ldr	r3, [r0, #20]
     806:	3b02      	subs	r3, #2
     808:	2000      	movs	r0, #0
     80a:	4299      	cmp	r1, r3
     80c:	d203      	bcs.n	816 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
     80e:	7890      	ldrb	r0, [r2, #2]
     810:	4341      	muls	r1, r0
     812:	6a93      	ldr	r3, [r2, #40]	; 0x28
     814:	18c8      	adds	r0, r1, r3
}
     816:	4770      	bx	lr

00000818 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
     81a:	2901      	cmp	r1, #1
     81c:	d966      	bls.n	8ec <get_fat+0xd4>
		return 1;
     81e:	2301      	movs	r3, #1
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
     820:	6942      	ldr	r2, [r0, #20]
     822:	4291      	cmp	r1, r2
     824:	d271      	bcs.n	90a <get_fat+0xf2>
     826:	1c0c      	adds	r4, r1, #0
     828:	1c06      	adds	r6, r0, #0
		return 1;

	switch (fs->fs_type) {
     82a:	7803      	ldrb	r3, [r0, #0]
     82c:	2b02      	cmp	r3, #2
     82e:	d02a      	beq.n	886 <get_fat+0x6e>
     830:	2b03      	cmp	r3, #3
     832:	d03d      	beq.n	8b0 <get_fat+0x98>
     834:	2b01      	cmp	r3, #1
     836:	d15b      	bne.n	8f0 <get_fat+0xd8>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
     838:	084f      	lsrs	r7, r1, #1
     83a:	187f      	adds	r7, r7, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     83c:	0a79      	lsrs	r1, r7, #9
     83e:	6a03      	ldr	r3, [r0, #32]
     840:	469c      	mov	ip, r3
     842:	4461      	add	r1, ip
     844:	4b32      	ldr	r3, [pc, #200]	; (910 <get_fat+0xf8>)
     846:	4798      	blx	r3
     848:	2800      	cmp	r0, #0
     84a:	d153      	bne.n	8f4 <get_fat+0xdc>
		wc = fs->win[bc % SS(fs)]; bc++;
     84c:	05fb      	lsls	r3, r7, #23
     84e:	0ddb      	lsrs	r3, r3, #23
     850:	18f3      	adds	r3, r6, r3
     852:	3330      	adds	r3, #48	; 0x30
     854:	781d      	ldrb	r5, [r3, #0]
     856:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     858:	0a79      	lsrs	r1, r7, #9
     85a:	6a33      	ldr	r3, [r6, #32]
     85c:	469c      	mov	ip, r3
     85e:	4461      	add	r1, ip
     860:	1c30      	adds	r0, r6, #0
     862:	4b2b      	ldr	r3, [pc, #172]	; (910 <get_fat+0xf8>)
     864:	4798      	blx	r3
     866:	2800      	cmp	r0, #0
     868:	d147      	bne.n	8fa <get_fat+0xe2>
		wc |= fs->win[bc % SS(fs)] << 8;
     86a:	05ff      	lsls	r7, r7, #23
     86c:	0dff      	lsrs	r7, r7, #23
     86e:	19f0      	adds	r0, r6, r7
     870:	3030      	adds	r0, #48	; 0x30
     872:	7803      	ldrb	r3, [r0, #0]
     874:	021b      	lsls	r3, r3, #8
     876:	431d      	orrs	r5, r3
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
     878:	07e3      	lsls	r3, r4, #31
     87a:	d501      	bpl.n	880 <get_fat+0x68>
     87c:	092b      	lsrs	r3, r5, #4
     87e:	e044      	b.n	90a <get_fat+0xf2>
     880:	052b      	lsls	r3, r5, #20
     882:	0d1b      	lsrs	r3, r3, #20
     884:	e041      	b.n	90a <get_fat+0xf2>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
     886:	0a09      	lsrs	r1, r1, #8
     888:	6a03      	ldr	r3, [r0, #32]
     88a:	469c      	mov	ip, r3
     88c:	4461      	add	r1, ip
     88e:	4b20      	ldr	r3, [pc, #128]	; (910 <get_fat+0xf8>)
     890:	4798      	blx	r3
     892:	2800      	cmp	r0, #0
     894:	d134      	bne.n	900 <get_fat+0xe8>
		p = &fs->win[clst * 2 % SS(fs)];
     896:	0061      	lsls	r1, r4, #1
     898:	23ff      	movs	r3, #255	; 0xff
     89a:	005b      	lsls	r3, r3, #1
     89c:	4019      	ands	r1, r3
		return LD_WORD(p);
     89e:	1873      	adds	r3, r6, r1
     8a0:	3330      	adds	r3, #48	; 0x30
     8a2:	7818      	ldrb	r0, [r3, #0]
		wc |= fs->win[bc % SS(fs)] << 8;
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
		p = &fs->win[clst * 2 % SS(fs)];
     8a4:	3130      	adds	r1, #48	; 0x30
		return LD_WORD(p);
     8a6:	1876      	adds	r6, r6, r1
     8a8:	7873      	ldrb	r3, [r6, #1]
     8aa:	021b      	lsls	r3, r3, #8
     8ac:	4303      	orrs	r3, r0
     8ae:	e02c      	b.n	90a <get_fat+0xf2>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
     8b0:	09c9      	lsrs	r1, r1, #7
     8b2:	6a03      	ldr	r3, [r0, #32]
     8b4:	469c      	mov	ip, r3
     8b6:	4461      	add	r1, ip
     8b8:	4b15      	ldr	r3, [pc, #84]	; (910 <get_fat+0xf8>)
     8ba:	4798      	blx	r3
     8bc:	2800      	cmp	r0, #0
     8be:	d122      	bne.n	906 <get_fat+0xee>
		p = &fs->win[clst * 4 % SS(fs)];
     8c0:	00a1      	lsls	r1, r4, #2
     8c2:	24fe      	movs	r4, #254	; 0xfe
     8c4:	0064      	lsls	r4, r4, #1
     8c6:	4021      	ands	r1, r4
     8c8:	1c08      	adds	r0, r1, #0
     8ca:	3030      	adds	r0, #48	; 0x30
     8cc:	1830      	adds	r0, r6, r0
		return LD_DWORD(p) & 0x0FFFFFFF;
     8ce:	7883      	ldrb	r3, [r0, #2]
     8d0:	041c      	lsls	r4, r3, #16
     8d2:	78c2      	ldrb	r2, [r0, #3]
     8d4:	0613      	lsls	r3, r2, #24
     8d6:	4323      	orrs	r3, r4
     8d8:	7842      	ldrb	r2, [r0, #1]
     8da:	0212      	lsls	r2, r2, #8
     8dc:	4313      	orrs	r3, r2
     8de:	1871      	adds	r1, r6, r1
     8e0:	3130      	adds	r1, #48	; 0x30
     8e2:	780a      	ldrb	r2, [r1, #0]
     8e4:	4313      	orrs	r3, r2
     8e6:	011b      	lsls	r3, r3, #4
     8e8:	091b      	lsrs	r3, r3, #4
     8ea:	e00e      	b.n	90a <get_fat+0xf2>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
     8ec:	2301      	movs	r3, #1
     8ee:	e00c      	b.n	90a <get_fat+0xf2>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;

	default:
		return 1;
     8f0:	2301      	movs	r3, #1
     8f2:	e00a      	b.n	90a <get_fat+0xf2>
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
     8f4:	2301      	movs	r3, #1
     8f6:	425b      	negs	r3, r3
     8f8:	e007      	b.n	90a <get_fat+0xf2>
     8fa:	2301      	movs	r3, #1
     8fc:	425b      	negs	r3, r3
     8fe:	e004      	b.n	90a <get_fat+0xf2>
     900:	2301      	movs	r3, #1
     902:	425b      	negs	r3, r3
     904:	e001      	b.n	90a <get_fat+0xf2>
     906:	2301      	movs	r3, #1
     908:	425b      	negs	r3, r3
}
     90a:	1c18      	adds	r0, r3, #0
     90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     90e:	46c0      	nop			; (mov r8, r8)
     910:	000001fd 	.word	0x000001fd

00000914 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
     914:	b5f0      	push	{r4, r5, r6, r7, lr}
     916:	4647      	mov	r7, r8
     918:	b480      	push	{r7}
     91a:	1c05      	adds	r5, r0, #0
     91c:	1c0e      	adds	r6, r1, #0
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
     91e:	80e9      	strh	r1, [r5, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
     920:	6884      	ldr	r4, [r0, #8]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
     922:	2002      	movs	r0, #2
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
     924:	2c01      	cmp	r4, #1
     926:	d045      	beq.n	9b4 <dir_sdi+0xa0>
     928:	682b      	ldr	r3, [r5, #0]
     92a:	695a      	ldr	r2, [r3, #20]
     92c:	4294      	cmp	r4, r2
     92e:	d241      	bcs.n	9b4 <dir_sdi+0xa0>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     930:	2c00      	cmp	r4, #0
     932:	d10c      	bne.n	94e <dir_sdi+0x3a>
     934:	781a      	ldrb	r2, [r3, #0]
     936:	2a03      	cmp	r2, #3
     938:	d102      	bne.n	940 <dir_sdi+0x2c>
		clst = dp->fs->dirbase;
     93a:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
     93c:	2a00      	cmp	r2, #0
     93e:	d105      	bne.n	94c <dir_sdi+0x38>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
     940:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
     942:	2002      	movs	r0, #2
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
     944:	4296      	cmp	r6, r2
     946:	d235      	bcs.n	9b4 <dir_sdi+0xa0>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
     948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     94a:	e01d      	b.n	988 <dir_sdi+0x74>
	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;
     94c:	1c14      	adds	r4, r2, #0
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
     94e:	789f      	ldrb	r7, [r3, #2]
     950:	013f      	lsls	r7, r7, #4
		while (idx >= ic) {	/* Follow cluster chain */
     952:	42be      	cmp	r6, r7
     954:	d313      	bcc.n	97e <dir_sdi+0x6a>
     956:	1bf6      	subs	r6, r6, r7
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
     958:	4b18      	ldr	r3, [pc, #96]	; (9bc <dir_sdi+0xa8>)
     95a:	4698      	mov	r8, r3
     95c:	e000      	b.n	960 <dir_sdi+0x4c>
     95e:	1c1e      	adds	r6, r3, #0
     960:	6828      	ldr	r0, [r5, #0]
     962:	1c21      	adds	r1, r4, #0
     964:	47c0      	blx	r8
     966:	1c04      	adds	r4, r0, #0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     968:	1c43      	adds	r3, r0, #1
     96a:	d01e      	beq.n	9aa <dir_sdi+0x96>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
     96c:	2801      	cmp	r0, #1
     96e:	d91e      	bls.n	9ae <dir_sdi+0x9a>
     970:	682b      	ldr	r3, [r5, #0]
     972:	695b      	ldr	r3, [r3, #20]
     974:	4298      	cmp	r0, r3
     976:	d21c      	bcs.n	9b2 <dir_sdi+0x9e>
     978:	1bf3      	subs	r3, r6, r7
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
     97a:	42b7      	cmp	r7, r6
     97c:	d9ef      	bls.n	95e <dir_sdi+0x4a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
     97e:	6828      	ldr	r0, [r5, #0]
     980:	1c21      	adds	r1, r4, #0
     982:	4b0f      	ldr	r3, [pc, #60]	; (9c0 <dir_sdi+0xac>)
     984:	4798      	blx	r3
     986:	1c03      	adds	r3, r0, #0
	}
	dp->clust = clst;	/* Current cluster# */
     988:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
     98a:	2002      	movs	r0, #2
     98c:	2b00      	cmp	r3, #0
     98e:	d011      	beq.n	9b4 <dir_sdi+0xa0>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
     990:	0930      	lsrs	r0, r6, #4
     992:	18c3      	adds	r3, r0, r3
     994:	612b      	str	r3, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
     996:	230f      	movs	r3, #15
     998:	4033      	ands	r3, r6
     99a:	015b      	lsls	r3, r3, #5
     99c:	3330      	adds	r3, #48	; 0x30
     99e:	682a      	ldr	r2, [r5, #0]
     9a0:	4694      	mov	ip, r2
     9a2:	4463      	add	r3, ip
     9a4:	616b      	str	r3, [r5, #20]

	return FR_OK;
     9a6:	2000      	movs	r0, #0
     9a8:	e004      	b.n	9b4 <dir_sdi+0xa0>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     9aa:	2001      	movs	r0, #1
     9ac:	e002      	b.n	9b4 <dir_sdi+0xa0>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
     9ae:	2002      	movs	r0, #2
     9b0:	e000      	b.n	9b4 <dir_sdi+0xa0>
     9b2:	2002      	movs	r0, #2
	if (!sect) return FR_INT_ERR;
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;
}
     9b4:	bc04      	pop	{r2}
     9b6:	4690      	mov	r8, r2
     9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	00000819 	.word	0x00000819
     9c0:	00000801 	.word	0x00000801

000009c4 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
     9c4:	b510      	push	{r4, lr}
     9c6:	1c04      	adds	r4, r0, #0
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dp, dp->index);
     9c8:	88c1      	ldrh	r1, [r0, #6]
     9ca:	4b0c      	ldr	r3, [pc, #48]	; (9fc <dir_remove+0x38>)
     9cc:	4798      	blx	r3
	if (res == FR_OK) {
     9ce:	2800      	cmp	r0, #0
     9d0:	d113      	bne.n	9fa <dir_remove+0x36>
		res = move_window(dp->fs, dp->sect);
     9d2:	6820      	ldr	r0, [r4, #0]
     9d4:	6921      	ldr	r1, [r4, #16]
     9d6:	4b0a      	ldr	r3, [pc, #40]	; (a00 <dir_remove+0x3c>)
     9d8:	4798      	blx	r3
		if (res == FR_OK) {
     9da:	2800      	cmp	r0, #0
     9dc:	d10d      	bne.n	9fa <dir_remove+0x36>
			mem_set(dp->dir, 0, SZ_DIR);	/* Clear and mark the entry "deleted" */
     9de:	6963      	ldr	r3, [r4, #20]
     9e0:	1c19      	adds	r1, r3, #0
     9e2:	3120      	adds	r1, #32
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
     9e4:	2200      	movs	r2, #0
     9e6:	701a      	strb	r2, [r3, #0]
     9e8:	3301      	adds	r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     9ea:	428b      	cmp	r3, r1
     9ec:	d1fb      	bne.n	9e6 <dir_remove+0x22>
	res = dir_sdi(dp, dp->index);
	if (res == FR_OK) {
		res = move_window(dp->fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZ_DIR);	/* Clear and mark the entry "deleted" */
			*dp->dir = DDE;
     9ee:	23e5      	movs	r3, #229	; 0xe5
     9f0:	6962      	ldr	r2, [r4, #20]
     9f2:	7013      	strb	r3, [r2, #0]
			dp->fs->wflag = 1;
     9f4:	6823      	ldr	r3, [r4, #0]
     9f6:	2201      	movs	r2, #1
     9f8:	711a      	strb	r2, [r3, #4]
		}
	}
#endif

	return res;
}
     9fa:	bd10      	pop	{r4, pc}
     9fc:	00000915 	.word	0x00000915
     a00:	000001fd 	.word	0x000001fd

00000a04 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
     a04:	b5f0      	push	{r4, r5, r6, r7, lr}
     a06:	4647      	mov	r7, r8
     a08:	b480      	push	{r7}
     a0a:	1c07      	adds	r7, r0, #0
     a0c:	1c0d      	adds	r5, r1, #0
     a0e:	1c16      	adds	r6, r2, #0
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
     a10:	2402      	movs	r4, #2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
     a12:	2901      	cmp	r1, #1
     a14:	d800      	bhi.n	a18 <put_fat+0x14>
     a16:	e090      	b.n	b3a <put_fat+0x136>
     a18:	6943      	ldr	r3, [r0, #20]
     a1a:	4299      	cmp	r1, r3
     a1c:	d300      	bcc.n	a20 <put_fat+0x1c>
     a1e:	e08c      	b.n	b3a <put_fat+0x136>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
     a20:	7803      	ldrb	r3, [r0, #0]
     a22:	2b02      	cmp	r3, #2
     a24:	d042      	beq.n	aac <put_fat+0xa8>
     a26:	2b03      	cmp	r3, #3
     a28:	d054      	beq.n	ad4 <put_fat+0xd0>
			val |= LD_DWORD(p) & 0xF0000000;
			ST_DWORD(p, val);
			break;

		default :
			res = FR_INT_ERR;
     a2a:	2402      	movs	r4, #2

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
     a2c:	2b01      	cmp	r3, #1
     a2e:	d171      	bne.n	b14 <put_fat+0x110>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
     a30:	084b      	lsrs	r3, r1, #1
     a32:	4698      	mov	r8, r3
     a34:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     a36:	4643      	mov	r3, r8
     a38:	0a59      	lsrs	r1, r3, #9
     a3a:	6a03      	ldr	r3, [r0, #32]
     a3c:	469c      	mov	ip, r3
     a3e:	4461      	add	r1, ip
     a40:	4b40      	ldr	r3, [pc, #256]	; (b44 <put_fat+0x140>)
     a42:	4798      	blx	r3
     a44:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
     a46:	d165      	bne.n	b14 <put_fat+0x110>
			p = &fs->win[bc % SS(fs)];
     a48:	4643      	mov	r3, r8
     a4a:	05db      	lsls	r3, r3, #23
     a4c:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     a4e:	07ea      	lsls	r2, r5, #31
     a50:	d517      	bpl.n	a82 <put_fat+0x7e>
     a52:	18fb      	adds	r3, r7, r3
     a54:	3330      	adds	r3, #48	; 0x30
     a56:	781a      	ldrb	r2, [r3, #0]
     a58:	210f      	movs	r1, #15
     a5a:	400a      	ands	r2, r1
     a5c:	31f0      	adds	r1, #240	; 0xf0
     a5e:	4031      	ands	r1, r6
     a60:	0109      	lsls	r1, r1, #4
     a62:	430a      	orrs	r2, r1
     a64:	701a      	strb	r2, [r3, #0]
			bc++;
     a66:	4645      	mov	r5, r8
     a68:	3501      	adds	r5, #1
			fs->wflag = 1;
     a6a:	2301      	movs	r3, #1
     a6c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     a6e:	0a69      	lsrs	r1, r5, #9
     a70:	6a3b      	ldr	r3, [r7, #32]
     a72:	469c      	mov	ip, r3
     a74:	4461      	add	r1, ip
     a76:	1c38      	adds	r0, r7, #0
     a78:	4b32      	ldr	r3, [pc, #200]	; (b44 <put_fat+0x140>)
     a7a:	4798      	blx	r3
			if (res != FR_OK) break;
     a7c:	2800      	cmp	r0, #0
     a7e:	d146      	bne.n	b0e <put_fat+0x10a>
     a80:	e04b      	b.n	b1a <put_fat+0x116>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     a82:	18fb      	adds	r3, r7, r3
     a84:	3330      	adds	r3, #48	; 0x30
     a86:	701e      	strb	r6, [r3, #0]
			bc++;
     a88:	4645      	mov	r5, r8
     a8a:	3501      	adds	r5, #1
			fs->wflag = 1;
     a8c:	2301      	movs	r3, #1
     a8e:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     a90:	0a69      	lsrs	r1, r5, #9
     a92:	6a3b      	ldr	r3, [r7, #32]
     a94:	469c      	mov	ip, r3
     a96:	4461      	add	r1, ip
     a98:	1c38      	adds	r0, r7, #0
     a9a:	4b2a      	ldr	r3, [pc, #168]	; (b44 <put_fat+0x140>)
     a9c:	4798      	blx	r3
			if (res != FR_OK) break;
     a9e:	2800      	cmp	r0, #0
     aa0:	d137      	bne.n	b12 <put_fat+0x10e>
     aa2:	e03f      	b.n	b24 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     aa4:	18fb      	adds	r3, r7, r3
     aa6:	3330      	adds	r3, #48	; 0x30
     aa8:	701e      	strb	r6, [r3, #0]
			break;
     aaa:	e033      	b.n	b14 <put_fat+0x110>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
     aac:	0a09      	lsrs	r1, r1, #8
     aae:	6a03      	ldr	r3, [r0, #32]
     ab0:	469c      	mov	ip, r3
     ab2:	4461      	add	r1, ip
     ab4:	4b23      	ldr	r3, [pc, #140]	; (b44 <put_fat+0x140>)
     ab6:	4798      	blx	r3
     ab8:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
     aba:	d12b      	bne.n	b14 <put_fat+0x110>
			p = &fs->win[clst * 2 % SS(fs)];
     abc:	006d      	lsls	r5, r5, #1
     abe:	23ff      	movs	r3, #255	; 0xff
     ac0:	005b      	lsls	r3, r3, #1
     ac2:	401d      	ands	r5, r3
			ST_WORD(p, (WORD)val);
     ac4:	197b      	adds	r3, r7, r5
     ac6:	3330      	adds	r3, #48	; 0x30
     ac8:	701e      	strb	r6, [r3, #0]
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			p = &fs->win[clst * 2 % SS(fs)];
     aca:	3530      	adds	r5, #48	; 0x30
			ST_WORD(p, (WORD)val);
     acc:	197d      	adds	r5, r7, r5
     ace:	0a36      	lsrs	r6, r6, #8
     ad0:	706e      	strb	r6, [r5, #1]
			break;
     ad2:	e01f      	b.n	b14 <put_fat+0x110>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
     ad4:	09c9      	lsrs	r1, r1, #7
     ad6:	6a03      	ldr	r3, [r0, #32]
     ad8:	469c      	mov	ip, r3
     ada:	4461      	add	r1, ip
     adc:	4b19      	ldr	r3, [pc, #100]	; (b44 <put_fat+0x140>)
     ade:	4798      	blx	r3
     ae0:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
     ae2:	d117      	bne.n	b14 <put_fat+0x110>
			p = &fs->win[clst * 4 % SS(fs)];
     ae4:	00ad      	lsls	r5, r5, #2
     ae6:	23fe      	movs	r3, #254	; 0xfe
     ae8:	005b      	lsls	r3, r3, #1
     aea:	401d      	ands	r5, r3
     aec:	1c2a      	adds	r2, r5, #0
     aee:	3230      	adds	r2, #48	; 0x30
     af0:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
     af2:	78d3      	ldrb	r3, [r2, #3]
     af4:	197d      	adds	r5, r7, r5
     af6:	3530      	adds	r5, #48	; 0x30
     af8:	091b      	lsrs	r3, r3, #4
     afa:	071b      	lsls	r3, r3, #28
     afc:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
     afe:	702e      	strb	r6, [r5, #0]
     b00:	0a33      	lsrs	r3, r6, #8
     b02:	7053      	strb	r3, [r2, #1]
     b04:	0c33      	lsrs	r3, r6, #16
     b06:	7093      	strb	r3, [r2, #2]
     b08:	0e36      	lsrs	r6, r6, #24
     b0a:	70d6      	strb	r6, [r2, #3]
			break;
     b0c:	e002      	b.n	b14 <put_fat+0x110>
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     b0e:	1c04      	adds	r4, r0, #0
     b10:	e000      	b.n	b14 <put_fat+0x110>
     b12:	1c04      	adds	r4, r0, #0
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
     b14:	2301      	movs	r3, #1
     b16:	713b      	strb	r3, [r7, #4]
     b18:	e00f      	b.n	b3a <put_fat+0x136>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
     b1a:	05eb      	lsls	r3, r5, #23
     b1c:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     b1e:	0936      	lsrs	r6, r6, #4
     b20:	b2f6      	uxtb	r6, r6
     b22:	e7bf      	b.n	aa4 <put_fat+0xa0>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			bc++;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
     b24:	05eb      	lsls	r3, r5, #23
     b26:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     b28:	18fa      	adds	r2, r7, r3
     b2a:	3230      	adds	r2, #48	; 0x30
     b2c:	7811      	ldrb	r1, [r2, #0]
     b2e:	220f      	movs	r2, #15
     b30:	4391      	bics	r1, r2
     b32:	0a36      	lsrs	r6, r6, #8
     b34:	4016      	ands	r6, r2
     b36:	430e      	orrs	r6, r1
     b38:	e7b4      	b.n	aa4 <put_fat+0xa0>
		}
		fs->wflag = 1;
	}

	return res;
}
     b3a:	1c20      	adds	r0, r4, #0
     b3c:	bc04      	pop	{r2}
     b3e:	4690      	mov	r8, r2
     b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	000001fd 	.word	0x000001fd

00000b48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
     b48:	b5f0      	push	{r4, r5, r6, r7, lr}
     b4a:	464f      	mov	r7, r9
     b4c:	b480      	push	{r7}
     b4e:	1c05      	adds	r5, r0, #0
     b50:	4689      	mov	r9, r1
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
     b52:	2900      	cmp	r1, #0
     b54:	d107      	bne.n	b66 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
     b56:	68c7      	ldr	r7, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
     b58:	2f00      	cmp	r7, #0
     b5a:	d010      	beq.n	b7e <create_chain+0x36>
     b5c:	6943      	ldr	r3, [r0, #20]
     b5e:	429f      	cmp	r7, r3
     b60:	d30e      	bcc.n	b80 <create_chain+0x38>
     b62:	2701      	movs	r7, #1
     b64:	e00c      	b.n	b80 <create_chain+0x38>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
     b66:	4b2d      	ldr	r3, [pc, #180]	; (c1c <create_chain+0xd4>)
     b68:	4798      	blx	r3
     b6a:	1e03      	subs	r3, r0, #0
		if (cs < 2) return 1;			/* Invalid value */
     b6c:	2b01      	cmp	r3, #1
     b6e:	d942      	bls.n	bf6 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
     b70:	1c42      	adds	r2, r0, #1
     b72:	d042      	beq.n	bfa <create_chain+0xb2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
     b74:	696a      	ldr	r2, [r5, #20]
		scl = clst;
     b76:	464f      	mov	r7, r9
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
     b78:	4293      	cmp	r3, r2
     b7a:	d201      	bcs.n	b80 <create_chain+0x38>
     b7c:	e04a      	b.n	c14 <create_chain+0xcc>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
     b7e:	2701      	movs	r7, #1
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
     b80:	1c3c      	adds	r4, r7, #0
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
     b82:	4e26      	ldr	r6, [pc, #152]	; (c1c <create_chain+0xd4>)
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
     b84:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
     b86:	696b      	ldr	r3, [r5, #20]
     b88:	429c      	cmp	r4, r3
     b8a:	d302      	bcc.n	b92 <create_chain+0x4a>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
     b8c:	2f01      	cmp	r7, #1
     b8e:	d937      	bls.n	c00 <create_chain+0xb8>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
     b90:	2402      	movs	r4, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
     b92:	1c28      	adds	r0, r5, #0
     b94:	1c21      	adds	r1, r4, #0
     b96:	47b0      	blx	r6
		if (cs == 0) break;				/* Found a free cluster */
     b98:	2800      	cmp	r0, #0
     b9a:	d006      	beq.n	baa <create_chain+0x62>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
     b9c:	1c43      	adds	r3, r0, #1
     b9e:	d031      	beq.n	c04 <create_chain+0xbc>
     ba0:	2801      	cmp	r0, #1
     ba2:	d032      	beq.n	c0a <create_chain+0xc2>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
     ba4:	42bc      	cmp	r4, r7
     ba6:	d1ed      	bne.n	b84 <create_chain+0x3c>
     ba8:	e031      	b.n	c0e <create_chain+0xc6>
     baa:	1c26      	adds	r6, r4, #0
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
     bac:	1c28      	adds	r0, r5, #0
     bae:	1c21      	adds	r1, r4, #0
     bb0:	4a1b      	ldr	r2, [pc, #108]	; (c20 <create_chain+0xd8>)
     bb2:	4b1c      	ldr	r3, [pc, #112]	; (c24 <create_chain+0xdc>)
     bb4:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
     bb6:	2800      	cmp	r0, #0
     bb8:	d115      	bne.n	be6 <create_chain+0x9e>
     bba:	464b      	mov	r3, r9
     bbc:	2b00      	cmp	r3, #0
     bbe:	d006      	beq.n	bce <create_chain+0x86>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
     bc0:	1c28      	adds	r0, r5, #0
     bc2:	4649      	mov	r1, r9
     bc4:	1c22      	adds	r2, r4, #0
     bc6:	4b17      	ldr	r3, [pc, #92]	; (c24 <create_chain+0xdc>)
     bc8:	4798      	blx	r3
	}
	if (res == FR_OK) {
     bca:	2800      	cmp	r0, #0
     bcc:	d10b      	bne.n	be6 <create_chain+0x9e>
		fs->last_clust = ncl;			/* Update FSINFO */
     bce:	60ee      	str	r6, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
     bd0:	692b      	ldr	r3, [r5, #16]
     bd2:	1c5a      	adds	r2, r3, #1
     bd4:	d01d      	beq.n	c12 <create_chain+0xca>
			fs->free_clust--;
     bd6:	3b01      	subs	r3, #1
     bd8:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
     bda:	796a      	ldrb	r2, [r5, #5]
     bdc:	2301      	movs	r3, #1
     bde:	4313      	orrs	r3, r2
     be0:	716b      	strb	r3, [r5, #5]
     be2:	1c20      	adds	r0, r4, #0
     be4:	e016      	b.n	c14 <create_chain+0xcc>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
     be6:	3801      	subs	r0, #1
     be8:	4243      	negs	r3, r0
     bea:	4143      	adcs	r3, r0
     bec:	425c      	negs	r4, r3
     bee:	2301      	movs	r3, #1
     bf0:	1c20      	adds	r0, r4, #0
     bf2:	4318      	orrs	r0, r3
     bf4:	e00e      	b.n	c14 <create_chain+0xcc>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
     bf6:	2001      	movs	r0, #1
     bf8:	e00c      	b.n	c14 <create_chain+0xcc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
     bfa:	2001      	movs	r0, #1
     bfc:	4240      	negs	r0, r0
     bfe:	e009      	b.n	c14 <create_chain+0xcc>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
     c00:	2000      	movs	r0, #0
     c02:	e007      	b.n	c14 <create_chain+0xcc>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
     c04:	2001      	movs	r0, #1
     c06:	4240      	negs	r0, r0
     c08:	e004      	b.n	c14 <create_chain+0xcc>
     c0a:	2001      	movs	r0, #1
     c0c:	e002      	b.n	c14 <create_chain+0xcc>
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
     c0e:	2000      	movs	r0, #0
     c10:	e000      	b.n	c14 <create_chain+0xcc>
     c12:	1c20      	adds	r0, r4, #0
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
     c14:	bc04      	pop	{r2}
     c16:	4691      	mov	r9, r2
     c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	00000819 	.word	0x00000819
     c20:	0fffffff 	.word	0x0fffffff
     c24:	00000a05 	.word	0x00000a05

00000c28 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
     c28:	b5f0      	push	{r4, r5, r6, r7, lr}
     c2a:	464f      	mov	r7, r9
     c2c:	4646      	mov	r6, r8
     c2e:	b4c0      	push	{r6, r7}
     c30:	b083      	sub	sp, #12
	DWORD clst;
	UINT i;


	i = dp->index + 1;
     c32:	88c4      	ldrh	r4, [r0, #6]
     c34:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
     c36:	0422      	lsls	r2, r4, #16
		return FR_NO_FILE;
     c38:	2304      	movs	r3, #4
	DWORD clst;
	UINT i;


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
     c3a:	2a00      	cmp	r2, #0
     c3c:	d07d      	beq.n	d3a <dir_next+0x112>
     c3e:	6902      	ldr	r2, [r0, #16]
     c40:	2a00      	cmp	r2, #0
     c42:	d07a      	beq.n	d3a <dir_next+0x112>
     c44:	9101      	str	r1, [sp, #4]
     c46:	1c05      	adds	r5, r0, #0
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
     c48:	330b      	adds	r3, #11
     c4a:	4023      	ands	r3, r4
     c4c:	1e1e      	subs	r6, r3, #0
     c4e:	d168      	bne.n	d22 <dir_next+0xfa>
		dp->sect++;					/* Next sector */
     c50:	3201      	adds	r2, #1
     c52:	6102      	str	r2, [r0, #16]

		if (!dp->clust) {		/* Static table */
     c54:	68c1      	ldr	r1, [r0, #12]
     c56:	2900      	cmp	r1, #0
     c58:	d105      	bne.n	c66 <dir_next+0x3e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
     c5a:	6803      	ldr	r3, [r0, #0]
     c5c:	891a      	ldrh	r2, [r3, #8]
				return FR_NO_FILE;
     c5e:	2304      	movs	r3, #4

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
     c60:	4294      	cmp	r4, r2
     c62:	d26a      	bcs.n	d3a <dir_next+0x112>
     c64:	e05d      	b.n	d22 <dir_next+0xfa>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
     c66:	6800      	ldr	r0, [r0, #0]
     c68:	0923      	lsrs	r3, r4, #4
     c6a:	7882      	ldrb	r2, [r0, #2]
     c6c:	3a01      	subs	r2, #1
     c6e:	421a      	tst	r2, r3
     c70:	d157      	bne.n	d22 <dir_next+0xfa>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
     c72:	4b35      	ldr	r3, [pc, #212]	; (d48 <dir_next+0x120>)
     c74:	4798      	blx	r3
     c76:	1c07      	adds	r7, r0, #0
				if (clst <= 1) return FR_INT_ERR;
     c78:	2302      	movs	r3, #2
     c7a:	2801      	cmp	r0, #1
     c7c:	d95d      	bls.n	d3a <dir_next+0x112>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
     c7e:	1c43      	adds	r3, r0, #1
     c80:	d058      	beq.n	d34 <dir_next+0x10c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
     c82:	6828      	ldr	r0, [r5, #0]
     c84:	6943      	ldr	r3, [r0, #20]
     c86:	429f      	cmp	r7, r3
     c88:	d345      	bcc.n	d16 <dir_next+0xee>
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
     c8a:	2304      	movs	r3, #4
     c8c:	9a01      	ldr	r2, [sp, #4]
     c8e:	2a00      	cmp	r2, #0
     c90:	d053      	beq.n	d3a <dir_next+0x112>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
     c92:	68e9      	ldr	r1, [r5, #12]
     c94:	4b2d      	ldr	r3, [pc, #180]	; (d4c <dir_next+0x124>)
     c96:	4798      	blx	r3
     c98:	1c07      	adds	r7, r0, #0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
     c9a:	2307      	movs	r3, #7
     c9c:	2800      	cmp	r0, #0
     c9e:	d04c      	beq.n	d3a <dir_next+0x112>
					if (clst == 1) return FR_INT_ERR;
     ca0:	3b05      	subs	r3, #5
     ca2:	2801      	cmp	r0, #1
     ca4:	d049      	beq.n	d3a <dir_next+0x112>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
     ca6:	3b01      	subs	r3, #1
     ca8:	1c42      	adds	r2, r0, #1
     caa:	d046      	beq.n	d3a <dir_next+0x112>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
     cac:	6828      	ldr	r0, [r5, #0]
     cae:	4b28      	ldr	r3, [pc, #160]	; (d50 <dir_next+0x128>)
     cb0:	4798      	blx	r3
     cb2:	2301      	movs	r3, #1
     cb4:	2800      	cmp	r0, #0
     cb6:	d140      	bne.n	d3a <dir_next+0x112>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
     cb8:	682b      	ldr	r3, [r5, #0]
     cba:	1c1a      	adds	r2, r3, #0
     cbc:	3230      	adds	r2, #48	; 0x30
     cbe:	218c      	movs	r1, #140	; 0x8c
     cc0:	0089      	lsls	r1, r1, #2
     cc2:	468c      	mov	ip, r1
     cc4:	4463      	add	r3, ip
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
     cc6:	2100      	movs	r1, #0
     cc8:	7011      	strb	r1, [r2, #0]
     cca:	3201      	adds	r2, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     ccc:	429a      	cmp	r2, r3
     cce:	d1fb      	bne.n	cc8 <dir_next+0xa0>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
     cd0:	682b      	ldr	r3, [r5, #0]
     cd2:	4698      	mov	r8, r3
     cd4:	1c18      	adds	r0, r3, #0
     cd6:	1c39      	adds	r1, r7, #0
     cd8:	4b1e      	ldr	r3, [pc, #120]	; (d54 <dir_next+0x12c>)
     cda:	4798      	blx	r3
     cdc:	4643      	mov	r3, r8
     cde:	62d8      	str	r0, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
     ce0:	2300      	movs	r3, #0
     ce2:	4698      	mov	r8, r3
						dp->fs->wflag = 1;
     ce4:	3301      	adds	r3, #1
     ce6:	4699      	mov	r9, r3
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
     ce8:	e00d      	b.n	d06 <dir_next+0xde>
						dp->fs->wflag = 1;
     cea:	464a      	mov	r2, r9
     cec:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
     cee:	6828      	ldr	r0, [r5, #0]
     cf0:	4b17      	ldr	r3, [pc, #92]	; (d50 <dir_next+0x128>)
     cf2:	4798      	blx	r3
     cf4:	2800      	cmp	r0, #0
     cf6:	d11f      	bne.n	d38 <dir_next+0x110>
						dp->fs->winsect++;
     cf8:	682a      	ldr	r2, [r5, #0]
     cfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     cfc:	3301      	adds	r3, #1
     cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
     d00:	2301      	movs	r3, #1
     d02:	469c      	mov	ip, r3
     d04:	44e0      	add	r8, ip
     d06:	682b      	ldr	r3, [r5, #0]
     d08:	789a      	ldrb	r2, [r3, #2]
     d0a:	4590      	cmp	r8, r2
     d0c:	d3ed      	bcc.n	cea <dir_next+0xc2>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
     d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     d10:	4641      	mov	r1, r8
     d12:	1a52      	subs	r2, r2, r1
     d14:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
     d16:	60ef      	str	r7, [r5, #12]
				dp->sect = clust2sect(dp->fs, clst);
     d18:	6828      	ldr	r0, [r5, #0]
     d1a:	1c39      	adds	r1, r7, #0
     d1c:	4b0d      	ldr	r3, [pc, #52]	; (d54 <dir_next+0x12c>)
     d1e:	4798      	blx	r3
     d20:	6128      	str	r0, [r5, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
     d22:	80ec      	strh	r4, [r5, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
     d24:	0173      	lsls	r3, r6, #5
     d26:	3330      	adds	r3, #48	; 0x30
     d28:	682a      	ldr	r2, [r5, #0]
     d2a:	4694      	mov	ip, r2
     d2c:	4463      	add	r3, ip
     d2e:	616b      	str	r3, [r5, #20]

	return FR_OK;
     d30:	2300      	movs	r3, #0
     d32:	e002      	b.n	d3a <dir_next+0x112>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
     d34:	2301      	movs	r3, #1
     d36:	e000      	b.n	d3a <dir_next+0x112>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
     d38:	2301      	movs	r3, #1

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */

	return FR_OK;
}
     d3a:	1c18      	adds	r0, r3, #0
     d3c:	b003      	add	sp, #12
     d3e:	bc0c      	pop	{r2, r3}
     d40:	4690      	mov	r8, r2
     d42:	4699      	mov	r9, r3
     d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	00000819 	.word	0x00000819
     d4c:	00000b49 	.word	0x00000b49
     d50:	00000191 	.word	0x00000191
     d54:	00000801 	.word	0x00000801

00000d58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
     d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d5a:	465f      	mov	r7, fp
     d5c:	4656      	mov	r6, sl
     d5e:	464d      	mov	r5, r9
     d60:	4644      	mov	r4, r8
     d62:	b4f0      	push	{r4, r5, r6, r7}
     d64:	1c04      	adds	r4, r0, #0
     d66:	1c0e      	adds	r6, r1, #0
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
     d68:	780b      	ldrb	r3, [r1, #0]
     d6a:	2b2f      	cmp	r3, #47	; 0x2f
     d6c:	d001      	beq.n	d72 <follow_path+0x1a>
     d6e:	2b5c      	cmp	r3, #92	; 0x5c
     d70:	d100      	bne.n	d74 <follow_path+0x1c>
		path++;
     d72:	3601      	adds	r6, #1
	dp->sclust = 0;							/* Always start from the root directory */
     d74:	2300      	movs	r3, #0
     d76:	60a3      	str	r3, [r4, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
     d78:	7833      	ldrb	r3, [r6, #0]
     d7a:	2b1f      	cmp	r3, #31
     d7c:	d808      	bhi.n	d90 <follow_path+0x38>
		res = dir_sdi(dp, 0);
     d7e:	1c20      	adds	r0, r4, #0
     d80:	2100      	movs	r1, #0
     d82:	4b7c      	ldr	r3, [pc, #496]	; (f74 <follow_path+0x21c>)
     d84:	4798      	blx	r3
     d86:	1c07      	adds	r7, r0, #0
		dp->dir = 0;
     d88:	2300      	movs	r3, #0
     d8a:	6163      	str	r3, [r4, #20]
     d8c:	e0ea      	b.n	f64 <follow_path+0x20c>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
     d8e:	3601      	adds	r6, #1
     d90:	7833      	ldrb	r3, [r6, #0]
     d92:	2b2f      	cmp	r3, #47	; 0x2f
     d94:	d0fb      	beq.n	d8e <follow_path+0x36>
     d96:	2b5c      	cmp	r3, #92	; 0x5c
     d98:	d0f9      	beq.n	d8e <follow_path+0x36>
	sfn = dp->fn;
     d9a:	69a3      	ldr	r3, [r4, #24]
     d9c:	4699      	mov	r9, r3
     d9e:	1c19      	adds	r1, r3, #0
     da0:	310b      	adds	r1, #11
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
     da2:	2220      	movs	r2, #32
     da4:	701a      	strb	r2, [r3, #0]
     da6:	3301      	adds	r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     da8:	428b      	cmp	r3, r1
     daa:	d1fb      	bne.n	da4 <follow_path+0x4c>
     dac:	1c35      	adds	r5, r6, #0
     dae:	2300      	movs	r3, #0
     db0:	469c      	mov	ip, r3
     db2:	3308      	adds	r3, #8
     db4:	469a      	mov	sl, r3
     db6:	2300      	movs	r3, #0
     db8:	4698      	mov	r8, r3
     dba:	2701      	movs	r7, #1
     dbc:	1bbf      	subs	r7, r7, r6
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
     dbe:	2302      	movs	r3, #2
     dc0:	469b      	mov	fp, r3
     dc2:	1c23      	adds	r3, r4, #0
     dc4:	4664      	mov	r4, ip
     dc6:	469c      	mov	ip, r3
     dc8:	e000      	b.n	dcc <follow_path+0x74>
     dca:	3501      	adds	r5, #1
     dcc:	197b      	adds	r3, r7, r5
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
     dce:	7829      	ldrb	r1, [r5, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
     dd0:	2920      	cmp	r1, #32
     dd2:	d800      	bhi.n	dd6 <follow_path+0x7e>
     dd4:	e0b8      	b.n	f48 <follow_path+0x1f0>
     dd6:	292f      	cmp	r1, #47	; 0x2f
     dd8:	d100      	bne.n	ddc <follow_path+0x84>
     dda:	e0af      	b.n	f3c <follow_path+0x1e4>
     ddc:	295c      	cmp	r1, #92	; 0x5c
     dde:	d100      	bne.n	de2 <follow_path+0x8a>
     de0:	e0ac      	b.n	f3c <follow_path+0x1e4>
		if (c == '.' || i >= ni) {
     de2:	292e      	cmp	r1, #46	; 0x2e
     de4:	d100      	bne.n	de8 <follow_path+0x90>
     de6:	e098      	b.n	f1a <follow_path+0x1c2>
     de8:	4554      	cmp	r4, sl
     dea:	d300      	bcc.n	dee <follow_path+0x96>
     dec:	e08d      	b.n	f0a <follow_path+0x1b2>
     dee:	e007      	b.n	e00 <follow_path+0xa8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
     df0:	4643      	mov	r3, r8
     df2:	009b      	lsls	r3, r3, #2
     df4:	b2db      	uxtb	r3, r3
     df6:	4698      	mov	r8, r3
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
     df8:	2408      	movs	r4, #8
     dfa:	230b      	movs	r3, #11
     dfc:	469a      	mov	sl, r3
     dfe:	e7e4      	b.n	dca <follow_path+0x72>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
     e00:	b24b      	sxtb	r3, r1
     e02:	2b00      	cmp	r3, #0
     e04:	db00      	blt.n	e08 <follow_path+0xb0>
     e06:	e08d      	b.n	f24 <follow_path+0x1cc>
			b |= 3;						/* Eliminate NT flag */
     e08:	4643      	mov	r3, r8
     e0a:	2203      	movs	r2, #3
     e0c:	4313      	orrs	r3, r2
     e0e:	b2db      	uxtb	r3, r3
     e10:	4698      	mov	r8, r3
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
     e12:	3980      	subs	r1, #128	; 0x80
     e14:	4b58      	ldr	r3, [pc, #352]	; (f78 <follow_path+0x220>)
     e16:	5c59      	ldrb	r1, [r3, r1]
     e18:	e084      	b.n	f24 <follow_path+0x1cc>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
     e1a:	4b58      	ldr	r3, [pc, #352]	; (f7c <follow_path+0x224>)
     e1c:	3301      	adds	r3, #1
     e1e:	781a      	ldrb	r2, [r3, #0]
     e20:	2a00      	cmp	r2, #0
     e22:	d100      	bne.n	e26 <follow_path+0xce>
     e24:	e084      	b.n	f30 <follow_path+0x1d8>
     e26:	4290      	cmp	r0, r2
     e28:	d1f8      	bne.n	e1c <follow_path+0xc4>
     e2a:	2706      	movs	r7, #6
     e2c:	e09a      	b.n	f64 <follow_path+0x20c>
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
     e2e:	4643      	mov	r3, r8
     e30:	465a      	mov	r2, fp
     e32:	4313      	orrs	r3, r2
     e34:	b2db      	uxtb	r3, r3
     e36:	4698      	mov	r8, r3
     e38:	e00a      	b.n	e50 <follow_path+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
     e3a:	1c0b      	adds	r3, r1, #0
     e3c:	3b61      	subs	r3, #97	; 0x61
     e3e:	2b19      	cmp	r3, #25
     e40:	d806      	bhi.n	e50 <follow_path+0xf8>
					b |= 1; c -= 0x20;
     e42:	4643      	mov	r3, r8
     e44:	2201      	movs	r2, #1
     e46:	4313      	orrs	r3, r2
     e48:	b2db      	uxtb	r3, r3
     e4a:	4698      	mov	r8, r3
     e4c:	3920      	subs	r1, #32
     e4e:	b2c9      	uxtb	r1, r1
				}
			}
			sfn[i++] = c;
     e50:	464b      	mov	r3, r9
     e52:	5519      	strb	r1, [r3, r4]
     e54:	3401      	adds	r4, #1
     e56:	e7b8      	b.n	dca <follow_path+0x72>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
     e58:	4662      	mov	r2, ip
     e5a:	2a00      	cmp	r2, #0
     e5c:	d057      	beq.n	f0e <follow_path+0x1b6>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
     e5e:	464a      	mov	r2, r9
     e60:	7812      	ldrb	r2, [r2, #0]
     e62:	2ae5      	cmp	r2, #229	; 0xe5
     e64:	d102      	bne.n	e6c <follow_path+0x114>
     e66:	3ae0      	subs	r2, #224	; 0xe0
     e68:	4649      	mov	r1, r9
     e6a:	700a      	strb	r2, [r1, #0]

	if (ni == 8) b <<= 2;
     e6c:	4652      	mov	r2, sl
     e6e:	2a08      	cmp	r2, #8
     e70:	d103      	bne.n	e7a <follow_path+0x122>
     e72:	4642      	mov	r2, r8
     e74:	0092      	lsls	r2, r2, #2
     e76:	b2d2      	uxtb	r2, r2
     e78:	4690      	mov	r8, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
     e7a:	2203      	movs	r2, #3
     e7c:	4641      	mov	r1, r8
     e7e:	400a      	ands	r2, r1
     e80:	2a01      	cmp	r2, #1
     e82:	d101      	bne.n	e88 <follow_path+0x130>
     e84:	320f      	adds	r2, #15
     e86:	4313      	orrs	r3, r2
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
     e88:	220c      	movs	r2, #12
     e8a:	4641      	mov	r1, r8
     e8c:	400a      	ands	r2, r1
     e8e:	2a04      	cmp	r2, #4
     e90:	d101      	bne.n	e96 <follow_path+0x13e>
     e92:	3204      	adds	r2, #4
     e94:	4313      	orrs	r3, r2

	sfn[NS] = c;		/* Store NT flag, File name is created */
     e96:	464a      	mov	r2, r9
     e98:	72d3      	strb	r3, [r2, #11]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
     e9a:	1c20      	adds	r0, r4, #0
     e9c:	2100      	movs	r1, #0
     e9e:	4b35      	ldr	r3, [pc, #212]	; (f74 <follow_path+0x21c>)
     ea0:	4798      	blx	r3
     ea2:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
     ea4:	d15a      	bne.n	f5c <follow_path+0x204>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
     ea6:	4b36      	ldr	r3, [pc, #216]	; (f80 <follow_path+0x228>)
     ea8:	469a      	mov	sl, r3
				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
     eaa:	2308      	movs	r3, #8
     eac:	4698      	mov	r8, r3
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
     eae:	4b35      	ldr	r3, [pc, #212]	; (f84 <follow_path+0x22c>)
     eb0:	4699      	mov	r9, r3

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
     eb2:	6820      	ldr	r0, [r4, #0]
     eb4:	6921      	ldr	r1, [r4, #16]
     eb6:	47d0      	blx	sl
     eb8:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
     eba:	d14f      	bne.n	f5c <follow_path+0x204>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
     ebc:	6961      	ldr	r1, [r4, #20]
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     ebe:	780b      	ldrb	r3, [r1, #0]
     ec0:	2b00      	cmp	r3, #0
     ec2:	d013      	beq.n	eec <follow_path+0x194>
				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
     ec4:	7acb      	ldrb	r3, [r1, #11]
     ec6:	4642      	mov	r2, r8
     ec8:	421a      	tst	r2, r3
     eca:	d109      	bne.n	ee0 <follow_path+0x188>
     ecc:	69a0      	ldr	r0, [r4, #24]
     ece:	2300      	movs	r3, #0
     ed0:	e002      	b.n	ed8 <follow_path+0x180>
     ed2:	3301      	adds	r3, #1
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
     ed4:	2b0b      	cmp	r3, #11
     ed6:	d03d      	beq.n	f54 <follow_path+0x1fc>
     ed8:	5ccd      	ldrb	r5, [r1, r3]
     eda:	5cc2      	ldrb	r2, [r0, r3]
     edc:	4295      	cmp	r5, r2
     ede:	d0f8      	beq.n	ed2 <follow_path+0x17a>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
     ee0:	1c20      	adds	r0, r4, #0
     ee2:	2100      	movs	r1, #0
     ee4:	47c8      	blx	r9
     ee6:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
     ee8:	d0e3      	beq.n	eb2 <follow_path+0x15a>
     eea:	e037      	b.n	f5c <follow_path+0x204>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
     eec:	69a3      	ldr	r3, [r4, #24]
     eee:	7adb      	ldrb	r3, [r3, #11]
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
     ef0:	075b      	lsls	r3, r3, #29
     ef2:	0fdb      	lsrs	r3, r3, #31
     ef4:	2005      	movs	r0, #5
     ef6:	1ac7      	subs	r7, r0, r3
     ef8:	e034      	b.n	f64 <follow_path+0x20c>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
     efa:	7acb      	ldrb	r3, [r1, #11]
     efc:	06db      	lsls	r3, r3, #27
     efe:	d508      	bpl.n	f12 <follow_path+0x1ba>
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
     f00:	6820      	ldr	r0, [r4, #0]
     f02:	4b21      	ldr	r3, [pc, #132]	; (f88 <follow_path+0x230>)
     f04:	4798      	blx	r3
     f06:	60a0      	str	r0, [r4, #8]
		}
     f08:	e742      	b.n	d90 <follow_path+0x38>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
     f0a:	2706      	movs	r7, #6
     f0c:	e02a      	b.n	f64 <follow_path+0x20c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
     f0e:	2706      	movs	r7, #6
     f10:	e028      	b.n	f64 <follow_path+0x20c>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
     f12:	2705      	movs	r7, #5
     f14:	e026      	b.n	f64 <follow_path+0x20c>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
     f16:	2706      	movs	r7, #6
     f18:	e024      	b.n	f64 <follow_path+0x20c>
     f1a:	4653      	mov	r3, sl
     f1c:	2b08      	cmp	r3, #8
     f1e:	d100      	bne.n	f22 <follow_path+0x1ca>
     f20:	e766      	b.n	df0 <follow_path+0x98>
     f22:	e7f8      	b.n	f16 <follow_path+0x1be>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
     f24:	1e08      	subs	r0, r1, #0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
     f26:	2822      	cmp	r0, #34	; 0x22
     f28:	d000      	beq.n	f2c <follow_path+0x1d4>
     f2a:	e776      	b.n	e1a <follow_path+0xc2>
     f2c:	2706      	movs	r7, #6
     f2e:	e019      	b.n	f64 <follow_path+0x20c>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
     f30:	1c0b      	adds	r3, r1, #0
     f32:	3b41      	subs	r3, #65	; 0x41
     f34:	2b19      	cmp	r3, #25
     f36:	d800      	bhi.n	f3a <follow_path+0x1e2>
     f38:	e779      	b.n	e2e <follow_path+0xd6>
     f3a:	e77e      	b.n	e3a <follow_path+0xe2>
     f3c:	4662      	mov	r2, ip
     f3e:	46a4      	mov	ip, r4
     f40:	1c14      	adds	r4, r2, #0
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
     f42:	18f6      	adds	r6, r6, r3
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
     f44:	2300      	movs	r3, #0
     f46:	e787      	b.n	e58 <follow_path+0x100>
     f48:	4662      	mov	r2, ip
     f4a:	46a4      	mov	ip, r4
     f4c:	1c14      	adds	r4, r2, #0
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
     f4e:	18f6      	adds	r6, r6, r3
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
     f50:	2304      	movs	r3, #4
     f52:	e781      	b.n	e58 <follow_path+0x100>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
     f54:	7ac3      	ldrb	r3, [r0, #11]
     f56:	075b      	lsls	r3, r3, #29
     f58:	d5cf      	bpl.n	efa <follow_path+0x1a2>
     f5a:	e003      	b.n	f64 <follow_path+0x20c>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
     f5c:	69a3      	ldr	r3, [r4, #24]
     f5e:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
     f60:	2f04      	cmp	r7, #4
     f62:	d0c5      	beq.n	ef0 <follow_path+0x198>
			dp->sclust = ld_clust(dp->fs, dir);
		}
	}

	return res;
}
     f64:	1c38      	adds	r0, r7, #0
     f66:	bc3c      	pop	{r2, r3, r4, r5}
     f68:	4690      	mov	r8, r2
     f6a:	4699      	mov	r9, r3
     f6c:	46a2      	mov	sl, r4
     f6e:	46ab      	mov	fp, r5
     f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	00000915 	.word	0x00000915
     f78:	00004788 	.word	0x00004788
     f7c:	00004778 	.word	0x00004778
     f80:	000001fd 	.word	0x000001fd
     f84:	00000c29 	.word	0x00000c29
     f88:	00000119 	.word	0x00000119

00000f8c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
     f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f8e:	1c05      	adds	r5, r0, #0
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
     f90:	2100      	movs	r1, #0
     f92:	4b19      	ldr	r3, [pc, #100]	; (ff8 <dir_register+0x6c>)
     f94:	4798      	blx	r3
     f96:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
     f98:	d129      	bne.n	fee <dir_register+0x62>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
     f9a:	4e18      	ldr	r6, [pc, #96]	; (ffc <dir_register+0x70>)
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
				if (++n == nent) break;	/* A block of contiguous entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
     f9c:	4f18      	ldr	r7, [pc, #96]	; (1000 <dir_register+0x74>)

	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
     f9e:	6828      	ldr	r0, [r5, #0]
     fa0:	6929      	ldr	r1, [r5, #16]
     fa2:	47b0      	blx	r6
     fa4:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
     fa6:	d122      	bne.n	fee <dir_register+0x62>
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
     fa8:	696b      	ldr	r3, [r5, #20]
     faa:	781b      	ldrb	r3, [r3, #0]
     fac:	2be5      	cmp	r3, #229	; 0xe5
     fae:	d007      	beq.n	fc0 <dir_register+0x34>
     fb0:	2b00      	cmp	r3, #0
     fb2:	d005      	beq.n	fc0 <dir_register+0x34>
				if (++n == nent) break;	/* A block of contiguous entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
     fb4:	1c28      	adds	r0, r5, #0
     fb6:	2101      	movs	r1, #1
     fb8:	47b8      	blx	r7
     fba:	1e04      	subs	r4, r0, #0
		} while (res == FR_OK);
     fbc:	d0ef      	beq.n	f9e <dir_register+0x12>
     fbe:	e016      	b.n	fee <dir_register+0x62>
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
		res = move_window(dp->fs, dp->sect);
     fc0:	6828      	ldr	r0, [r5, #0]
     fc2:	6929      	ldr	r1, [r5, #16]
     fc4:	4b0d      	ldr	r3, [pc, #52]	; (ffc <dir_register+0x70>)
     fc6:	4798      	blx	r3
     fc8:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
     fca:	d113      	bne.n	ff4 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
     fcc:	696b      	ldr	r3, [r5, #20]
     fce:	1c19      	adds	r1, r3, #0
     fd0:	3120      	adds	r1, #32
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
     fd2:	2200      	movs	r2, #0
     fd4:	701a      	strb	r2, [r3, #0]
     fd6:	3301      	adds	r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     fd8:	428b      	cmp	r3, r1
     fda:	d1fb      	bne.n	fd4 <dir_register+0x48>

	if (res == FR_OK) {				/* Set SFN entry */
		res = move_window(dp->fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
     fdc:	6968      	ldr	r0, [r5, #20]
     fde:	69a9      	ldr	r1, [r5, #24]
     fe0:	220b      	movs	r2, #11
     fe2:	4b08      	ldr	r3, [pc, #32]	; (1004 <dir_register+0x78>)
     fe4:	4798      	blx	r3
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NS] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
     fe6:	682b      	ldr	r3, [r5, #0]
     fe8:	2201      	movs	r2, #1
     fea:	711a      	strb	r2, [r3, #4]
     fec:	e002      	b.n	ff4 <dir_register+0x68>
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
     fee:	2c04      	cmp	r4, #4
     ff0:	d100      	bne.n	ff4 <dir_register+0x68>
     ff2:	3403      	adds	r4, #3
			dp->fs->wflag = 1;
		}
	}

	return res;
}
     ff4:	1c20      	adds	r0, r4, #0
     ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ff8:	00000915 	.word	0x00000915
     ffc:	000001fd 	.word	0x000001fd
    1000:	00000c29 	.word	0x00000c29
    1004:	00000105 	.word	0x00000105

00001008 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
    1008:	b5f0      	push	{r4, r5, r6, r7, lr}
    100a:	4647      	mov	r7, r8
    100c:	b480      	push	{r7}
    100e:	1c04      	adds	r4, r0, #0
    1010:	4688      	mov	r8, r1
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    1012:	2304      	movs	r3, #4
	while (dp->sect) {
		res = move_window(dp->fs, dp->sect);
    1014:	4d15      	ldr	r5, [pc, #84]	; (106c <dir_read+0x64>)
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
    1016:	273f      	movs	r7, #63	; 0x3f
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
    1018:	4e15      	ldr	r6, [pc, #84]	; (1070 <dir_read+0x68>)
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dp->sect) {
    101a:	e019      	b.n	1050 <dir_read+0x48>
		res = move_window(dp->fs, dp->sect);
    101c:	6820      	ldr	r0, [r4, #0]
    101e:	47a8      	blx	r5
		if (res != FR_OK) break;
    1020:	2800      	cmp	r0, #0
    1022:	d11a      	bne.n	105a <dir_read+0x52>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1024:	6963      	ldr	r3, [r4, #20]
		c = dir[DIR_Name];
    1026:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1028:	2a00      	cmp	r2, #0
    102a:	d019      	beq.n	1060 <dir_read+0x58>
		a = dir[DIR_Attr] & AM_MASK;
    102c:	7adb      	ldrb	r3, [r3, #11]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
    102e:	2ae5      	cmp	r2, #229	; 0xe5
    1030:	d009      	beq.n	1046 <dir_read+0x3e>
    1032:	2a2e      	cmp	r2, #46	; 0x2e
    1034:	d007      	beq.n	1046 <dir_read+0x3e>
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
    1036:	403b      	ands	r3, r7
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
    1038:	2b0f      	cmp	r3, #15
    103a:	d004      	beq.n	1046 <dir_read+0x3e>
    103c:	3b08      	subs	r3, #8
    103e:	4259      	negs	r1, r3
    1040:	4159      	adcs	r1, r3
    1042:	4541      	cmp	r1, r8
    1044:	d00f      	beq.n	1066 <dir_read+0x5e>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
    1046:	1c20      	adds	r0, r4, #0
    1048:	2100      	movs	r1, #0
    104a:	47b0      	blx	r6
    104c:	1e03      	subs	r3, r0, #0
		if (res != FR_OK) break;
    104e:	d109      	bne.n	1064 <dir_read+0x5c>
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dp->sect) {
    1050:	6921      	ldr	r1, [r4, #16]
    1052:	2900      	cmp	r1, #0
    1054:	d1e2      	bne.n	101c <dir_read+0x14>
    1056:	1e18      	subs	r0, r3, #0
#endif
		res = dir_next(dp, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;
    1058:	d005      	beq.n	1066 <dir_read+0x5e>
    105a:	2300      	movs	r3, #0
    105c:	6123      	str	r3, [r4, #16]
    105e:	e002      	b.n	1066 <dir_read+0x5e>
	while (dp->sect) {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1060:	2004      	movs	r0, #4
    1062:	e7fa      	b.n	105a <dir_read+0x52>
    1064:	e7f9      	b.n	105a <dir_read+0x52>
	}

	if (res != FR_OK) dp->sect = 0;

	return res;
}
    1066:	bc04      	pop	{r2}
    1068:	4690      	mov	r8, r2
    106a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    106c:	000001fd 	.word	0x000001fd
    1070:	00000c29 	.word	0x00000c29

00001074 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1076:	464f      	mov	r7, r9
    1078:	4646      	mov	r6, r8
    107a:	b4c0      	push	{r6, r7}
    107c:	1c04      	adds	r4, r0, #0
    107e:	1c0d      	adds	r5, r1, #0
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1080:	2002      	movs	r0, #2
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1082:	2901      	cmp	r1, #1
    1084:	d92b      	bls.n	10de <remove_chain+0x6a>
    1086:	6963      	ldr	r3, [r4, #20]
    1088:	4299      	cmp	r1, r3
    108a:	d228      	bcs.n	10de <remove_chain+0x6a>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    108c:	4f16      	ldr	r7, [pc, #88]	; (10e8 <remove_chain+0x74>)
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    108e:	4b17      	ldr	r3, [pc, #92]	; (10ec <remove_chain+0x78>)
    1090:	4698      	mov	r8, r3
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
				fs->free_clust++;
				fs->fsi_flag |= 1;
    1092:	2301      	movs	r3, #1
    1094:	4699      	mov	r9, r3
    1096:	e018      	b.n	10ca <remove_chain+0x56>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1098:	1c20      	adds	r0, r4, #0
    109a:	1c29      	adds	r1, r5, #0
    109c:	47b8      	blx	r7
    109e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    10a0:	d018      	beq.n	10d4 <remove_chain+0x60>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    10a2:	2801      	cmp	r0, #1
    10a4:	d018      	beq.n	10d8 <remove_chain+0x64>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    10a6:	1c43      	adds	r3, r0, #1
    10a8:	d018      	beq.n	10dc <remove_chain+0x68>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    10aa:	1c20      	adds	r0, r4, #0
    10ac:	1c29      	adds	r1, r5, #0
    10ae:	2200      	movs	r2, #0
    10b0:	47c0      	blx	r8
			if (res != FR_OK) break;
    10b2:	2800      	cmp	r0, #0
    10b4:	d113      	bne.n	10de <remove_chain+0x6a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    10b6:	6923      	ldr	r3, [r4, #16]
    10b8:	1c5a      	adds	r2, r3, #1
    10ba:	d005      	beq.n	10c8 <remove_chain+0x54>
				fs->free_clust++;
    10bc:	3301      	adds	r3, #1
    10be:	6123      	str	r3, [r4, #16]
				fs->fsi_flag |= 1;
    10c0:	7963      	ldrb	r3, [r4, #5]
    10c2:	464a      	mov	r2, r9
    10c4:	4313      	orrs	r3, r2
    10c6:	7163      	strb	r3, [r4, #5]
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    10c8:	1c35      	adds	r5, r6, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    10ca:	6963      	ldr	r3, [r4, #20]
    10cc:	429d      	cmp	r5, r3
    10ce:	d3e3      	bcc.n	1098 <remove_chain+0x24>
    10d0:	2000      	movs	r0, #0
    10d2:	e004      	b.n	10de <remove_chain+0x6a>
    10d4:	2000      	movs	r0, #0
    10d6:	e002      	b.n	10de <remove_chain+0x6a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    10d8:	2002      	movs	r0, #2
    10da:	e000      	b.n	10de <remove_chain+0x6a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    10dc:	2001      	movs	r0, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    10de:	bc0c      	pop	{r2, r3}
    10e0:	4690      	mov	r8, r2
    10e2:	4699      	mov	r9, r3
    10e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	00000819 	.word	0x00000819
    10ec:	00000a05 	.word	0x00000a05

000010f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    10f0:	b510      	push	{r4, lr}
    10f2:	b084      	sub	sp, #16
    10f4:	9001      	str	r0, [sp, #4]
    10f6:	9100      	str	r1, [sp, #0]
    10f8:	1c14      	adds	r4, r2, #0
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    10fa:	9103      	str	r1, [sp, #12]


	vol = get_ldnumber(&rp);
    10fc:	a803      	add	r0, sp, #12
    10fe:	4b14      	ldr	r3, [pc, #80]	; (1150 <f_mount+0x60>)
    1100:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
    1102:	230b      	movs	r3, #11
    1104:	2800      	cmp	r0, #0
    1106:	db20      	blt.n	114a <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1108:	0083      	lsls	r3, r0, #2
    110a:	4a12      	ldr	r2, [pc, #72]	; (1154 <f_mount+0x64>)
    110c:	589b      	ldr	r3, [r3, r2]

	if (cfs) {
    110e:	2b00      	cmp	r3, #0
    1110:	d001      	beq.n	1116 <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1112:	2200      	movs	r2, #0
    1114:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    1116:	9b01      	ldr	r3, [sp, #4]
    1118:	2b00      	cmp	r3, #0
    111a:	d011      	beq.n	1140 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
    111c:	2200      	movs	r2, #0
    111e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1120:	9a01      	ldr	r2, [sp, #4]
    1122:	0080      	lsls	r0, r0, #2
    1124:	4b0b      	ldr	r3, [pc, #44]	; (1154 <f_mount+0x64>)
    1126:	50c2      	str	r2, [r0, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1128:	2300      	movs	r3, #0
    112a:	2a00      	cmp	r2, #0
    112c:	d00d      	beq.n	114a <f_mount+0x5a>
    112e:	2c01      	cmp	r4, #1
    1130:	d10b      	bne.n	114a <f_mount+0x5a>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    1132:	a801      	add	r0, sp, #4
    1134:	4669      	mov	r1, sp
    1136:	2200      	movs	r2, #0
    1138:	4b07      	ldr	r3, [pc, #28]	; (1158 <f_mount+0x68>)
    113a:	4798      	blx	r3
	LEAVE_FF(fs, res);
    113c:	1c03      	adds	r3, r0, #0
    113e:	e004      	b.n	114a <f_mount+0x5a>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1140:	0080      	lsls	r0, r0, #2
    1142:	2200      	movs	r2, #0
    1144:	4b03      	ldr	r3, [pc, #12]	; (1154 <f_mount+0x64>)
    1146:	50c2      	str	r2, [r0, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1148:	2300      	movs	r3, #0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    114a:	1c18      	adds	r0, r3, #0
    114c:	b004      	add	sp, #16
    114e:	bd10      	pop	{r4, pc}
    1150:	00000139 	.word	0x00000139
    1154:	20000044 	.word	0x20000044
    1158:	00000319 	.word	0x00000319

0000115c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    115c:	b5f0      	push	{r4, r5, r6, r7, lr}
    115e:	464f      	mov	r7, r9
    1160:	4646      	mov	r6, r8
    1162:	b4c0      	push	{r6, r7}
    1164:	b08d      	sub	sp, #52	; 0x34
    1166:	9101      	str	r1, [sp, #4]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    1168:	2309      	movs	r3, #9
    116a:	2800      	cmp	r0, #0
    116c:	d100      	bne.n	1170 <f_open+0x14>
    116e:	e0a7      	b.n	12c0 <f_open+0x164>
    1170:	1c14      	adds	r4, r2, #0
    1172:	1c05      	adds	r5, r0, #0
	fp->fs = 0;			/* Clear file object */
    1174:	2300      	movs	r3, #0
    1176:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    1178:	221e      	movs	r2, #30
    117a:	4022      	ands	r2, r4
    117c:	a805      	add	r0, sp, #20
    117e:	a901      	add	r1, sp, #4
    1180:	4b52      	ldr	r3, [pc, #328]	; (12cc <f_open+0x170>)
    1182:	4798      	blx	r3
    1184:	1e03      	subs	r3, r0, #0
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    1186:	d000      	beq.n	118a <f_open+0x2e>
    1188:	e09a      	b.n	12c0 <f_open+0x164>
	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    118a:	261f      	movs	r6, #31
    118c:	4026      	ands	r6, r4
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    118e:	ab02      	add	r3, sp, #8
    1190:	930b      	str	r3, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
    1192:	a805      	add	r0, sp, #20
    1194:	9901      	ldr	r1, [sp, #4]
    1196:	4b4e      	ldr	r3, [pc, #312]	; (12d0 <f_open+0x174>)
    1198:	4798      	blx	r3
    119a:	1e03      	subs	r3, r0, #0
		dir = dj.dir;
    119c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    119e:	d16d      	bne.n	127c <f_open+0x120>
			if (!dir)	/* Default directory itself */
    11a0:	2f00      	cmp	r7, #0
    11a2:	d174      	bne.n	128e <f_open+0x132>
    11a4:	e06e      	b.n	1284 <f_open+0x128>
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    11a6:	2b04      	cmp	r3, #4
    11a8:	d000      	beq.n	11ac <f_open+0x50>
    11aa:	e07e      	b.n	12aa <f_open+0x14e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    11ac:	a805      	add	r0, sp, #20
    11ae:	4b49      	ldr	r3, [pc, #292]	; (12d4 <f_open+0x178>)
    11b0:	4798      	blx	r3
    11b2:	1c03      	adds	r3, r0, #0
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    11b4:	2208      	movs	r2, #8
    11b6:	4316      	orrs	r6, r2
				dir = dj.dir;					/* New entry */
    11b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    11ba:	2800      	cmp	r0, #0
    11bc:	d006      	beq.n	11cc <f_open+0x70>
    11be:	e06d      	b.n	129c <f_open+0x140>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    11c0:	7afb      	ldrb	r3, [r7, #11]
    11c2:	2211      	movs	r2, #17
    11c4:	421a      	tst	r2, r3
    11c6:	d178      	bne.n	12ba <f_open+0x15e>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    11c8:	0763      	lsls	r3, r4, #29
    11ca:	d478      	bmi.n	12be <f_open+0x162>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    11cc:	0733      	lsls	r3, r6, #28
    11ce:	d568      	bpl.n	12a2 <f_open+0x146>
				dw = get_fattime();				/* Created time */
    11d0:	4b41      	ldr	r3, [pc, #260]	; (12d8 <f_open+0x17c>)
    11d2:	4798      	blx	r3
				ST_DWORD(dir+DIR_CrtTime, dw);
    11d4:	73b8      	strb	r0, [r7, #14]
    11d6:	0a03      	lsrs	r3, r0, #8
    11d8:	73fb      	strb	r3, [r7, #15]
    11da:	0c03      	lsrs	r3, r0, #16
    11dc:	743b      	strb	r3, [r7, #16]
    11de:	0e00      	lsrs	r0, r0, #24
    11e0:	7478      	strb	r0, [r7, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
    11e2:	2400      	movs	r4, #0
    11e4:	72fc      	strb	r4, [r7, #11]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    11e6:	773c      	strb	r4, [r7, #28]
    11e8:	777c      	strb	r4, [r7, #29]
    11ea:	77bc      	strb	r4, [r7, #30]
    11ec:	77fc      	strb	r4, [r7, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
    11ee:	9b05      	ldr	r3, [sp, #20]
    11f0:	4698      	mov	r8, r3
    11f2:	1c18      	adds	r0, r3, #0
    11f4:	1c39      	adds	r1, r7, #0
    11f6:	4b39      	ldr	r3, [pc, #228]	; (12dc <f_open+0x180>)
    11f8:	4798      	blx	r3
    11fa:	4681      	mov	r9, r0
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    11fc:	76bc      	strb	r4, [r7, #26]
    11fe:	76fc      	strb	r4, [r7, #27]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    1200:	753c      	strb	r4, [r7, #20]
    1202:	757c      	strb	r4, [r7, #21]
				ST_DWORD(dir+DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
    1204:	2301      	movs	r3, #1
    1206:	4642      	mov	r2, r8
    1208:	7113      	strb	r3, [r2, #4]
				if (cl) {						/* Remove the cluster chain if exist */
    120a:	2800      	cmp	r0, #0
    120c:	d049      	beq.n	12a2 <f_open+0x146>
					dw = dj.fs->winsect;
    120e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
					res = remove_chain(dj.fs, cl);
    1210:	4640      	mov	r0, r8
    1212:	4649      	mov	r1, r9
    1214:	4b32      	ldr	r3, [pc, #200]	; (12e0 <f_open+0x184>)
    1216:	4798      	blx	r3
    1218:	1e03      	subs	r3, r0, #0
					if (res == FR_OK) {
    121a:	d13f      	bne.n	129c <f_open+0x140>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    121c:	9805      	ldr	r0, [sp, #20]
    121e:	464b      	mov	r3, r9
    1220:	3b01      	subs	r3, #1
    1222:	60c3      	str	r3, [r0, #12]
						res = move_window(dj.fs, dw);
    1224:	1c21      	adds	r1, r4, #0
    1226:	4b2f      	ldr	r3, [pc, #188]	; (12e4 <f_open+0x188>)
    1228:	4798      	blx	r3
    122a:	1e03      	subs	r3, r0, #0
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    122c:	d148      	bne.n	12c0 <f_open+0x164>
    122e:	e004      	b.n	123a <f_open+0xde>
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1230:	07a2      	lsls	r2, r4, #30
    1232:	d536      	bpl.n	12a2 <f_open+0x146>
    1234:	07db      	lsls	r3, r3, #31
    1236:	d42e      	bmi.n	1296 <f_open+0x13a>
    1238:	e033      	b.n	12a2 <f_open+0x146>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
    123a:	2320      	movs	r3, #32
    123c:	431e      	orrs	r6, r3
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    123e:	9b05      	ldr	r3, [sp, #20]
    1240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1242:	61eb      	str	r3, [r5, #28]
			fp->dir_ptr = dir;
    1244:	622f      	str	r7, [r5, #32]
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    1246:	71ae      	strb	r6, [r5, #6]
			fp->err = 0;						/* Clear error flag */
    1248:	2600      	movs	r6, #0
    124a:	71ee      	strb	r6, [r5, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    124c:	9c05      	ldr	r4, [sp, #20]
    124e:	1c20      	adds	r0, r4, #0
    1250:	1c39      	adds	r1, r7, #0
    1252:	4b22      	ldr	r3, [pc, #136]	; (12dc <f_open+0x180>)
    1254:	4798      	blx	r3
    1256:	6128      	str	r0, [r5, #16]
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1258:	7ffb      	ldrb	r3, [r7, #31]
    125a:	061a      	lsls	r2, r3, #24
    125c:	7fbb      	ldrb	r3, [r7, #30]
    125e:	041b      	lsls	r3, r3, #16
    1260:	4313      	orrs	r3, r2
    1262:	7f3a      	ldrb	r2, [r7, #28]
    1264:	4313      	orrs	r3, r2
    1266:	7f7a      	ldrb	r2, [r7, #29]
    1268:	0212      	lsls	r2, r2, #8
    126a:	4313      	orrs	r3, r2
    126c:	60eb      	str	r3, [r5, #12]
			fp->fptr = 0;						/* File pointer */
    126e:	60ae      	str	r6, [r5, #8]
			fp->dsect = 0;
    1270:	61ae      	str	r6, [r5, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    1272:	602c      	str	r4, [r5, #0]
			fp->id = fp->fs->id;
    1274:	88e3      	ldrh	r3, [r4, #6]
    1276:	80ab      	strh	r3, [r5, #4]
    1278:	2300      	movs	r3, #0
    127a:	e021      	b.n	12c0 <f_open+0x164>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    127c:	221c      	movs	r2, #28
    127e:	4222      	tst	r2, r4
    1280:	d191      	bne.n	11a6 <f_open+0x4a>
    1282:	e00b      	b.n	129c <f_open+0x140>
    1284:	231c      	movs	r3, #28
    1286:	4223      	tst	r3, r4
    1288:	d10e      	bne.n	12a8 <f_open+0x14c>
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    128a:	3b16      	subs	r3, #22
    128c:	e006      	b.n	129c <f_open+0x140>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    128e:	231c      	movs	r3, #28
    1290:	4223      	tst	r3, r4
    1292:	d195      	bne.n	11c0 <f_open+0x64>
    1294:	e00d      	b.n	12b2 <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    1296:	2307      	movs	r3, #7
    1298:	e000      	b.n	129c <f_open+0x140>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
    129a:	2304      	movs	r3, #4
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
    129c:	2b00      	cmp	r3, #0
    129e:	d0d2      	beq.n	1246 <f_open+0xea>
    12a0:	e00e      	b.n	12c0 <f_open+0x164>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    12a2:	0733      	lsls	r3, r6, #28
    12a4:	d4c9      	bmi.n	123a <f_open+0xde>
    12a6:	e7ca      	b.n	123e <f_open+0xe2>
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    12a8:	2306      	movs	r3, #6
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    12aa:	2208      	movs	r2, #8
    12ac:	4316      	orrs	r6, r2
				dir = dj.dir;					/* New entry */
    12ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    12b0:	e7f4      	b.n	129c <f_open+0x140>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    12b2:	7afb      	ldrb	r3, [r7, #11]
    12b4:	06da      	lsls	r2, r3, #27
    12b6:	d4f0      	bmi.n	129a <f_open+0x13e>
    12b8:	e7ba      	b.n	1230 <f_open+0xd4>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    12ba:	2307      	movs	r3, #7
    12bc:	e000      	b.n	12c0 <f_open+0x164>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    12be:	2308      	movs	r3, #8
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    12c0:	1c18      	adds	r0, r3, #0
    12c2:	b00d      	add	sp, #52	; 0x34
    12c4:	bc0c      	pop	{r2, r3}
    12c6:	4690      	mov	r8, r2
    12c8:	4699      	mov	r9, r3
    12ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12cc:	00000319 	.word	0x00000319
    12d0:	00000d59 	.word	0x00000d59
    12d4:	00000f8d 	.word	0x00000f8d
    12d8:	00003a45 	.word	0x00003a45
    12dc:	00000119 	.word	0x00000119
    12e0:	00001075 	.word	0x00001075
    12e4:	000001fd 	.word	0x000001fd

000012e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    12e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12ea:	465f      	mov	r7, fp
    12ec:	4656      	mov	r6, sl
    12ee:	464d      	mov	r5, r9
    12f0:	4644      	mov	r4, r8
    12f2:	b4f0      	push	{r4, r5, r6, r7}
    12f4:	1c04      	adds	r4, r0, #0
    12f6:	4689      	mov	r9, r1
    12f8:	1c16      	adds	r6, r2, #0
    12fa:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    12fc:	2300      	movs	r3, #0
    12fe:	4642      	mov	r2, r8
    1300:	6013      	str	r3, [r2, #0]

	res = validate(fp);						/* Check validity */
    1302:	4b67      	ldr	r3, [pc, #412]	; (14a0 <f_write+0x1b8>)
    1304:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1306:	1e03      	subs	r3, r0, #0
    1308:	d000      	beq.n	130c <f_write+0x24>
    130a:	e0c2      	b.n	1492 <f_write+0x1aa>
	if (fp->err)							/* Check error */
    130c:	79e2      	ldrb	r2, [r4, #7]
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    130e:	1e13      	subs	r3, r2, #0

	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
    1310:	d000      	beq.n	1314 <f_write+0x2c>
    1312:	e0be      	b.n	1492 <f_write+0x1aa>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    1314:	79a2      	ldrb	r2, [r4, #6]
		LEAVE_FF(fp->fs, FR_DENIED);
    1316:	2307      	movs	r3, #7

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    1318:	0792      	lsls	r2, r2, #30
    131a:	d400      	bmi.n	131e <f_write+0x36>
    131c:	e0b9      	b.n	1492 <f_write+0x1aa>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    131e:	68a3      	ldr	r3, [r4, #8]
    1320:	18f2      	adds	r2, r6, r3
    1322:	4293      	cmp	r3, r2
    1324:	d900      	bls.n	1328 <f_write+0x40>
    1326:	e0aa      	b.n	147e <f_write+0x196>

	for ( ;  btw;							/* Repeat until all data written */
    1328:	2e00      	cmp	r6, #0
    132a:	d100      	bne.n	132e <f_write+0x46>
    132c:	e0a7      	b.n	147e <f_write+0x196>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    132e:	68a2      	ldr	r2, [r4, #8]
    1330:	05d3      	lsls	r3, r2, #23
    1332:	d177      	bne.n	1424 <f_write+0x13c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1334:	6821      	ldr	r1, [r4, #0]
    1336:	0a53      	lsrs	r3, r2, #9
    1338:	788f      	ldrb	r7, [r1, #2]
    133a:	3f01      	subs	r7, #1
    133c:	403b      	ands	r3, r7
    133e:	b2df      	uxtb	r7, r3
			if (!csect) {					/* On the cluster boundary? */
    1340:	2f00      	cmp	r7, #0
    1342:	d11f      	bne.n	1384 <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
    1344:	2a00      	cmp	r2, #0
    1346:	d107      	bne.n	1358 <f_write+0x70>
					clst = fp->sclust;		/* Follow from the origin */
    1348:	6920      	ldr	r0, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    134a:	2800      	cmp	r0, #0
    134c:	d10b      	bne.n	1366 <f_write+0x7e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    134e:	1c08      	adds	r0, r1, #0
    1350:	2100      	movs	r1, #0
    1352:	4b54      	ldr	r3, [pc, #336]	; (14a4 <f_write+0x1bc>)
    1354:	4798      	blx	r3
    1356:	e003      	b.n	1360 <f_write+0x78>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    1358:	1c08      	adds	r0, r1, #0
    135a:	6961      	ldr	r1, [r4, #20]
    135c:	4b51      	ldr	r3, [pc, #324]	; (14a4 <f_write+0x1bc>)
    135e:	4798      	blx	r3
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    1360:	2800      	cmp	r0, #0
    1362:	d100      	bne.n	1366 <f_write+0x7e>
    1364:	e08b      	b.n	147e <f_write+0x196>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1366:	2801      	cmp	r0, #1
    1368:	d102      	bne.n	1370 <f_write+0x88>
    136a:	2302      	movs	r3, #2
    136c:	71e3      	strb	r3, [r4, #7]
    136e:	e090      	b.n	1492 <f_write+0x1aa>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1370:	1c43      	adds	r3, r0, #1
    1372:	d102      	bne.n	137a <f_write+0x92>
    1374:	2301      	movs	r3, #1
    1376:	71e3      	strb	r3, [r4, #7]
    1378:	e08b      	b.n	1492 <f_write+0x1aa>
				fp->clust = clst;			/* Update current cluster */
    137a:	6160      	str	r0, [r4, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    137c:	6923      	ldr	r3, [r4, #16]
    137e:	2b00      	cmp	r3, #0
    1380:	d100      	bne.n	1384 <f_write+0x9c>
    1382:	6120      	str	r0, [r4, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    1384:	6820      	ldr	r0, [r4, #0]
    1386:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1388:	69a2      	ldr	r2, [r4, #24]
    138a:	4293      	cmp	r3, r2
    138c:	d106      	bne.n	139c <f_write+0xb4>
    138e:	4b46      	ldr	r3, [pc, #280]	; (14a8 <f_write+0x1c0>)
    1390:	4798      	blx	r3
    1392:	2800      	cmp	r0, #0
    1394:	d002      	beq.n	139c <f_write+0xb4>
				ABORT(fp->fs, FR_DISK_ERR);
    1396:	2301      	movs	r3, #1
    1398:	71e3      	strb	r3, [r4, #7]
    139a:	e07a      	b.n	1492 <f_write+0x1aa>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    139c:	6823      	ldr	r3, [r4, #0]
    139e:	469b      	mov	fp, r3
    13a0:	1c18      	adds	r0, r3, #0
    13a2:	6961      	ldr	r1, [r4, #20]
    13a4:	4b41      	ldr	r3, [pc, #260]	; (14ac <f_write+0x1c4>)
    13a6:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    13a8:	2800      	cmp	r0, #0
    13aa:	d102      	bne.n	13b2 <f_write+0xca>
    13ac:	2302      	movs	r3, #2
    13ae:	71e3      	strb	r3, [r4, #7]
    13b0:	e06f      	b.n	1492 <f_write+0x1aa>
			sect += csect;
    13b2:	4682      	mov	sl, r0
    13b4:	44ba      	add	sl, r7
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    13b6:	0a75      	lsrs	r5, r6, #9
			if (cc) {						/* Write maximum contiguous sectors directly */
    13b8:	d023      	beq.n	1402 <f_write+0x11a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    13ba:	465b      	mov	r3, fp
    13bc:	789b      	ldrb	r3, [r3, #2]
    13be:	19ea      	adds	r2, r5, r7
    13c0:	429a      	cmp	r2, r3
    13c2:	d900      	bls.n	13c6 <f_write+0xde>
					cc = fp->fs->csize - csect;
    13c4:	1bdd      	subs	r5, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, cc))
    13c6:	465b      	mov	r3, fp
    13c8:	7858      	ldrb	r0, [r3, #1]
    13ca:	4649      	mov	r1, r9
    13cc:	4652      	mov	r2, sl
    13ce:	1c2b      	adds	r3, r5, #0
    13d0:	4f37      	ldr	r7, [pc, #220]	; (14b0 <f_write+0x1c8>)
    13d2:	47b8      	blx	r7
    13d4:	2800      	cmp	r0, #0
    13d6:	d002      	beq.n	13de <f_write+0xf6>
					ABORT(fp->fs, FR_DISK_ERR);
    13d8:	2301      	movs	r3, #1
    13da:	71e3      	strb	r3, [r4, #7]
    13dc:	e059      	b.n	1492 <f_write+0x1aa>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    13de:	6820      	ldr	r0, [r4, #0]
    13e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    13e2:	4652      	mov	r2, sl
    13e4:	1a99      	subs	r1, r3, r2
    13e6:	428d      	cmp	r5, r1
    13e8:	d909      	bls.n	13fe <f_write+0x116>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    13ea:	3030      	adds	r0, #48	; 0x30
    13ec:	0249      	lsls	r1, r1, #9
    13ee:	4449      	add	r1, r9
    13f0:	2280      	movs	r2, #128	; 0x80
    13f2:	0092      	lsls	r2, r2, #2
    13f4:	4b2f      	ldr	r3, [pc, #188]	; (14b4 <f_write+0x1cc>)
    13f6:	4798      	blx	r3
					fp->fs->wflag = 0;
    13f8:	2300      	movs	r3, #0
    13fa:	6822      	ldr	r2, [r4, #0]
    13fc:	7113      	strb	r3, [r2, #4]
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    13fe:	026d      	lsls	r5, r5, #9
				continue;
    1400:	e031      	b.n	1466 <f_write+0x17e>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    1402:	68a3      	ldr	r3, [r4, #8]
    1404:	68e2      	ldr	r2, [r4, #12]
    1406:	4293      	cmp	r3, r2
    1408:	d30a      	bcc.n	1420 <f_write+0x138>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    140a:	4658      	mov	r0, fp
    140c:	4b26      	ldr	r3, [pc, #152]	; (14a8 <f_write+0x1c0>)
    140e:	4798      	blx	r3
    1410:	2800      	cmp	r0, #0
    1412:	d002      	beq.n	141a <f_write+0x132>
    1414:	2301      	movs	r3, #1
    1416:	71e3      	strb	r3, [r4, #7]
    1418:	e03b      	b.n	1492 <f_write+0x1aa>
				fp->fs->winsect = sect;
    141a:	6823      	ldr	r3, [r4, #0]
    141c:	4652      	mov	r2, sl
    141e:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1))
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    1420:	4653      	mov	r3, sl
    1422:	61a3      	str	r3, [r4, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    1424:	68a3      	ldr	r3, [r4, #8]
    1426:	05db      	lsls	r3, r3, #23
    1428:	0ddb      	lsrs	r3, r3, #23
    142a:	2280      	movs	r2, #128	; 0x80
    142c:	0092      	lsls	r2, r2, #2
    142e:	1ad3      	subs	r3, r2, r3
    1430:	1e35      	subs	r5, r6, #0
    1432:	429d      	cmp	r5, r3
    1434:	d900      	bls.n	1438 <f_write+0x150>
    1436:	1c1d      	adds	r5, r3, #0
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    1438:	6820      	ldr	r0, [r4, #0]
    143a:	69a1      	ldr	r1, [r4, #24]
    143c:	4b1e      	ldr	r3, [pc, #120]	; (14b8 <f_write+0x1d0>)
    143e:	4798      	blx	r3
    1440:	2800      	cmp	r0, #0
    1442:	d002      	beq.n	144a <f_write+0x162>
			ABORT(fp->fs, FR_DISK_ERR);
    1444:	2301      	movs	r3, #1
    1446:	71e3      	strb	r3, [r4, #7]
    1448:	e023      	b.n	1492 <f_write+0x1aa>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    144a:	68a3      	ldr	r3, [r4, #8]
    144c:	05d8      	lsls	r0, r3, #23
    144e:	0dc0      	lsrs	r0, r0, #23
    1450:	3030      	adds	r0, #48	; 0x30
    1452:	6823      	ldr	r3, [r4, #0]
    1454:	469c      	mov	ip, r3
    1456:	4460      	add	r0, ip
    1458:	4649      	mov	r1, r9
    145a:	1c2a      	adds	r2, r5, #0
    145c:	4b15      	ldr	r3, [pc, #84]	; (14b4 <f_write+0x1cc>)
    145e:	4798      	blx	r3
		fp->fs->wflag = 1;
    1460:	2301      	movs	r3, #1
    1462:	6822      	ldr	r2, [r4, #0]
    1464:	7113      	strb	r3, [r2, #4]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    1466:	44a9      	add	r9, r5
    1468:	68a3      	ldr	r3, [r4, #8]
    146a:	195b      	adds	r3, r3, r5
    146c:	60a3      	str	r3, [r4, #8]
    146e:	4643      	mov	r3, r8
    1470:	681b      	ldr	r3, [r3, #0]
    1472:	195b      	adds	r3, r3, r5
    1474:	4642      	mov	r2, r8
    1476:	6013      	str	r3, [r2, #0]
    1478:	1b76      	subs	r6, r6, r5
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    147a:	d000      	beq.n	147e <f_write+0x196>
    147c:	e757      	b.n	132e <f_write+0x46>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    147e:	68a3      	ldr	r3, [r4, #8]
    1480:	68e2      	ldr	r2, [r4, #12]
    1482:	4293      	cmp	r3, r2
    1484:	d900      	bls.n	1488 <f_write+0x1a0>
    1486:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    1488:	79a2      	ldrb	r2, [r4, #6]
    148a:	2320      	movs	r3, #32
    148c:	4313      	orrs	r3, r2
    148e:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    1490:	2300      	movs	r3, #0
}
    1492:	1c18      	adds	r0, r3, #0
    1494:	bc3c      	pop	{r2, r3, r4, r5}
    1496:	4690      	mov	r8, r2
    1498:	4699      	mov	r9, r3
    149a:	46a2      	mov	sl, r4
    149c:	46ab      	mov	fp, r5
    149e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14a0:	000002dd 	.word	0x000002dd
    14a4:	00000b49 	.word	0x00000b49
    14a8:	00000191 	.word	0x00000191
    14ac:	00000801 	.word	0x00000801
    14b0:	00001c2d 	.word	0x00001c2d
    14b4:	00000105 	.word	0x00000105
    14b8:	000001fd 	.word	0x000001fd

000014bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    14bc:	b538      	push	{r3, r4, r5, lr}
    14be:	1c04      	adds	r4, r0, #0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    14c0:	4b1c      	ldr	r3, [pc, #112]	; (1534 <f_sync+0x78>)
    14c2:	4798      	blx	r3
	if (res == FR_OK) {
    14c4:	2800      	cmp	r0, #0
    14c6:	d134      	bne.n	1532 <f_sync+0x76>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    14c8:	79a3      	ldrb	r3, [r4, #6]
    14ca:	069b      	lsls	r3, r3, #26
    14cc:	d531      	bpl.n	1532 <f_sync+0x76>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    14ce:	6820      	ldr	r0, [r4, #0]
    14d0:	69e1      	ldr	r1, [r4, #28]
    14d2:	4b19      	ldr	r3, [pc, #100]	; (1538 <f_sync+0x7c>)
    14d4:	4798      	blx	r3
			if (res == FR_OK) {
    14d6:	2800      	cmp	r0, #0
    14d8:	d12b      	bne.n	1532 <f_sync+0x76>
				dir = fp->dir_ptr;
    14da:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    14dc:	7aea      	ldrb	r2, [r5, #11]
    14de:	2320      	movs	r3, #32
    14e0:	4313      	orrs	r3, r2
    14e2:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    14e4:	7b23      	ldrb	r3, [r4, #12]
    14e6:	772b      	strb	r3, [r5, #28]
    14e8:	89a3      	ldrh	r3, [r4, #12]
    14ea:	0a1b      	lsrs	r3, r3, #8
    14ec:	776b      	strb	r3, [r5, #29]
    14ee:	89e3      	ldrh	r3, [r4, #14]
    14f0:	77ab      	strb	r3, [r5, #30]
    14f2:	7be3      	ldrb	r3, [r4, #15]
    14f4:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
    14f6:	6923      	ldr	r3, [r4, #16]
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    14f8:	76ab      	strb	r3, [r5, #26]
    14fa:	0a1a      	lsrs	r2, r3, #8
    14fc:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    14fe:	0c1b      	lsrs	r3, r3, #16
    1500:	752b      	strb	r3, [r5, #20]
    1502:	0a1b      	lsrs	r3, r3, #8
    1504:	756b      	strb	r3, [r5, #21]
			if (res == FR_OK) {
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = get_fattime();							/* Update updated time */
    1506:	4b0d      	ldr	r3, [pc, #52]	; (153c <f_sync+0x80>)
    1508:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tm);
    150a:	75a8      	strb	r0, [r5, #22]
    150c:	0a03      	lsrs	r3, r0, #8
    150e:	75eb      	strb	r3, [r5, #23]
    1510:	0c03      	lsrs	r3, r0, #16
    1512:	762b      	strb	r3, [r5, #24]
    1514:	0e00      	lsrs	r0, r0, #24
    1516:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir+DIR_LstAccDate, 0);
    1518:	2300      	movs	r3, #0
    151a:	74ab      	strb	r3, [r5, #18]
    151c:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
    151e:	79a3      	ldrb	r3, [r4, #6]
    1520:	2220      	movs	r2, #32
    1522:	4393      	bics	r3, r2
    1524:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    1526:	2301      	movs	r3, #1
    1528:	6822      	ldr	r2, [r4, #0]
    152a:	7113      	strb	r3, [r2, #4]
				res = sync_fs(fp->fs);
    152c:	6820      	ldr	r0, [r4, #0]
    152e:	4b04      	ldr	r3, [pc, #16]	; (1540 <f_sync+0x84>)
    1530:	4798      	blx	r3
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    1532:	bd38      	pop	{r3, r4, r5, pc}
    1534:	000002dd 	.word	0x000002dd
    1538:	000001fd 	.word	0x000001fd
    153c:	00003a45 	.word	0x00003a45
    1540:	0000070d 	.word	0x0000070d

00001544 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    1544:	b510      	push	{r4, lr}
    1546:	1c04      	adds	r4, r0, #0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    1548:	4b05      	ldr	r3, [pc, #20]	; (1560 <f_close+0x1c>)
    154a:	4798      	blx	r3
	if (res == FR_OK)
    154c:	2800      	cmp	r0, #0
    154e:	d106      	bne.n	155e <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    1550:	1c20      	adds	r0, r4, #0
    1552:	4b04      	ldr	r3, [pc, #16]	; (1564 <f_close+0x20>)
    1554:	4798      	blx	r3
		if (res == FR_OK) {
    1556:	2800      	cmp	r0, #0
    1558:	d101      	bne.n	155e <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    155a:	2300      	movs	r3, #0
    155c:	6023      	str	r3, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    155e:	bd10      	pop	{r4, pc}
    1560:	000014bd 	.word	0x000014bd
    1564:	000002dd 	.word	0x000002dd

00001568 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    1568:	b530      	push	{r4, r5, lr}
    156a:	b095      	sub	sp, #84	; 0x54
    156c:	9001      	str	r0, [sp, #4]
	DWORD dclst;
	DEF_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
    156e:	a80d      	add	r0, sp, #52	; 0x34
    1570:	a901      	add	r1, sp, #4
    1572:	2201      	movs	r2, #1
    1574:	4b24      	ldr	r3, [pc, #144]	; (1608 <f_unlink+0xa0>)
    1576:	4798      	blx	r3
	if (res == FR_OK) {
    1578:	2800      	cmp	r0, #0
    157a:	d142      	bne.n	1602 <f_unlink+0x9a>
		INIT_BUF(dj);
    157c:	ab03      	add	r3, sp, #12
    157e:	9313      	str	r3, [sp, #76]	; 0x4c
		res = follow_path(&dj, path);		/* Follow the file path */
    1580:	a80d      	add	r0, sp, #52	; 0x34
    1582:	9901      	ldr	r1, [sp, #4]
    1584:	4b21      	ldr	r3, [pc, #132]	; (160c <f_unlink+0xa4>)
    1586:	4798      	blx	r3
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    1588:	2800      	cmp	r0, #0
    158a:	d13a      	bne.n	1602 <f_unlink+0x9a>
			dir = dj.dir;
    158c:	9912      	ldr	r1, [sp, #72]	; 0x48
			if (!dir) {
    158e:	2900      	cmp	r1, #0
    1590:	d027      	beq.n	15e2 <f_unlink+0x7a>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    1592:	7acc      	ldrb	r4, [r1, #11]
					res = FR_DENIED;		/* Cannot remove R/O object */
    1594:	3007      	adds	r0, #7
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    1596:	07e3      	lsls	r3, r4, #31
    1598:	d433      	bmi.n	1602 <f_unlink+0x9a>
    159a:	e024      	b.n	15e6 <f_unlink+0x7e>
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
					res = FR_INT_ERR;
    159c:	2002      	movs	r0, #2
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
    159e:	2d01      	cmp	r5, #1
    15a0:	d92f      	bls.n	1602 <f_unlink+0x9a>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-directory is empty or not */
    15a2:	a806      	add	r0, sp, #24
    15a4:	a90d      	add	r1, sp, #52	; 0x34
    15a6:	221c      	movs	r2, #28
    15a8:	4b19      	ldr	r3, [pc, #100]	; (1610 <f_unlink+0xa8>)
    15aa:	4798      	blx	r3
					sdj.sclust = dclst;
    15ac:	9508      	str	r5, [sp, #32]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    15ae:	a806      	add	r0, sp, #24
    15b0:	2102      	movs	r1, #2
    15b2:	4b18      	ldr	r3, [pc, #96]	; (1614 <f_unlink+0xac>)
    15b4:	4798      	blx	r3
					if (res == FR_OK) {
    15b6:	2800      	cmp	r0, #0
    15b8:	d123      	bne.n	1602 <f_unlink+0x9a>
						res = dir_read(&sdj, 0);	/* Read an item */
    15ba:	a806      	add	r0, sp, #24
    15bc:	2100      	movs	r1, #0
    15be:	4b16      	ldr	r3, [pc, #88]	; (1618 <f_unlink+0xb0>)
    15c0:	4798      	blx	r3
						if (res == FR_OK		/* Not empty directory */
    15c2:	2800      	cmp	r0, #0
    15c4:	d116      	bne.n	15f4 <f_unlink+0x8c>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current directory */
#endif
						) res = FR_DENIED;
    15c6:	3007      	adds	r0, #7
    15c8:	e01b      	b.n	1602 <f_unlink+0x9a>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    15ca:	2d00      	cmp	r5, #0
    15cc:	d005      	beq.n	15da <f_unlink+0x72>
						res = remove_chain(dj.fs, dclst);
    15ce:	980d      	ldr	r0, [sp, #52]	; 0x34
    15d0:	1c29      	adds	r1, r5, #0
    15d2:	4b12      	ldr	r3, [pc, #72]	; (161c <f_unlink+0xb4>)
    15d4:	4798      	blx	r3
					if (res == FR_OK) res = sync_fs(dj.fs);
    15d6:	2800      	cmp	r0, #0
    15d8:	d113      	bne.n	1602 <f_unlink+0x9a>
    15da:	980d      	ldr	r0, [sp, #52]	; 0x34
    15dc:	4b10      	ldr	r3, [pc, #64]	; (1620 <f_unlink+0xb8>)
    15de:	4798      	blx	r3
    15e0:	e00f      	b.n	1602 <f_unlink+0x9a>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    15e2:	2006      	movs	r0, #6
    15e4:	e00d      	b.n	1602 <f_unlink+0x9a>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
    15e6:	980d      	ldr	r0, [sp, #52]	; 0x34
    15e8:	4b0e      	ldr	r3, [pc, #56]	; (1624 <f_unlink+0xbc>)
    15ea:	4798      	blx	r3
    15ec:	1c05      	adds	r5, r0, #0
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    15ee:	06e3      	lsls	r3, r4, #27
    15f0:	d4d4      	bmi.n	159c <f_unlink+0x34>
    15f2:	e001      	b.n	15f8 <f_unlink+0x90>
						if (res == FR_OK		/* Not empty directory */
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current directory */
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    15f4:	2804      	cmp	r0, #4
    15f6:	d104      	bne.n	1602 <f_unlink+0x9a>
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    15f8:	a80d      	add	r0, sp, #52	; 0x34
    15fa:	4b0b      	ldr	r3, [pc, #44]	; (1628 <f_unlink+0xc0>)
    15fc:	4798      	blx	r3
				if (res == FR_OK) {
    15fe:	2800      	cmp	r0, #0
    1600:	d0e3      	beq.n	15ca <f_unlink+0x62>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    1602:	b015      	add	sp, #84	; 0x54
    1604:	bd30      	pop	{r4, r5, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	00000319 	.word	0x00000319
    160c:	00000d59 	.word	0x00000d59
    1610:	00000105 	.word	0x00000105
    1614:	00000915 	.word	0x00000915
    1618:	00001009 	.word	0x00001009
    161c:	00001075 	.word	0x00001075
    1620:	0000070d 	.word	0x0000070d
    1624:	00000119 	.word	0x00000119
    1628:	000009c5 	.word	0x000009c5

0000162c <dly_us>:

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		asm("nop");
    162c:	46c0      	nop			; (mov r8, r8)
		asm("nop"); asm("nop");
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    162e:	3801      	subs	r0, #1
    1630:	2800      	cmp	r0, #0
    1632:	d1fb      	bne.n	162c <dly_us>
}
    1634:	4770      	bx	lr
    1636:	46c0      	nop			; (mov r8, r8)

00001638 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    1638:	b5f0      	push	{r4, r5, r6, r7, lr}
    163a:	465f      	mov	r7, fp
    163c:	4656      	mov	r6, sl
    163e:	464d      	mov	r5, r9
    1640:	4644      	mov	r4, r8
    1642:	b4f0      	push	{r4, r5, r6, r7}
    1644:	b083      	sub	sp, #12
    1646:	1c06      	adds	r6, r0, #0
    1648:	1841      	adds	r1, r0, r1
	BYTE d;
	
	
	
	do {
		cpu_irq_disable();
    164a:	4b32      	ldr	r3, [pc, #200]	; (1714 <xmit_mmc+0xdc>)
    164c:	469b      	mov	fp, r3
    164e:	2300      	movs	r3, #0
    1650:	469a      	mov	sl, r3
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1652:	4b31      	ldr	r3, [pc, #196]	; (1718 <xmit_mmc+0xe0>)
    1654:	2580      	movs	r5, #128	; 0x80
    1656:	00ad      	lsls	r5, r5, #2

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1658:	2280      	movs	r2, #128	; 0x80
    165a:	00d2      	lsls	r2, r2, #3
		
		d = *buff++;	/* Get a byte to be sent */
	//	spi_send_byte(d);
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
		CK_H(); CK_L();
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    165c:	2040      	movs	r0, #64	; 0x40
    165e:	4681      	mov	r9, r0
		CK_H(); CK_L();
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    1660:	3820      	subs	r0, #32
    1662:	4680      	mov	r8, r0
		CK_H(); CK_L();
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
		CK_H(); CK_L();
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
		CK_H(); CK_L();
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    1664:	381f      	subs	r0, #31
		CK_H(); CK_L();
		
		cpu_irq_enable();
    1666:	46dc      	mov	ip, fp
    1668:	466c      	mov	r4, sp
    166a:	71e0      	strb	r0, [r4, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    166c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    166e:	f3bf 8f5f 	dmb	sy
	BYTE d;
	
	
	
	do {
		cpu_irq_disable();
    1672:	465c      	mov	r4, fp
    1674:	4657      	mov	r7, sl
    1676:	7027      	strb	r7, [r4, #0]
		
		d = *buff++;	/* Get a byte to be sent */
    1678:	7834      	ldrb	r4, [r6, #0]
	//	spi_send_byte(d);
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    167a:	b267      	sxtb	r7, r4
    167c:	2f00      	cmp	r7, #0
    167e:	da01      	bge.n	1684 <xmit_mmc+0x4c>
    1680:	619d      	str	r5, [r3, #24]
    1682:	e000      	b.n	1686 <xmit_mmc+0x4e>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1684:	615d      	str	r5, [r3, #20]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1686:	619a      	str	r2, [r3, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1688:	615a      	str	r2, [r3, #20]
		CK_H(); CK_L();
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    168a:	464f      	mov	r7, r9
    168c:	4227      	tst	r7, r4
    168e:	d001      	beq.n	1694 <xmit_mmc+0x5c>

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1690:	619d      	str	r5, [r3, #24]
    1692:	e000      	b.n	1696 <xmit_mmc+0x5e>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1694:	615d      	str	r5, [r3, #20]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1696:	619a      	str	r2, [r3, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1698:	615a      	str	r2, [r3, #20]
		CK_H(); CK_L();
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    169a:	4647      	mov	r7, r8
    169c:	4227      	tst	r7, r4
    169e:	d001      	beq.n	16a4 <xmit_mmc+0x6c>

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16a0:	619d      	str	r5, [r3, #24]
    16a2:	e000      	b.n	16a6 <xmit_mmc+0x6e>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16a4:	615d      	str	r5, [r3, #20]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16a6:	619a      	str	r2, [r3, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16a8:	615a      	str	r2, [r3, #20]
		CK_H(); CK_L();
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
    16aa:	06e7      	lsls	r7, r4, #27
    16ac:	d501      	bpl.n	16b2 <xmit_mmc+0x7a>

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16ae:	619d      	str	r5, [r3, #24]
    16b0:	e000      	b.n	16b4 <xmit_mmc+0x7c>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16b2:	615d      	str	r5, [r3, #20]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16b4:	619a      	str	r2, [r3, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16b6:	615a      	str	r2, [r3, #20]
		CK_H(); CK_L();
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
    16b8:	0727      	lsls	r7, r4, #28
    16ba:	d501      	bpl.n	16c0 <xmit_mmc+0x88>

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16bc:	619d      	str	r5, [r3, #24]
    16be:	e000      	b.n	16c2 <xmit_mmc+0x8a>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16c0:	615d      	str	r5, [r3, #20]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16c2:	619a      	str	r2, [r3, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16c4:	615a      	str	r2, [r3, #20]
		CK_H(); CK_L();
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
    16c6:	0767      	lsls	r7, r4, #29
    16c8:	d501      	bpl.n	16ce <xmit_mmc+0x96>

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16ca:	619d      	str	r5, [r3, #24]
    16cc:	e000      	b.n	16d0 <xmit_mmc+0x98>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16ce:	615d      	str	r5, [r3, #20]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16d0:	619a      	str	r2, [r3, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16d2:	615a      	str	r2, [r3, #20]
		CK_H(); CK_L();
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
    16d4:	07a7      	lsls	r7, r4, #30
    16d6:	d501      	bpl.n	16dc <xmit_mmc+0xa4>

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16d8:	619d      	str	r5, [r3, #24]
    16da:	e000      	b.n	16de <xmit_mmc+0xa6>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16dc:	615d      	str	r5, [r3, #20]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16de:	619a      	str	r2, [r3, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16e0:	615a      	str	r2, [r3, #20]
		CK_H(); CK_L();
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    16e2:	4220      	tst	r0, r4
    16e4:	d001      	beq.n	16ea <xmit_mmc+0xb2>

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16e6:	619d      	str	r5, [r3, #24]
    16e8:	e000      	b.n	16ec <xmit_mmc+0xb4>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16ea:	615d      	str	r5, [r3, #20]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    16ec:	619a      	str	r2, [r3, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    16ee:	615a      	str	r2, [r3, #20]
		CK_H(); CK_L();
		
		cpu_irq_enable();
    16f0:	4664      	mov	r4, ip
    16f2:	466f      	mov	r7, sp
    16f4:	79ff      	ldrb	r7, [r7, #7]
    16f6:	7027      	strb	r7, [r4, #0]
    16f8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    16fc:	b662      	cpsie	i
    16fe:	3601      	adds	r6, #1
		
	} while (--bc);
    1700:	428e      	cmp	r6, r1
    1702:	d1b3      	bne.n	166c <xmit_mmc+0x34>
	
	
}
    1704:	b003      	add	sp, #12
    1706:	bc3c      	pop	{r2, r3, r4, r5}
    1708:	4690      	mov	r8, r2
    170a:	4699      	mov	r9, r3
    170c:	46a2      	mov	sl, r4
    170e:	46ab      	mov	fp, r5
    1710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	20000020 	.word	0x20000020
    1718:	41004400 	.word	0x41004400

0000171c <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
    171c:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    171e:	b672      	cpsid	i
    1720:	f3bf 8f5f 	dmb	sy
	BYTE r;

	cpu_irq_disable();
    1724:	2200      	movs	r2, #0
    1726:	4b2e      	ldr	r3, [pc, #184]	; (17e0 <rcvr_mmc+0xc4>)
    1728:	701a      	strb	r2, [r3, #0]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    172a:	2280      	movs	r2, #128	; 0x80
    172c:	0092      	lsls	r2, r2, #2
    172e:	4b2d      	ldr	r3, [pc, #180]	; (17e4 <rcvr_mmc+0xc8>)
    1730:	619a      	str	r2, [r3, #24]
    1732:	1c06      	adds	r6, r0, #0
    1734:	1841      	adds	r1, r0, r1
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    1736:	1c1a      	adds	r2, r3, #0

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1738:	2480      	movs	r4, #128	; 0x80
    173a:	00e4      	lsls	r4, r4, #3
		
	DI_H();	/* Send 0xFF */

	do {
//		r = spi_motta_byte();
		r = 0;	 if (DO) r++;	/* bit7 */
    173c:	2001      	movs	r0, #1
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    173e:	2580      	movs	r5, #128	; 0x80
    1740:	006d      	lsls	r5, r5, #1
    1742:	6a13      	ldr	r3, [r2, #32]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1744:	6194      	str	r4, [r2, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1746:	6154      	str	r4, [r2, #20]
    1748:	0a1b      	lsrs	r3, r3, #8
    174a:	4003      	ands	r3, r0
		CK_H(); 
		CK_L();
		r <<= 1; if (DO) r++;	/* bit6 */
    174c:	005b      	lsls	r3, r3, #1
    174e:	b2db      	uxtb	r3, r3
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    1750:	6a17      	ldr	r7, [r2, #32]
    1752:	422f      	tst	r7, r5
    1754:	d001      	beq.n	175a <rcvr_mmc+0x3e>
    1756:	3301      	adds	r3, #1
    1758:	b2db      	uxtb	r3, r3

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    175a:	6194      	str	r4, [r2, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    175c:	6154      	str	r4, [r2, #20]
		CK_H(); 
		CK_L();
		r <<= 1; if (DO) r++;	/* bit5 */
    175e:	005b      	lsls	r3, r3, #1
    1760:	b2db      	uxtb	r3, r3
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    1762:	6a17      	ldr	r7, [r2, #32]
    1764:	422f      	tst	r7, r5
    1766:	d001      	beq.n	176c <rcvr_mmc+0x50>
    1768:	3301      	adds	r3, #1
    176a:	b2db      	uxtb	r3, r3

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    176c:	6194      	str	r4, [r2, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    176e:	6154      	str	r4, [r2, #20]
		CK_H(); 
		CK_L();
		r <<= 1; if (DO) r++;	/* bit4 */
    1770:	005b      	lsls	r3, r3, #1
    1772:	b2db      	uxtb	r3, r3
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    1774:	6a17      	ldr	r7, [r2, #32]
    1776:	422f      	tst	r7, r5
    1778:	d001      	beq.n	177e <rcvr_mmc+0x62>
    177a:	3301      	adds	r3, #1
    177c:	b2db      	uxtb	r3, r3

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    177e:	6194      	str	r4, [r2, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1780:	6154      	str	r4, [r2, #20]
		CK_H(); 
		CK_L();
		r <<= 1; if (DO) r++;	/* bit3 */
    1782:	005b      	lsls	r3, r3, #1
    1784:	b2db      	uxtb	r3, r3
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    1786:	6a17      	ldr	r7, [r2, #32]
    1788:	422f      	tst	r7, r5
    178a:	d001      	beq.n	1790 <rcvr_mmc+0x74>
    178c:	3301      	adds	r3, #1
    178e:	b2db      	uxtb	r3, r3

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1790:	6194      	str	r4, [r2, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1792:	6154      	str	r4, [r2, #20]
		CK_H(); 
		CK_L();
		r <<= 1; if (DO) r++;	/* bit2 */
    1794:	005b      	lsls	r3, r3, #1
    1796:	b2db      	uxtb	r3, r3
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    1798:	6a17      	ldr	r7, [r2, #32]
    179a:	422f      	tst	r7, r5
    179c:	d001      	beq.n	17a2 <rcvr_mmc+0x86>
    179e:	3301      	adds	r3, #1
    17a0:	b2db      	uxtb	r3, r3

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    17a2:	6194      	str	r4, [r2, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    17a4:	6154      	str	r4, [r2, #20]
		CK_H(); 
		CK_L();
		r <<= 1; if (DO) r++;	/* bit1 */
    17a6:	005b      	lsls	r3, r3, #1
    17a8:	b2db      	uxtb	r3, r3
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    17aa:	6a17      	ldr	r7, [r2, #32]
    17ac:	422f      	tst	r7, r5
    17ae:	d001      	beq.n	17b4 <rcvr_mmc+0x98>
    17b0:	3301      	adds	r3, #1
    17b2:	b2db      	uxtb	r3, r3

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    17b4:	6194      	str	r4, [r2, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    17b6:	6154      	str	r4, [r2, #20]
		CK_H(); 
		CK_L();
		r <<= 1; if (DO) r++;	/* bit0 */
    17b8:	005b      	lsls	r3, r3, #1
    17ba:	b2db      	uxtb	r3, r3
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    17bc:	6a17      	ldr	r7, [r2, #32]
    17be:	422f      	tst	r7, r5
    17c0:	d001      	beq.n	17c6 <rcvr_mmc+0xaa>
    17c2:	3301      	adds	r3, #1
    17c4:	b2db      	uxtb	r3, r3

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    17c6:	6194      	str	r4, [r2, #24]
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    17c8:	6154      	str	r4, [r2, #20]
		CK_H(); 
		CK_L();
		*buff++ = r;			/* Store a received byte */
    17ca:	7033      	strb	r3, [r6, #0]
    17cc:	3601      	adds	r6, #1
	} while (--bc);
    17ce:	428e      	cmp	r6, r1
    17d0:	d1b7      	bne.n	1742 <rcvr_mmc+0x26>
	
	cpu_irq_enable();
    17d2:	2201      	movs	r2, #1
    17d4:	4b02      	ldr	r3, [pc, #8]	; (17e0 <rcvr_mmc+0xc4>)
    17d6:	701a      	strb	r2, [r3, #0]
    17d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    17dc:	b662      	cpsie	i
	
}
    17de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17e0:	20000020 	.word	0x20000020
    17e4:	41004400 	.word	0x41004400

000017e8 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    17e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ea:	b083      	sub	sp, #12
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    17ec:	4c0a      	ldr	r4, [pc, #40]	; (1818 <wait_ready+0x30>)
		rcvr_mmc(&d, 1);
    17ee:	466b      	mov	r3, sp
    17f0:	1ddd      	adds	r5, r3, #7
    17f2:	4e0a      	ldr	r6, [pc, #40]	; (181c <wait_ready+0x34>)
		if (d == 0xFF) break;
		dly_us(100);
    17f4:	4f0a      	ldr	r7, [pc, #40]	; (1820 <wait_ready+0x38>)
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
		rcvr_mmc(&d, 1);
    17f6:	1c28      	adds	r0, r5, #0
    17f8:	2101      	movs	r1, #1
    17fa:	47b0      	blx	r6
		if (d == 0xFF) break;
    17fc:	782b      	ldrb	r3, [r5, #0]
    17fe:	2bff      	cmp	r3, #255	; 0xff
    1800:	d004      	beq.n	180c <wait_ready+0x24>
		dly_us(100);
    1802:	2064      	movs	r0, #100	; 0x64
    1804:	47b8      	blx	r7
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    1806:	3c01      	subs	r4, #1
    1808:	2c00      	cmp	r4, #0
    180a:	d1f4      	bne.n	17f6 <wait_ready+0xe>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
    180c:	1c20      	adds	r0, r4, #0
    180e:	1e44      	subs	r4, r0, #1
    1810:	41a0      	sbcs	r0, r4
}
    1812:	b003      	add	sp, #12
    1814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	00001388 	.word	0x00001388
    181c:	0000171d 	.word	0x0000171d
    1820:	0000162d 	.word	0x0000162d

00001824 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    1824:	b500      	push	{lr}
    1826:	b083      	sub	sp, #12

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1828:	2280      	movs	r2, #128	; 0x80
    182a:	0112      	lsls	r2, r2, #4
    182c:	4b04      	ldr	r3, [pc, #16]	; (1840 <deselect+0x1c>)
    182e:	619a      	str	r2, [r3, #24]
	BYTE d;

	CS_H();
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    1830:	466b      	mov	r3, sp
    1832:	1dd8      	adds	r0, r3, #7
    1834:	2101      	movs	r1, #1
    1836:	4b03      	ldr	r3, [pc, #12]	; (1844 <deselect+0x20>)
    1838:	4798      	blx	r3
}
    183a:	b003      	add	sp, #12
    183c:	bd00      	pop	{pc}
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	41004400 	.word	0x41004400
    1844:	0000171d 	.word	0x0000171d

00001848 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    1848:	b510      	push	{r4, lr}
    184a:	b082      	sub	sp, #8
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    184c:	2280      	movs	r2, #128	; 0x80
    184e:	0112      	lsls	r2, r2, #4
    1850:	4b08      	ldr	r3, [pc, #32]	; (1874 <select+0x2c>)
    1852:	615a      	str	r2, [r3, #20]
	BYTE d;

	CS_L();
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    1854:	466b      	mov	r3, sp
    1856:	1dd8      	adds	r0, r3, #7
    1858:	2101      	movs	r1, #1
    185a:	4b07      	ldr	r3, [pc, #28]	; (1878 <select+0x30>)
    185c:	4798      	blx	r3

	if (wait_ready()) return 1;	/* OK */
    185e:	4b07      	ldr	r3, [pc, #28]	; (187c <select+0x34>)
    1860:	4798      	blx	r3
    1862:	1e04      	subs	r4, r0, #0
    1864:	d102      	bne.n	186c <select+0x24>
	deselect();
    1866:	4b06      	ldr	r3, [pc, #24]	; (1880 <select+0x38>)
    1868:	4798      	blx	r3
	return 0;			/* Failed */
    186a:	e000      	b.n	186e <select+0x26>
	BYTE d;

	CS_L();
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
    186c:	2401      	movs	r4, #1
	deselect();
	return 0;			/* Failed */
}
    186e:	1c20      	adds	r0, r4, #0
    1870:	b002      	add	sp, #8
    1872:	bd10      	pop	{r4, pc}
    1874:	41004400 	.word	0x41004400
    1878:	0000171d 	.word	0x0000171d
    187c:	000017e9 	.word	0x000017e9
    1880:	00001825 	.word	0x00001825

00001884 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    1884:	b5f0      	push	{r4, r5, r6, r7, lr}
    1886:	b085      	sub	sp, #20
    1888:	9000      	str	r0, [sp, #0]
    188a:	9101      	str	r1, [sp, #4]
    188c:	24fa      	movs	r4, #250	; 0xfa
    188e:	00a4      	lsls	r4, r4, #2
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    1890:	ad03      	add	r5, sp, #12
    1892:	4f0e      	ldr	r7, [pc, #56]	; (18cc <rcvr_datablock+0x48>)
		if (d[0] != 0xFF) break;
		dly_us(100);
    1894:	4e0e      	ldr	r6, [pc, #56]	; (18d0 <rcvr_datablock+0x4c>)
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    1896:	1c28      	adds	r0, r5, #0
    1898:	2101      	movs	r1, #1
    189a:	47b8      	blx	r7
		if (d[0] != 0xFF) break;
    189c:	782b      	ldrb	r3, [r5, #0]
    189e:	2bff      	cmp	r3, #255	; 0xff
    18a0:	d104      	bne.n	18ac <rcvr_datablock+0x28>
		dly_us(100);
    18a2:	2064      	movs	r0, #100	; 0x64
    18a4:	47b0      	blx	r6
    18a6:	3c01      	subs	r4, #1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    18a8:	2c00      	cmp	r4, #0
    18aa:	d1f4      	bne.n	1896 <rcvr_datablock+0x12>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    18ac:	ab03      	add	r3, sp, #12
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	2000      	movs	r0, #0
    18b2:	2bfe      	cmp	r3, #254	; 0xfe
    18b4:	d107      	bne.n	18c6 <rcvr_datablock+0x42>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    18b6:	9800      	ldr	r0, [sp, #0]
    18b8:	9901      	ldr	r1, [sp, #4]
    18ba:	4c04      	ldr	r4, [pc, #16]	; (18cc <rcvr_datablock+0x48>)
    18bc:	47a0      	blx	r4
	rcvr_mmc(d, 2);					/* Discard CRC */
    18be:	a803      	add	r0, sp, #12
    18c0:	2102      	movs	r1, #2
    18c2:	47a0      	blx	r4

	return 1;						/* Return with success */
    18c4:	2001      	movs	r0, #1
}
    18c6:	b005      	add	sp, #20
    18c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	0000171d 	.word	0x0000171d
    18d0:	0000162d 	.word	0x0000162d

000018d4 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    18d4:	b530      	push	{r4, r5, lr}
    18d6:	b083      	sub	sp, #12
    18d8:	1c05      	adds	r5, r0, #0
    18da:	1c0c      	adds	r4, r1, #0
	BYTE d[2];


	if (!wait_ready()) return 0;
    18dc:	4b10      	ldr	r3, [pc, #64]	; (1920 <xmit_datablock+0x4c>)
    18de:	4798      	blx	r3
    18e0:	2800      	cmp	r0, #0
    18e2:	d01a      	beq.n	191a <xmit_datablock+0x46>

	d[0] = token;
    18e4:	a801      	add	r0, sp, #4
    18e6:	7004      	strb	r4, [r0, #0]
	xmit_mmc(d, 1);				/* Xmit a token */
    18e8:	2101      	movs	r1, #1
    18ea:	4b0e      	ldr	r3, [pc, #56]	; (1924 <xmit_datablock+0x50>)
    18ec:	4798      	blx	r3
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    18ee:	2001      	movs	r0, #1

	if (!wait_ready()) return 0;

	d[0] = token;
	xmit_mmc(d, 1);				/* Xmit a token */
	if (token != 0xFD) {		/* Is it data token? */
    18f0:	2cfd      	cmp	r4, #253	; 0xfd
    18f2:	d012      	beq.n	191a <xmit_datablock+0x46>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    18f4:	1c28      	adds	r0, r5, #0
    18f6:	2180      	movs	r1, #128	; 0x80
    18f8:	0089      	lsls	r1, r1, #2
    18fa:	4b0a      	ldr	r3, [pc, #40]	; (1924 <xmit_datablock+0x50>)
    18fc:	4798      	blx	r3
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    18fe:	ac01      	add	r4, sp, #4
    1900:	1c20      	adds	r0, r4, #0
    1902:	2102      	movs	r1, #2
    1904:	4d08      	ldr	r5, [pc, #32]	; (1928 <xmit_datablock+0x54>)
    1906:	47a8      	blx	r5
		rcvr_mmc(d, 1);			/* Receive data response */
    1908:	1c20      	adds	r0, r4, #0
    190a:	2101      	movs	r1, #1
    190c:	47a8      	blx	r5
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    190e:	7823      	ldrb	r3, [r4, #0]
    1910:	201f      	movs	r0, #31
    1912:	4018      	ands	r0, r3
    1914:	3805      	subs	r0, #5
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    1916:	4243      	negs	r3, r0
    1918:	4158      	adcs	r0, r3
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
}
    191a:	b003      	add	sp, #12
    191c:	bd30      	pop	{r4, r5, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	000017e9 	.word	0x000017e9
    1924:	00001639 	.word	0x00001639
    1928:	0000171d 	.word	0x0000171d

0000192c <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    192c:	b570      	push	{r4, r5, r6, lr}
    192e:	b082      	sub	sp, #8
    1930:	1c04      	adds	r4, r0, #0
    1932:	1c0d      	adds	r5, r1, #0
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1934:	b243      	sxtb	r3, r0
    1936:	2b00      	cmp	r3, #0
    1938:	da08      	bge.n	194c <send_cmd+0x20>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    193a:	2037      	movs	r0, #55	; 0x37
    193c:	2100      	movs	r1, #0
    193e:	f7ff fff5 	bl	192c <send_cmd>
    1942:	1e03      	subs	r3, r0, #0
		if (n > 1) return n;
    1944:	2b01      	cmp	r3, #1
    1946:	d85c      	bhi.n	1a02 <send_cmd+0xd6>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    1948:	237f      	movs	r3, #127	; 0x7f
    194a:	401c      	ands	r4, r3
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    194c:	2c0c      	cmp	r4, #12
    194e:	d02a      	beq.n	19a6 <send_cmd+0x7a>
		deselect();
    1950:	4b2d      	ldr	r3, [pc, #180]	; (1a08 <send_cmd+0xdc>)
    1952:	4798      	blx	r3
		if (!select()) return 0xFF;
    1954:	4b2d      	ldr	r3, [pc, #180]	; (1a0c <send_cmd+0xe0>)
    1956:	4798      	blx	r3
    1958:	1c03      	adds	r3, r0, #0
    195a:	20ff      	movs	r0, #255	; 0xff
    195c:	2b00      	cmp	r3, #0
    195e:	d050      	beq.n	1a02 <send_cmd+0xd6>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    1960:	2340      	movs	r3, #64	; 0x40
    1962:	4323      	orrs	r3, r4
    1964:	466a      	mov	r2, sp
    1966:	7013      	strb	r3, [r2, #0]
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    1968:	0e2b      	lsrs	r3, r5, #24
    196a:	7053      	strb	r3, [r2, #1]
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    196c:	0c2b      	lsrs	r3, r5, #16
    196e:	7093      	strb	r3, [r2, #2]
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    1970:	0a2b      	lsrs	r3, r5, #8
    1972:	70d3      	strb	r3, [r2, #3]
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    1974:	7115      	strb	r5, [r2, #4]
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    1976:	2c00      	cmp	r4, #0
    1978:	d03b      	beq.n	19f2 <send_cmd+0xc6>
    197a:	e037      	b.n	19ec <send_cmd+0xc0>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
	xmit_mmc(buf, 6);

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    197c:	466b      	mov	r3, sp
    197e:	1dd8      	adds	r0, r3, #7
    1980:	2101      	movs	r1, #1
    1982:	4b23      	ldr	r3, [pc, #140]	; (1a10 <send_cmd+0xe4>)
    1984:	4798      	blx	r3
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    1986:	240a      	movs	r4, #10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    1988:	466b      	mov	r3, sp
    198a:	1ddd      	adds	r5, r3, #7
    198c:	4e20      	ldr	r6, [pc, #128]	; (1a10 <send_cmd+0xe4>)
    198e:	1c28      	adds	r0, r5, #0
    1990:	2101      	movs	r1, #1
    1992:	47b0      	blx	r6
	while ((d & 0x80) && --n);
    1994:	7828      	ldrb	r0, [r5, #0]
    1996:	b243      	sxtb	r3, r0
    1998:	2b00      	cmp	r3, #0
    199a:	da32      	bge.n	1a02 <send_cmd+0xd6>
    199c:	3c01      	subs	r4, #1
    199e:	b2e4      	uxtb	r4, r4
    19a0:	2c00      	cmp	r4, #0
    19a2:	d1f4      	bne.n	198e <send_cmd+0x62>
    19a4:	e02d      	b.n	1a02 <send_cmd+0xd6>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    19a6:	234c      	movs	r3, #76	; 0x4c
    19a8:	466a      	mov	r2, sp
    19aa:	7013      	strb	r3, [r2, #0]
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    19ac:	0e2b      	lsrs	r3, r5, #24
    19ae:	7053      	strb	r3, [r2, #1]
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    19b0:	0c2b      	lsrs	r3, r5, #16
    19b2:	7093      	strb	r3, [r2, #2]
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    19b4:	0a2b      	lsrs	r3, r5, #8
    19b6:	70d3      	strb	r3, [r2, #3]
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    19b8:	7115      	strb	r5, [r2, #4]
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    19ba:	2301      	movs	r3, #1
    19bc:	7153      	strb	r3, [r2, #5]
	xmit_mmc(buf, 6);
    19be:	4668      	mov	r0, sp
    19c0:	2106      	movs	r1, #6
    19c2:	4b14      	ldr	r3, [pc, #80]	; (1a14 <send_cmd+0xe8>)
    19c4:	4798      	blx	r3

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    19c6:	2c0c      	cmp	r4, #12
    19c8:	d1dd      	bne.n	1986 <send_cmd+0x5a>
    19ca:	e7d7      	b.n	197c <send_cmd+0x50>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    19cc:	2387      	movs	r3, #135	; 0x87
    19ce:	466a      	mov	r2, sp
    19d0:	7153      	strb	r3, [r2, #5]
	xmit_mmc(buf, 6);
    19d2:	4668      	mov	r0, sp
    19d4:	2106      	movs	r1, #6
    19d6:	4b0f      	ldr	r3, [pc, #60]	; (1a14 <send_cmd+0xe8>)
    19d8:	4798      	blx	r3
    19da:	e7d4      	b.n	1986 <send_cmd+0x5a>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    19dc:	2301      	movs	r3, #1
    19de:	466a      	mov	r2, sp
    19e0:	7153      	strb	r3, [r2, #5]
	xmit_mmc(buf, 6);
    19e2:	4668      	mov	r0, sp
    19e4:	2106      	movs	r1, #6
    19e6:	4b0b      	ldr	r3, [pc, #44]	; (1a14 <send_cmd+0xe8>)
    19e8:	4798      	blx	r3
    19ea:	e7cc      	b.n	1986 <send_cmd+0x5a>
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    19ec:	2c08      	cmp	r4, #8
    19ee:	d0ed      	beq.n	19cc <send_cmd+0xa0>
    19f0:	e7f4      	b.n	19dc <send_cmd+0xb0>
	buf[5] = n;
    19f2:	2395      	movs	r3, #149	; 0x95
    19f4:	466a      	mov	r2, sp
    19f6:	7153      	strb	r3, [r2, #5]
	xmit_mmc(buf, 6);
    19f8:	4668      	mov	r0, sp
    19fa:	2106      	movs	r1, #6
    19fc:	4b05      	ldr	r3, [pc, #20]	; (1a14 <send_cmd+0xe8>)
    19fe:	4798      	blx	r3
    1a00:	e7c1      	b.n	1986 <send_cmd+0x5a>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    1a02:	b002      	add	sp, #8
    1a04:	bd70      	pop	{r4, r5, r6, pc}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	00001825 	.word	0x00001825
    1a0c:	00001849 	.word	0x00001849
    1a10:	0000171d 	.word	0x0000171d
    1a14:	00001639 	.word	0x00001639

00001a18 <sd_io_init>:

#define	CS_H()		ioport_set_pin_level(SD_SS_PIN, HIGH)				/* Set MMC CS "high" */
#define CS_L()		ioport_set_pin_level(SD_SS_PIN, LOW)				/* Set MMC CS "low" */


void sd_io_init(){
    1a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1a1c:	ac01      	add	r4, sp, #4
    1a1e:	2700      	movs	r7, #0
    1a20:	7027      	strb	r7, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1a22:	2601      	movs	r6, #1
    1a24:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    1a26:	70a7      	strb	r7, [r4, #2]
		struct port_config pin_conf;
		port_get_config_defaults(&pin_conf);

		//MISO
		pin_conf.direction  = PORT_PIN_DIR_INPUT;
		port_pin_set_config(SD_MISO_PIN, &pin_conf);
    1a28:	2008      	movs	r0, #8
    1a2a:	1c21      	adds	r1, r4, #0
    1a2c:	4d0a      	ldr	r5, [pc, #40]	; (1a58 <sd_io_init+0x40>)
    1a2e:	47a8      	blx	r5
		
		//MOSI
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1a30:	7026      	strb	r6, [r4, #0]
		port_pin_set_config(SD_MOSI_PIN, &pin_conf);
    1a32:	2009      	movs	r0, #9
    1a34:	1c21      	adds	r1, r4, #0
    1a36:	47a8      	blx	r5
		
		//SCK
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1a38:	7026      	strb	r6, [r4, #0]
		port_pin_set_config(SD_CLK_PIN, &pin_conf);
    1a3a:	200a      	movs	r0, #10
    1a3c:	1c21      	adds	r1, r4, #0
    1a3e:	47a8      	blx	r5
		
		//SS
		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1a40:	7026      	strb	r6, [r4, #0]
		port_pin_set_config(SD_SS_PIN, &pin_conf);
    1a42:	200b      	movs	r0, #11
    1a44:	1c21      	adds	r1, r4, #0
    1a46:	47a8      	blx	r5
		
		//DETECT
		pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1a48:	7027      	strb	r7, [r4, #0]
		pin_conf.input_pull = PORT_PIN_PULL_DOWN;
    1a4a:	2302      	movs	r3, #2
    1a4c:	7063      	strb	r3, [r4, #1]
		port_pin_set_config(SD_DETECT_PIN, &pin_conf);
    1a4e:	200f      	movs	r0, #15
    1a50:	1c21      	adds	r1, r4, #0
    1a52:	47a8      	blx	r5
		
}
    1a54:	b003      	add	sp, #12
    1a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a58:	00002659 	.word	0x00002659

00001a5c <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    1a5c:	2301      	movs	r3, #1
    1a5e:	2800      	cmp	r0, #0
    1a60:	d101      	bne.n	1a66 <disk_status+0xa>

	return Stat;
    1a62:	4b02      	ldr	r3, [pc, #8]	; (1a6c <disk_status+0x10>)
    1a64:	781b      	ldrb	r3, [r3, #0]
}
    1a66:	1c18      	adds	r0, r3, #0
    1a68:	4770      	bx	lr
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	20000000 	.word	0x20000000

00001a70 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    1a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a72:	b085      	sub	sp, #20
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    1a74:	2303      	movs	r3, #3
    1a76:	2800      	cmp	r0, #0
    1a78:	d000      	beq.n	1a7c <disk_initialize+0xc>
    1a7a:	e083      	b.n	1b84 <disk_initialize+0x114>

	dly_us(10000);			/* 10ms */
    1a7c:	4843      	ldr	r0, [pc, #268]	; (1b8c <disk_initialize+0x11c>)
    1a7e:	4b44      	ldr	r3, [pc, #272]	; (1b90 <disk_initialize+0x120>)
    1a80:	4798      	blx	r3
	sd_io_init();
    1a82:	4b44      	ldr	r3, [pc, #272]	; (1b94 <disk_initialize+0x124>)
    1a84:	4798      	blx	r3
    1a86:	240a      	movs	r4, #10
	
	//spi_init(2);

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    1a88:	4d43      	ldr	r5, [pc, #268]	; (1b98 <disk_initialize+0x128>)
    1a8a:	a803      	add	r0, sp, #12
    1a8c:	2101      	movs	r1, #1
    1a8e:	47a8      	blx	r5
    1a90:	3c01      	subs	r4, #1
    1a92:	b2e4      	uxtb	r4, r4
    1a94:	2c00      	cmp	r4, #0
    1a96:	d1f8      	bne.n	1a8a <disk_initialize+0x1a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1a98:	2000      	movs	r0, #0
    1a9a:	2100      	movs	r1, #0
    1a9c:	4b3f      	ldr	r3, [pc, #252]	; (1b9c <disk_initialize+0x12c>)
    1a9e:	4798      	blx	r3
    1aa0:	2801      	cmp	r0, #1
    1aa2:	d165      	bne.n	1b70 <disk_initialize+0x100>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    1aa4:	3007      	adds	r0, #7
    1aa6:	21d5      	movs	r1, #213	; 0xd5
    1aa8:	0049      	lsls	r1, r1, #1
    1aaa:	4b3c      	ldr	r3, [pc, #240]	; (1b9c <disk_initialize+0x12c>)
    1aac:	4798      	blx	r3
    1aae:	2801      	cmp	r0, #1
    1ab0:	d133      	bne.n	1b1a <disk_initialize+0xaa>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    1ab2:	ac03      	add	r4, sp, #12
    1ab4:	1c20      	adds	r0, r4, #0
    1ab6:	2104      	movs	r1, #4
    1ab8:	4b37      	ldr	r3, [pc, #220]	; (1b98 <disk_initialize+0x128>)
    1aba:	4798      	blx	r3
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    1abc:	78a3      	ldrb	r3, [r4, #2]
	
	//spi_init(2);

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    1abe:	2400      	movs	r4, #0
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    1ac0:	2b01      	cmp	r3, #1
    1ac2:	d155      	bne.n	1b70 <disk_initialize+0x100>
    1ac4:	ab03      	add	r3, sp, #12
    1ac6:	78db      	ldrb	r3, [r3, #3]
    1ac8:	2baa      	cmp	r3, #170	; 0xaa
    1aca:	d151      	bne.n	1b70 <disk_initialize+0x100>
    1acc:	25fa      	movs	r5, #250	; 0xfa
    1ace:	00ad      	lsls	r5, r5, #2
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    1ad0:	2480      	movs	r4, #128	; 0x80
    1ad2:	05e4      	lsls	r4, r4, #23
    1ad4:	4f31      	ldr	r7, [pc, #196]	; (1b9c <disk_initialize+0x12c>)
					dly_us(1000);
    1ad6:	4e2e      	ldr	r6, [pc, #184]	; (1b90 <disk_initialize+0x120>)
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    1ad8:	20a9      	movs	r0, #169	; 0xa9
    1ada:	1c21      	adds	r1, r4, #0
    1adc:	47b8      	blx	r7
    1ade:	2800      	cmp	r0, #0
    1ae0:	d007      	beq.n	1af2 <disk_initialize+0x82>
					dly_us(1000);
    1ae2:	20fa      	movs	r0, #250	; 0xfa
    1ae4:	0080      	lsls	r0, r0, #2
    1ae6:	47b0      	blx	r6
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1ae8:	3d01      	subs	r5, #1
    1aea:	2d00      	cmp	r5, #0
    1aec:	d1f4      	bne.n	1ad8 <disk_initialize+0x68>
	
	//spi_init(2);

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    1aee:	2400      	movs	r4, #0
    1af0:	e03e      	b.n	1b70 <disk_initialize+0x100>
    1af2:	2400      	movs	r4, #0
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    1af4:	42a5      	cmp	r5, r4
    1af6:	d03b      	beq.n	1b70 <disk_initialize+0x100>
    1af8:	203a      	movs	r0, #58	; 0x3a
    1afa:	1c21      	adds	r1, r4, #0
    1afc:	4b27      	ldr	r3, [pc, #156]	; (1b9c <disk_initialize+0x12c>)
    1afe:	4798      	blx	r3
    1b00:	42a0      	cmp	r0, r4
    1b02:	d135      	bne.n	1b70 <disk_initialize+0x100>
					rcvr_mmc(buf, 4);
    1b04:	ac03      	add	r4, sp, #12
    1b06:	1c20      	adds	r0, r4, #0
    1b08:	2104      	movs	r1, #4
    1b0a:	4b23      	ldr	r3, [pc, #140]	; (1b98 <disk_initialize+0x128>)
    1b0c:	4798      	blx	r3
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    1b0e:	7823      	ldrb	r3, [r4, #0]
    1b10:	240c      	movs	r4, #12
    1b12:	065b      	lsls	r3, r3, #25
    1b14:	d42c      	bmi.n	1b70 <disk_initialize+0x100>
    1b16:	3c08      	subs	r4, #8
    1b18:	e02a      	b.n	1b70 <disk_initialize+0x100>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1b1a:	20a9      	movs	r0, #169	; 0xa9
    1b1c:	2100      	movs	r1, #0
    1b1e:	4b1f      	ldr	r3, [pc, #124]	; (1b9c <disk_initialize+0x12c>)
    1b20:	4798      	blx	r3
    1b22:	2801      	cmp	r0, #1
    1b24:	d903      	bls.n	1b2e <disk_initialize+0xbe>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    1b26:	2301      	movs	r3, #1
    1b28:	9301      	str	r3, [sp, #4]
    1b2a:	2401      	movs	r4, #1
    1b2c:	e002      	b.n	1b34 <disk_initialize+0xc4>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    1b2e:	23a9      	movs	r3, #169	; 0xa9
    1b30:	9301      	str	r3, [sp, #4]
    1b32:	2402      	movs	r4, #2
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    1b34:	25fa      	movs	r5, #250	; 0xfa
    1b36:	00ad      	lsls	r5, r5, #2
				if (send_cmd(cmd, 0) == 0) break;
    1b38:	4e18      	ldr	r6, [pc, #96]	; (1b9c <disk_initialize+0x12c>)
				dly_us(1000);
    1b3a:	4f15      	ldr	r7, [pc, #84]	; (1b90 <disk_initialize+0x120>)
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
    1b3c:	9801      	ldr	r0, [sp, #4]
    1b3e:	2100      	movs	r1, #0
    1b40:	47b0      	blx	r6
    1b42:	2800      	cmp	r0, #0
    1b44:	d007      	beq.n	1b56 <disk_initialize+0xe6>
				dly_us(1000);
    1b46:	20fa      	movs	r0, #250	; 0xfa
    1b48:	0080      	lsls	r0, r0, #2
    1b4a:	47b8      	blx	r7
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    1b4c:	3d01      	subs	r5, #1
    1b4e:	2d00      	cmp	r5, #0
    1b50:	d1f4      	bne.n	1b3c <disk_initialize+0xcc>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    1b52:	2400      	movs	r4, #0
    1b54:	e00c      	b.n	1b70 <disk_initialize+0x100>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    1b56:	2d00      	cmp	r5, #0
    1b58:	d009      	beq.n	1b6e <disk_initialize+0xfe>
    1b5a:	2010      	movs	r0, #16
    1b5c:	2180      	movs	r1, #128	; 0x80
    1b5e:	0089      	lsls	r1, r1, #2
    1b60:	4b0e      	ldr	r3, [pc, #56]	; (1b9c <disk_initialize+0x12c>)
    1b62:	4798      	blx	r3
				ty = 0;
    1b64:	4243      	negs	r3, r0
    1b66:	4143      	adcs	r3, r0
    1b68:	425b      	negs	r3, r3
    1b6a:	401c      	ands	r4, r3
    1b6c:	e000      	b.n	1b70 <disk_initialize+0x100>
    1b6e:	2400      	movs	r4, #0
		}
	}
	CardType = ty;
    1b70:	4b0b      	ldr	r3, [pc, #44]	; (1ba0 <disk_initialize+0x130>)
    1b72:	701c      	strb	r4, [r3, #0]
	s = ty ? 0 : STA_NOINIT;
    1b74:	4263      	negs	r3, r4
    1b76:	4163      	adcs	r3, r4
    1b78:	b2dc      	uxtb	r4, r3
	Stat = s;
    1b7a:	4b0a      	ldr	r3, [pc, #40]	; (1ba4 <disk_initialize+0x134>)
    1b7c:	701c      	strb	r4, [r3, #0]

	deselect();
    1b7e:	4b0a      	ldr	r3, [pc, #40]	; (1ba8 <disk_initialize+0x138>)
    1b80:	4798      	blx	r3

	return s;
    1b82:	1c23      	adds	r3, r4, #0
}
    1b84:	1c18      	adds	r0, r3, #0
    1b86:	b005      	add	sp, #20
    1b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	00002710 	.word	0x00002710
    1b90:	0000162d 	.word	0x0000162d
    1b94:	00001a19 	.word	0x00001a19
    1b98:	0000171d 	.word	0x0000171d
    1b9c:	0000192d 	.word	0x0000192d
    1ba0:	20000048 	.word	0x20000048
    1ba4:	20000000 	.word	0x20000000
    1ba8:	00001825 	.word	0x00001825

00001bac <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bae:	1c0d      	adds	r5, r1, #0
    1bb0:	1c1c      	adds	r4, r3, #0
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    1bb2:	2303      	movs	r3, #3

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    1bb4:	2800      	cmp	r0, #0
    1bb6:	d12d      	bne.n	1c14 <disk_read+0x68>

	return Stat;
    1bb8:	4b17      	ldr	r3, [pc, #92]	; (1c18 <disk_read+0x6c>)
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    1bba:	7819      	ldrb	r1, [r3, #0]
    1bbc:	2303      	movs	r3, #3
    1bbe:	07c9      	lsls	r1, r1, #31
    1bc0:	d428      	bmi.n	1c14 <disk_read+0x68>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    1bc2:	4b16      	ldr	r3, [pc, #88]	; (1c1c <disk_read+0x70>)
    1bc4:	781b      	ldrb	r3, [r3, #0]
    1bc6:	071b      	lsls	r3, r3, #28
    1bc8:	d400      	bmi.n	1bcc <disk_read+0x20>
    1bca:	0252      	lsls	r2, r2, #9

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    1bcc:	2701      	movs	r7, #1
    1bce:	42a7      	cmp	r7, r4
    1bd0:	41bf      	sbcs	r7, r7
    1bd2:	427f      	negs	r7, r7
    1bd4:	3711      	adds	r7, #17
	if (send_cmd(cmd, sector) == 0) {
    1bd6:	1c38      	adds	r0, r7, #0
    1bd8:	1c11      	adds	r1, r2, #0
    1bda:	4b11      	ldr	r3, [pc, #68]	; (1c20 <disk_read+0x74>)
    1bdc:	4798      	blx	r3
    1bde:	2800      	cmp	r0, #0
    1be0:	d113      	bne.n	1c0a <disk_read+0x5e>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    1be2:	4e10      	ldr	r6, [pc, #64]	; (1c24 <disk_read+0x78>)
    1be4:	1c28      	adds	r0, r5, #0
    1be6:	2180      	movs	r1, #128	; 0x80
    1be8:	0089      	lsls	r1, r1, #2
    1bea:	47b0      	blx	r6
    1bec:	2800      	cmp	r0, #0
    1bee:	d006      	beq.n	1bfe <disk_read+0x52>
			buff += 512;
    1bf0:	2380      	movs	r3, #128	; 0x80
    1bf2:	009b      	lsls	r3, r3, #2
    1bf4:	469c      	mov	ip, r3
    1bf6:	4465      	add	r5, ip
		} while (--count);
    1bf8:	3c01      	subs	r4, #1
    1bfa:	2c00      	cmp	r4, #0
    1bfc:	d1f2      	bne.n	1be4 <disk_read+0x38>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    1bfe:	2f12      	cmp	r7, #18
    1c00:	d103      	bne.n	1c0a <disk_read+0x5e>
    1c02:	200c      	movs	r0, #12
    1c04:	2100      	movs	r1, #0
    1c06:	4b06      	ldr	r3, [pc, #24]	; (1c20 <disk_read+0x74>)
    1c08:	4798      	blx	r3
	}
	deselect();
    1c0a:	4b07      	ldr	r3, [pc, #28]	; (1c28 <disk_read+0x7c>)
    1c0c:	4798      	blx	r3

	return count ? RES_ERROR : RES_OK;
    1c0e:	1e60      	subs	r0, r4, #1
    1c10:	4184      	sbcs	r4, r0
    1c12:	b2e3      	uxtb	r3, r4
}
    1c14:	1c18      	adds	r0, r3, #0
    1c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c18:	20000000 	.word	0x20000000
    1c1c:	20000048 	.word	0x20000048
    1c20:	0000192d 	.word	0x0000192d
    1c24:	00001885 	.word	0x00001885
    1c28:	00001825 	.word	0x00001825

00001c2c <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1c2c:	b570      	push	{r4, r5, r6, lr}
    1c2e:	1c0d      	adds	r5, r1, #0
    1c30:	1c16      	adds	r6, r2, #0
    1c32:	1c1c      	adds	r4, r3, #0
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    1c34:	2303      	movs	r3, #3

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    1c36:	2800      	cmp	r0, #0
    1c38:	d13e      	bne.n	1cb8 <disk_write+0x8c>

	return Stat;
    1c3a:	4b20      	ldr	r3, [pc, #128]	; (1cbc <disk_write+0x90>)
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    1c3c:	781a      	ldrb	r2, [r3, #0]
    1c3e:	2303      	movs	r3, #3
    1c40:	07d2      	lsls	r2, r2, #31
    1c42:	d439      	bmi.n	1cb8 <disk_write+0x8c>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    1c44:	4b1e      	ldr	r3, [pc, #120]	; (1cc0 <disk_write+0x94>)
    1c46:	781b      	ldrb	r3, [r3, #0]
    1c48:	071a      	lsls	r2, r3, #28
    1c4a:	d400      	bmi.n	1c4e <disk_write+0x22>
    1c4c:	0276      	lsls	r6, r6, #9

	if (count == 1) {	/* Single block write */
    1c4e:	2c01      	cmp	r4, #1
    1c50:	d10c      	bne.n	1c6c <disk_write+0x40>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    1c52:	2018      	movs	r0, #24
    1c54:	1c31      	adds	r1, r6, #0
    1c56:	4b1b      	ldr	r3, [pc, #108]	; (1cc4 <disk_write+0x98>)
    1c58:	4798      	blx	r3
    1c5a:	2800      	cmp	r0, #0
    1c5c:	d127      	bne.n	1cae <disk_write+0x82>
			&& xmit_datablock(buff, 0xFE))
    1c5e:	1c28      	adds	r0, r5, #0
    1c60:	21fe      	movs	r1, #254	; 0xfe
    1c62:	4b19      	ldr	r3, [pc, #100]	; (1cc8 <disk_write+0x9c>)
    1c64:	4798      	blx	r3
    1c66:	4244      	negs	r4, r0
    1c68:	4144      	adcs	r4, r0
    1c6a:	e020      	b.n	1cae <disk_write+0x82>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    1c6c:	2206      	movs	r2, #6
    1c6e:	421a      	tst	r2, r3
    1c70:	d003      	beq.n	1c7a <disk_write+0x4e>
    1c72:	2097      	movs	r0, #151	; 0x97
    1c74:	1c21      	adds	r1, r4, #0
    1c76:	4b13      	ldr	r3, [pc, #76]	; (1cc4 <disk_write+0x98>)
    1c78:	4798      	blx	r3
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    1c7a:	2019      	movs	r0, #25
    1c7c:	1c31      	adds	r1, r6, #0
    1c7e:	4b11      	ldr	r3, [pc, #68]	; (1cc4 <disk_write+0x98>)
    1c80:	4798      	blx	r3
    1c82:	2800      	cmp	r0, #0
    1c84:	d113      	bne.n	1cae <disk_write+0x82>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    1c86:	4e10      	ldr	r6, [pc, #64]	; (1cc8 <disk_write+0x9c>)
    1c88:	1c28      	adds	r0, r5, #0
    1c8a:	21fc      	movs	r1, #252	; 0xfc
    1c8c:	47b0      	blx	r6
    1c8e:	2800      	cmp	r0, #0
    1c90:	d006      	beq.n	1ca0 <disk_write+0x74>
				buff += 512;
    1c92:	2380      	movs	r3, #128	; 0x80
    1c94:	009b      	lsls	r3, r3, #2
    1c96:	469c      	mov	ip, r3
    1c98:	4465      	add	r5, ip
			} while (--count);
    1c9a:	3c01      	subs	r4, #1
    1c9c:	2c00      	cmp	r4, #0
    1c9e:	d1f3      	bne.n	1c88 <disk_write+0x5c>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    1ca0:	2000      	movs	r0, #0
    1ca2:	21fd      	movs	r1, #253	; 0xfd
    1ca4:	4b08      	ldr	r3, [pc, #32]	; (1cc8 <disk_write+0x9c>)
    1ca6:	4798      	blx	r3
    1ca8:	2800      	cmp	r0, #0
    1caa:	d100      	bne.n	1cae <disk_write+0x82>
				count = 1;
    1cac:	2401      	movs	r4, #1
		}
	}
	deselect();
    1cae:	4b07      	ldr	r3, [pc, #28]	; (1ccc <disk_write+0xa0>)
    1cb0:	4798      	blx	r3

	return count ? RES_ERROR : RES_OK;
    1cb2:	1e60      	subs	r0, r4, #1
    1cb4:	4184      	sbcs	r4, r0
    1cb6:	b2e3      	uxtb	r3, r4
}
    1cb8:	1c18      	adds	r0, r3, #0
    1cba:	bd70      	pop	{r4, r5, r6, pc}
    1cbc:	20000000 	.word	0x20000000
    1cc0:	20000048 	.word	0x20000048
    1cc4:	0000192d 	.word	0x0000192d
    1cc8:	000018d5 	.word	0x000018d5
    1ccc:	00001825 	.word	0x00001825

00001cd0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    1cd0:	b530      	push	{r4, r5, lr}
    1cd2:	b085      	sub	sp, #20
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    1cd4:	2303      	movs	r3, #3

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    1cd6:	2800      	cmp	r0, #0
    1cd8:	d15e      	bne.n	1d98 <disk_ioctl+0xc8>

	return Stat;
    1cda:	4b31      	ldr	r3, [pc, #196]	; (1da0 <disk_ioctl+0xd0>)
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    1cdc:	7818      	ldrb	r0, [r3, #0]
    1cde:	2303      	movs	r3, #3
    1ce0:	07c0      	lsls	r0, r0, #31
    1ce2:	d459      	bmi.n	1d98 <disk_ioctl+0xc8>
    1ce4:	1c15      	adds	r5, r2, #0

	res = RES_ERROR;
	switch (ctrl) {
    1ce6:	2901      	cmp	r1, #1
    1ce8:	d00a      	beq.n	1d00 <disk_ioctl+0x30>
    1cea:	2900      	cmp	r1, #0
    1cec:	d002      	beq.n	1cf4 <disk_ioctl+0x24>
    1cee:	2903      	cmp	r1, #3
    1cf0:	d04a      	beq.n	1d88 <disk_ioctl+0xb8>
    1cf2:	e04d      	b.n	1d90 <disk_ioctl+0xc0>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    1cf4:	4b2b      	ldr	r3, [pc, #172]	; (1da4 <disk_ioctl+0xd4>)
    1cf6:	4798      	blx	r3
    1cf8:	4243      	negs	r3, r0
    1cfa:	4143      	adcs	r3, r0
    1cfc:	b2dc      	uxtb	r4, r3
    1cfe:	e048      	b.n	1d92 <disk_ioctl+0xc2>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1d00:	2009      	movs	r0, #9
    1d02:	2100      	movs	r1, #0
    1d04:	4b28      	ldr	r3, [pc, #160]	; (1da8 <disk_ioctl+0xd8>)
    1d06:	4798      	blx	r3
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    1d08:	2401      	movs	r4, #1
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    1d0a:	2800      	cmp	r0, #0
    1d0c:	d141      	bne.n	1d92 <disk_ioctl+0xc2>
    1d0e:	4668      	mov	r0, sp
    1d10:	2110      	movs	r1, #16
    1d12:	4b26      	ldr	r3, [pc, #152]	; (1dac <disk_ioctl+0xdc>)
    1d14:	4798      	blx	r3
    1d16:	2800      	cmp	r0, #0
    1d18:	d03b      	beq.n	1d92 <disk_ioctl+0xc2>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    1d1a:	466b      	mov	r3, sp
    1d1c:	781b      	ldrb	r3, [r3, #0]
    1d1e:	099b      	lsrs	r3, r3, #6
    1d20:	2b01      	cmp	r3, #1
    1d22:	d110      	bne.n	1d46 <disk_ioctl+0x76>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    1d24:	466b      	mov	r3, sp
    1d26:	79db      	ldrb	r3, [r3, #7]
    1d28:	213f      	movs	r1, #63	; 0x3f
    1d2a:	400b      	ands	r3, r1
    1d2c:	041b      	lsls	r3, r3, #16
    1d2e:	1c59      	adds	r1, r3, #1
    1d30:	466b      	mov	r3, sp
    1d32:	7a5b      	ldrb	r3, [r3, #9]
    1d34:	466a      	mov	r2, sp
    1d36:	7a12      	ldrb	r2, [r2, #8]
    1d38:	0212      	lsls	r2, r2, #8
    1d3a:	189b      	adds	r3, r3, r2
    1d3c:	18cb      	adds	r3, r1, r3
					*(DWORD*)buff = cs << 10;
    1d3e:	029b      	lsls	r3, r3, #10
    1d40:	602b      	str	r3, [r5, #0]
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
				}
				res = RES_OK;
    1d42:	2400      	movs	r4, #0
    1d44:	e025      	b.n	1d92 <disk_ioctl+0xc2>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    1d46:	466b      	mov	r3, sp
    1d48:	7a19      	ldrb	r1, [r3, #8]
    1d4a:	0989      	lsrs	r1, r1, #6
    1d4c:	79d8      	ldrb	r0, [r3, #7]
    1d4e:	0083      	lsls	r3, r0, #2
    1d50:	18c8      	adds	r0, r1, r3
    1d52:	466b      	mov	r3, sp
    1d54:	7999      	ldrb	r1, [r3, #6]
    1d56:	2303      	movs	r3, #3
    1d58:	4019      	ands	r1, r3
    1d5a:	0289      	lsls	r1, r1, #10
    1d5c:	1841      	adds	r1, r0, r1
    1d5e:	1c4c      	adds	r4, r1, #1
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    1d60:	466a      	mov	r2, sp
    1d62:	7952      	ldrb	r2, [r2, #5]
    1d64:	210f      	movs	r1, #15
    1d66:	400a      	ands	r2, r1
    1d68:	4669      	mov	r1, sp
    1d6a:	7a89      	ldrb	r1, [r1, #10]
    1d6c:	09c8      	lsrs	r0, r1, #7
    1d6e:	1811      	adds	r1, r2, r0
    1d70:	3102      	adds	r1, #2
    1d72:	466a      	mov	r2, sp
    1d74:	7a52      	ldrb	r2, [r2, #9]
    1d76:	4013      	ands	r3, r2
    1d78:	005a      	lsls	r2, r3, #1
    1d7a:	188b      	adds	r3, r1, r2
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
    1d7c:	b2db      	uxtb	r3, r3
    1d7e:	3b09      	subs	r3, #9
    1d80:	409c      	lsls	r4, r3
    1d82:	602c      	str	r4, [r5, #0]
				}
				res = RES_OK;
    1d84:	2400      	movs	r4, #0
    1d86:	e004      	b.n	1d92 <disk_ioctl+0xc2>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    1d88:	2380      	movs	r3, #128	; 0x80
    1d8a:	6013      	str	r3, [r2, #0]
			res = RES_OK;
    1d8c:	2400      	movs	r4, #0
			break;
    1d8e:	e000      	b.n	1d92 <disk_ioctl+0xc2>

		default:
			res = RES_PARERR;
    1d90:	2404      	movs	r4, #4
	}

	deselect();
    1d92:	4b07      	ldr	r3, [pc, #28]	; (1db0 <disk_ioctl+0xe0>)
    1d94:	4798      	blx	r3

	return res;
    1d96:	1c23      	adds	r3, r4, #0
}
    1d98:	1c18      	adds	r0, r3, #0
    1d9a:	b005      	add	sp, #20
    1d9c:	bd30      	pop	{r4, r5, pc}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	20000000 	.word	0x20000000
    1da4:	00001849 	.word	0x00001849
    1da8:	0000192d 	.word	0x0000192d
    1dac:	00001885 	.word	0x00001885
    1db0:	00001825 	.word	0x00001825

00001db4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1db4:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1db6:	2000      	movs	r0, #0
    1db8:	4b08      	ldr	r3, [pc, #32]	; (1ddc <delay_init+0x28>)
    1dba:	4798      	blx	r3
	cycles_per_ms /= 1000;
    1dbc:	4c08      	ldr	r4, [pc, #32]	; (1de0 <delay_init+0x2c>)
    1dbe:	21fa      	movs	r1, #250	; 0xfa
    1dc0:	0089      	lsls	r1, r1, #2
    1dc2:	47a0      	blx	r4
    1dc4:	4b07      	ldr	r3, [pc, #28]	; (1de4 <delay_init+0x30>)
    1dc6:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1dc8:	21fa      	movs	r1, #250	; 0xfa
    1dca:	0089      	lsls	r1, r1, #2
    1dcc:	47a0      	blx	r4
    1dce:	4b06      	ldr	r3, [pc, #24]	; (1de8 <delay_init+0x34>)
    1dd0:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1dd2:	2205      	movs	r2, #5
    1dd4:	4b05      	ldr	r3, [pc, #20]	; (1dec <delay_init+0x38>)
    1dd6:	601a      	str	r2, [r3, #0]
}
    1dd8:	bd10      	pop	{r4, pc}
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	0000334d 	.word	0x0000334d
    1de0:	000043c1 	.word	0x000043c1
    1de4:	20000008 	.word	0x20000008
    1de8:	20000004 	.word	0x20000004
    1dec:	e000e010 	.word	0xe000e010

00001df0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1df0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1df2:	4b08      	ldr	r3, [pc, #32]	; (1e14 <delay_cycles_ms+0x24>)
    1df4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1df6:	4a08      	ldr	r2, [pc, #32]	; (1e18 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1df8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1dfa:	2180      	movs	r1, #128	; 0x80
    1dfc:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    1dfe:	e006      	b.n	1e0e <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    1e00:	2c00      	cmp	r4, #0
    1e02:	d004      	beq.n	1e0e <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
    1e04:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1e06:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1e08:	6813      	ldr	r3, [r2, #0]
    1e0a:	420b      	tst	r3, r1
    1e0c:	d0fc      	beq.n	1e08 <delay_cycles_ms+0x18>
    1e0e:	3801      	subs	r0, #1
    1e10:	d2f6      	bcs.n	1e00 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    1e12:	bd30      	pop	{r4, r5, pc}
    1e14:	20000008 	.word	0x20000008
    1e18:	e000e010 	.word	0xe000e010

00001e1c <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
    1e1c:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
    1e1e:	0080      	lsls	r0, r0, #2
    1e20:	4b10      	ldr	r3, [pc, #64]	; (1e64 <_ac_interrupt_handler+0x48>)
    1e22:	58c5      	ldr	r5, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
    1e24:	682b      	ldr	r3, [r5, #0]
    1e26:	799c      	ldrb	r4, [r3, #6]
    1e28:	7e2b      	ldrb	r3, [r5, #24]
    1e2a:	401c      	ands	r4, r3
	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
    1e2c:	7e6b      	ldrb	r3, [r5, #25]
    1e2e:	401c      	ands	r4, r3
			_ac_instance[instance_index]->hw->INTFLAG.reg &
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
    1e30:	07e3      	lsls	r3, r4, #31
    1e32:	d505      	bpl.n	1e40 <_ac_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
    1e34:	1c28      	adds	r0, r5, #0
    1e36:	686b      	ldr	r3, [r5, #4]
    1e38:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
    1e3a:	2301      	movs	r3, #1
    1e3c:	682a      	ldr	r2, [r5, #0]
    1e3e:	7193      	strb	r3, [r2, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
    1e40:	07a3      	lsls	r3, r4, #30
    1e42:	d505      	bpl.n	1e50 <_ac_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
    1e44:	1c28      	adds	r0, r5, #0
    1e46:	68ab      	ldr	r3, [r5, #8]
    1e48:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
    1e4a:	2302      	movs	r3, #2
    1e4c:	682a      	ldr	r2, [r5, #0]
    1e4e:	7193      	strb	r3, [r2, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
    1e50:	06e3      	lsls	r3, r4, #27
    1e52:	d505      	bpl.n	1e60 <_ac_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
    1e54:	1c28      	adds	r0, r5, #0
    1e56:	696b      	ldr	r3, [r5, #20]
    1e58:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
    1e5a:	682b      	ldr	r3, [r5, #0]
    1e5c:	2210      	movs	r2, #16
    1e5e:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
    1e60:	bd38      	pop	{r3, r4, r5, pc}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	20000090 	.word	0x20000090

00001e68 <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
    1e68:	b508      	push	{r3, lr}
	_ac_interrupt_handler(0);
    1e6a:	2000      	movs	r0, #0
    1e6c:	4b01      	ldr	r3, [pc, #4]	; (1e74 <AC_Handler+0xc>)
    1e6e:	4798      	blx	r3
}
    1e70:	bd08      	pop	{r3, pc}
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	00001e1d 	.word	0x00001e1d

00001e78 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1e78:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1e7a:	2200      	movs	r2, #0
    1e7c:	2300      	movs	r3, #0
    1e7e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1e80:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1e82:	2100      	movs	r1, #0
    1e84:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1e86:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1e88:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1e8a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1e8c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    1e8e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    1e90:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1e92:	24c0      	movs	r4, #192	; 0xc0
    1e94:	0164      	lsls	r4, r4, #5
    1e96:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1e98:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1e9a:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1e9c:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    1e9e:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    1ea0:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1ea2:	242a      	movs	r4, #42	; 0x2a
    1ea4:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    1ea6:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1ea8:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1eaa:	3c06      	subs	r4, #6
    1eac:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1eae:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    1eb0:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1eb2:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1eb4:	232b      	movs	r3, #43	; 0x2b
    1eb6:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    1eb8:	3301      	adds	r3, #1
    1eba:	54c1      	strb	r1, [r0, r3]
}
    1ebc:	bd10      	pop	{r4, pc}
    1ebe:	46c0      	nop			; (mov r8, r8)

00001ec0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec2:	465f      	mov	r7, fp
    1ec4:	4656      	mov	r6, sl
    1ec6:	464d      	mov	r5, r9
    1ec8:	4644      	mov	r4, r8
    1eca:	b4f0      	push	{r4, r5, r6, r7}
    1ecc:	b099      	sub	sp, #100	; 0x64
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1ece:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1ed0:	4cc5      	ldr	r4, [pc, #788]	; (21e8 <adc_init+0x328>)
    1ed2:	6a23      	ldr	r3, [r4, #32]
    1ed4:	2580      	movs	r5, #128	; 0x80
    1ed6:	026d      	lsls	r5, r5, #9
    1ed8:	432b      	orrs	r3, r5
    1eda:	6223      	str	r3, [r4, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1edc:	780c      	ldrb	r4, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1ede:	2305      	movs	r3, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1ee0:	07e4      	lsls	r4, r4, #31
    1ee2:	d500      	bpl.n	1ee6 <adc_init+0x26>
    1ee4:	e1fe      	b.n	22e4 <adc_init+0x424>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1ee6:	7809      	ldrb	r1, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    1ee8:	3317      	adds	r3, #23
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1eea:	0789      	lsls	r1, r1, #30
    1eec:	d500      	bpl.n	1ef0 <adc_init+0x30>
    1eee:	e1f9      	b.n	22e4 <adc_init+0x424>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    1ef0:	7853      	ldrb	r3, [r2, #1]
    1ef2:	7103      	strb	r3, [r0, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1ef4:	2b00      	cmp	r3, #0
    1ef6:	d104      	bne.n	1f02 <adc_init+0x42>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1ef8:	49bc      	ldr	r1, [pc, #752]	; (21ec <adc_init+0x32c>)
    1efa:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    1efc:	3304      	adds	r3, #4
    1efe:	4323      	orrs	r3, r4
    1f00:	640b      	str	r3, [r1, #64]	; 0x40
    1f02:	1c16      	adds	r6, r2, #0
    1f04:	4682      	mov	sl, r0
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
    1f06:	4bba      	ldr	r3, [pc, #744]	; (21f0 <adc_init+0x330>)
    1f08:	681b      	ldr	r3, [r3, #0]
    1f0a:	041b      	lsls	r3, r3, #16
    1f0c:	0f1b      	lsrs	r3, r3, #28
    1f0e:	9301      	str	r3, [sp, #4]
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    1f10:	6803      	ldr	r3, [r0, #0]
    1f12:	469b      	mov	fp, r3

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    1f14:	7813      	ldrb	r3, [r2, #0]
    1f16:	aa02      	add	r2, sp, #8
    1f18:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1f1a:	2017      	movs	r0, #23
    1f1c:	1c11      	adds	r1, r2, #0
    1f1e:	4bb5      	ldr	r3, [pc, #724]	; (21f4 <adc_init+0x334>)
    1f20:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1f22:	2017      	movs	r0, #23
    1f24:	4bb4      	ldr	r3, [pc, #720]	; (21f8 <adc_init+0x338>)
    1f26:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    1f28:	232c      	movs	r3, #44	; 0x2c
    1f2a:	5cf3      	ldrb	r3, [r6, r3]
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	d043      	beq.n	1fb8 <adc_init+0xf8>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1f30:	222b      	movs	r2, #43	; 0x2b
    1f32:	5cb5      	ldrb	r5, [r6, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    1f34:	7b32      	ldrb	r2, [r6, #12]
    1f36:	4691      	mov	r9, r2
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
    1f38:	1952      	adds	r2, r2, r5
    1f3a:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
    1f3c:	18d3      	adds	r3, r2, r3
    1f3e:	b2db      	uxtb	r3, r3
    1f40:	4698      	mov	r8, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    1f42:	429a      	cmp	r2, r3
    1f44:	d222      	bcs.n	1f8c <adc_init+0xcc>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    1f46:	4fad      	ldr	r7, [pc, #692]	; (21fc <adc_init+0x33c>)

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
		config.mux_position = 1;

		system_pinmux_pin_set_config(pin_map_result, &config);
    1f48:	1c33      	adds	r3, r6, #0
    1f4a:	464e      	mov	r6, r9
    1f4c:	4699      	mov	r9, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1f4e:	240f      	movs	r4, #15
    1f50:	402c      	ands	r4, r5
    1f52:	464b      	mov	r3, r9
    1f54:	7b1b      	ldrb	r3, [r3, #12]
    1f56:	18e4      	adds	r4, r4, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    1f58:	a804      	add	r0, sp, #16
    1f5a:	49a9      	ldr	r1, [pc, #676]	; (2200 <adc_init+0x340>)
    1f5c:	2250      	movs	r2, #80	; 0x50
    1f5e:	47b8      	blx	r7
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    1f60:	2c13      	cmp	r4, #19
    1f62:	d80c      	bhi.n	1f7e <adc_init+0xbe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1f64:	00a4      	lsls	r4, r4, #2
    1f66:	ab04      	add	r3, sp, #16
    1f68:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f6a:	a903      	add	r1, sp, #12
    1f6c:	2300      	movs	r3, #0
    1f6e:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1f70:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1f72:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1f74:	3301      	adds	r3, #1
    1f76:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    1f78:	b2c0      	uxtb	r0, r0
    1f7a:	4ba2      	ldr	r3, [pc, #648]	; (2204 <adc_init+0x344>)
    1f7c:	4798      	blx	r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
    1f7e:	3501      	adds	r5, #1
    1f80:	b2ed      	uxtb	r5, r5
    1f82:	1973      	adds	r3, r6, r5
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    1f84:	b2db      	uxtb	r3, r3
    1f86:	4598      	cmp	r8, r3
    1f88:	d8e1      	bhi.n	1f4e <adc_init+0x8e>
    1f8a:	464e      	mov	r6, r9
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
    1f8c:	89f4      	ldrh	r4, [r6, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    1f8e:	a804      	add	r0, sp, #16
    1f90:	499b      	ldr	r1, [pc, #620]	; (2200 <adc_init+0x340>)
    1f92:	2250      	movs	r2, #80	; 0x50
    1f94:	4b99      	ldr	r3, [pc, #612]	; (21fc <adc_init+0x33c>)
    1f96:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    1f98:	2c13      	cmp	r4, #19
    1f9a:	d837      	bhi.n	200c <adc_init+0x14c>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1f9c:	00a4      	lsls	r4, r4, #2
    1f9e:	ab04      	add	r3, sp, #16
    1fa0:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1fa2:	a903      	add	r1, sp, #12
    1fa4:	2300      	movs	r3, #0
    1fa6:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1fa8:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1faa:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1fac:	3301      	adds	r3, #1
    1fae:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    1fb0:	b2c0      	uxtb	r0, r0
    1fb2:	4b94      	ldr	r3, [pc, #592]	; (2204 <adc_init+0x344>)
    1fb4:	4798      	blx	r3
    1fb6:	e029      	b.n	200c <adc_init+0x14c>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
    1fb8:	7b34      	ldrb	r4, [r6, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    1fba:	a804      	add	r0, sp, #16
    1fbc:	4990      	ldr	r1, [pc, #576]	; (2200 <adc_init+0x340>)
    1fbe:	2250      	movs	r2, #80	; 0x50
    1fc0:	4b8e      	ldr	r3, [pc, #568]	; (21fc <adc_init+0x33c>)
    1fc2:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    1fc4:	2c13      	cmp	r4, #19
    1fc6:	d80c      	bhi.n	1fe2 <adc_init+0x122>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1fc8:	00a4      	lsls	r4, r4, #2
    1fca:	ab04      	add	r3, sp, #16
    1fcc:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1fce:	a903      	add	r1, sp, #12
    1fd0:	2300      	movs	r3, #0
    1fd2:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1fd4:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1fd6:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1fd8:	3301      	adds	r3, #1
    1fda:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    1fdc:	b2c0      	uxtb	r0, r0
    1fde:	4b89      	ldr	r3, [pc, #548]	; (2204 <adc_init+0x344>)
    1fe0:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
    1fe2:	89f4      	ldrh	r4, [r6, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    1fe4:	a804      	add	r0, sp, #16
    1fe6:	4986      	ldr	r1, [pc, #536]	; (2200 <adc_init+0x340>)
    1fe8:	2250      	movs	r2, #80	; 0x50
    1fea:	4b84      	ldr	r3, [pc, #528]	; (21fc <adc_init+0x33c>)
    1fec:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    1fee:	2c13      	cmp	r4, #19
    1ff0:	d80c      	bhi.n	200c <adc_init+0x14c>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1ff2:	00a4      	lsls	r4, r4, #2
    1ff4:	ab04      	add	r3, sp, #16
    1ff6:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ff8:	a903      	add	r1, sp, #12
    1ffa:	2300      	movs	r3, #0
    1ffc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1ffe:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2000:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2002:	3301      	adds	r3, #1
    2004:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2006:	b2c0      	uxtb	r0, r0
    2008:	4b7e      	ldr	r3, [pc, #504]	; (2204 <adc_init+0x344>)
    200a:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    200c:	7d73      	ldrb	r3, [r6, #21]
    200e:	009b      	lsls	r3, r3, #2
    2010:	b2db      	uxtb	r3, r3
    2012:	465a      	mov	r2, fp
    2014:	7013      	strb	r3, [r2, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2016:	7db3      	ldrb	r3, [r6, #22]
    2018:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    201a:	7872      	ldrb	r2, [r6, #1]
    201c:	4313      	orrs	r3, r2
    201e:	b2db      	uxtb	r3, r3
    2020:	465a      	mov	r2, fp
    2022:	7053      	strb	r3, [r2, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    2024:	7933      	ldrb	r3, [r6, #4]
    2026:	2b34      	cmp	r3, #52	; 0x34
    2028:	d900      	bls.n	202c <adc_init+0x16c>
    202a:	e15a      	b.n	22e2 <adc_init+0x422>
    202c:	009b      	lsls	r3, r3, #2
    202e:	4a76      	ldr	r2, [pc, #472]	; (2208 <adc_init+0x348>)
    2030:	58d3      	ldr	r3, [r2, r3]
    2032:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2034:	2104      	movs	r1, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2036:	2010      	movs	r0, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    2038:	2202      	movs	r2, #2
    203a:	e028      	b.n	208e <adc_init+0x1ce>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    203c:	7c72      	ldrb	r2, [r6, #17]
		accumulate = config->accumulate_samples;
    203e:	7c31      	ldrb	r1, [r6, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2040:	2010      	movs	r0, #16
    2042:	e024      	b.n	208e <adc_init+0x1ce>
#if SAMD20
	/* See $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
    2044:	9b01      	ldr	r3, [sp, #4]
    2046:	2b02      	cmp	r3, #2
    2048:	d91a      	bls.n	2080 <adc_init+0x1c0>
			adjres = ADC_DIVIDE_RESULT_8;
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    204a:	2106      	movs	r1, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    204c:	2010      	movs	r0, #16
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
			adjres = ADC_DIVIDE_RESULT_8;
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
    204e:	2201      	movs	r2, #1
    2050:	e01d      	b.n	208e <adc_init+0x1ce>
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
    2052:	9b01      	ldr	r3, [sp, #4]
    2054:	2b02      	cmp	r3, #2
    2056:	d917      	bls.n	2088 <adc_init+0x1c8>
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2058:	2108      	movs	r1, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    205a:	2010      	movs	r0, #16
	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
    205c:	2200      	movs	r2, #0
    205e:	e016      	b.n	208e <adc_init+0x1ce>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2060:	2100      	movs	r1, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    2062:	2030      	movs	r0, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    2064:	2200      	movs	r2, #0
    2066:	e012      	b.n	208e <adc_init+0x1ce>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2068:	2100      	movs	r1, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    206a:	2020      	movs	r0, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    206c:	2200      	movs	r2, #0
    206e:	e00e      	b.n	208e <adc_init+0x1ce>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2070:	2100      	movs	r1, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    2072:	2000      	movs	r0, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    2074:	2200      	movs	r2, #0
    2076:	e00a      	b.n	208e <adc_init+0x1ce>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2078:	2102      	movs	r1, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    207a:	2010      	movs	r0, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    207c:	2201      	movs	r2, #1
    207e:	e006      	b.n	208e <adc_init+0x1ce>
		if(revision_num < REVISON_D_NUM) {
			adjres = ADC_DIVIDE_RESULT_8;
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    2080:	2106      	movs	r1, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2082:	2010      	movs	r0, #16
	/* See $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
			adjres = ADC_DIVIDE_RESULT_8;
    2084:	2203      	movs	r2, #3
    2086:	e002      	b.n	208e <adc_init+0x1ce>
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2088:	2108      	movs	r1, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    208a:	2010      	movs	r0, #16
		break;

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
    208c:	2204      	movs	r2, #4
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    208e:	0112      	lsls	r2, r2, #4
    2090:	2370      	movs	r3, #112	; 0x70
    2092:	4013      	ands	r3, r2
    2094:	430b      	orrs	r3, r1
    2096:	465a      	mov	r2, fp
    2098:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    209a:	7df2      	ldrb	r2, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    209c:	2317      	movs	r3, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    209e:	2a3f      	cmp	r2, #63	; 0x3f
    20a0:	d900      	bls.n	20a4 <adc_init+0x1e4>
    20a2:	e11f      	b.n	22e4 <adc_init+0x424>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    20a4:	465b      	mov	r3, fp
    20a6:	70da      	strb	r2, [r3, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    20a8:	4653      	mov	r3, sl
    20aa:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    20ac:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    20ae:	b25b      	sxtb	r3, r3
    20b0:	2b00      	cmp	r3, #0
    20b2:	dbfb      	blt.n	20ac <adc_init+0x1ec>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    20b4:	7cf2      	ldrb	r2, [r6, #19]
    20b6:	8873      	ldrh	r3, [r6, #2]
    20b8:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    20ba:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    20bc:	5cb2      	ldrb	r2, [r6, r2]
    20be:	00d2      	lsls	r2, r2, #3
    20c0:	4313      	orrs	r3, r2
    20c2:	7d32      	ldrb	r2, [r6, #20]
    20c4:	0092      	lsls	r2, r2, #2
    20c6:	4313      	orrs	r3, r2
    20c8:	7cb2      	ldrb	r2, [r6, #18]
    20ca:	0052      	lsls	r2, r2, #1
    20cc:	4313      	orrs	r3, r2
    20ce:	4303      	orrs	r3, r0
    20d0:	465a      	mov	r2, fp
    20d2:	8093      	strh	r3, [r2, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    20d4:	7e32      	ldrb	r2, [r6, #24]
    20d6:	2a00      	cmp	r2, #0
    20d8:	d020      	beq.n	211c <adc_init+0x25c>
		switch (resolution) {
    20da:	2810      	cmp	r0, #16
    20dc:	d063      	beq.n	21a6 <adc_init+0x2e6>
    20de:	d802      	bhi.n	20e6 <adc_init+0x226>
    20e0:	2800      	cmp	r0, #0
    20e2:	d03f      	beq.n	2164 <adc_init+0x2a4>
    20e4:	e01a      	b.n	211c <adc_init+0x25c>
    20e6:	2820      	cmp	r0, #32
    20e8:	d01b      	beq.n	2122 <adc_init+0x262>
    20ea:	2830      	cmp	r0, #48	; 0x30
    20ec:	d116      	bne.n	211c <adc_init+0x25c>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    20ee:	7cf3      	ldrb	r3, [r6, #19]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d00a      	beq.n	210a <adc_init+0x24a>
					(config->window.window_lower_value > 127 ||
    20f4:	69f1      	ldr	r1, [r6, #28]
    20f6:	3180      	adds	r1, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    20f8:	2317      	movs	r3, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    20fa:	29ff      	cmp	r1, #255	; 0xff
    20fc:	d900      	bls.n	2100 <adc_init+0x240>
    20fe:	e0f1      	b.n	22e4 <adc_init+0x424>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    2100:	6a31      	ldr	r1, [r6, #32]
    2102:	3180      	adds	r1, #128	; 0x80
    2104:	29ff      	cmp	r1, #255	; 0xff
    2106:	d900      	bls.n	210a <adc_init+0x24a>
    2108:	e0ec      	b.n	22e4 <adc_init+0x424>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    210a:	2317      	movs	r3, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    210c:	69f1      	ldr	r1, [r6, #28]
    210e:	29ff      	cmp	r1, #255	; 0xff
    2110:	dd00      	ble.n	2114 <adc_init+0x254>
    2112:	e0e7      	b.n	22e4 <adc_init+0x424>
    2114:	6a31      	ldr	r1, [r6, #32]
    2116:	29ff      	cmp	r1, #255	; 0xff
    2118:	dd00      	ble.n	211c <adc_init+0x25c>
    211a:	e0e3      	b.n	22e4 <adc_init+0x424>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    211c:	4653      	mov	r3, sl
    211e:	6819      	ldr	r1, [r3, #0]
    2120:	e07a      	b.n	2218 <adc_init+0x358>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    2122:	7cf3      	ldrb	r3, [r6, #19]
    2124:	2b00      	cmp	r3, #0
    2126:	d012      	beq.n	214e <adc_init+0x28e>
					(config->window.window_lower_value > 511 ||
    2128:	69f3      	ldr	r3, [r6, #28]
    212a:	2080      	movs	r0, #128	; 0x80
    212c:	0080      	lsls	r0, r0, #2
    212e:	4684      	mov	ip, r0
    2130:	4463      	add	r3, ip
    2132:	1c19      	adds	r1, r3, #0
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2134:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    2136:	4835      	ldr	r0, [pc, #212]	; (220c <adc_init+0x34c>)
    2138:	4281      	cmp	r1, r0
    213a:	d900      	bls.n	213e <adc_init+0x27e>
    213c:	e0d2      	b.n	22e4 <adc_init+0x424>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    213e:	6a33      	ldr	r3, [r6, #32]
    2140:	4463      	add	r3, ip
    2142:	1c19      	adds	r1, r3, #0
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2144:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    2146:	4831      	ldr	r0, [pc, #196]	; (220c <adc_init+0x34c>)
    2148:	4281      	cmp	r1, r0
    214a:	d900      	bls.n	214e <adc_init+0x28e>
    214c:	e0ca      	b.n	22e4 <adc_init+0x424>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    214e:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    2150:	492e      	ldr	r1, [pc, #184]	; (220c <adc_init+0x34c>)
    2152:	69f0      	ldr	r0, [r6, #28]
    2154:	4288      	cmp	r0, r1
    2156:	dd00      	ble.n	215a <adc_init+0x29a>
    2158:	e0c4      	b.n	22e4 <adc_init+0x424>
    215a:	6a30      	ldr	r0, [r6, #32]
    215c:	4288      	cmp	r0, r1
    215e:	dd00      	ble.n	2162 <adc_init+0x2a2>
    2160:	e0c0      	b.n	22e4 <adc_init+0x424>
    2162:	e7db      	b.n	211c <adc_init+0x25c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    2164:	7cf3      	ldrb	r3, [r6, #19]
    2166:	2b00      	cmp	r3, #0
    2168:	d012      	beq.n	2190 <adc_init+0x2d0>
					(config->window.window_lower_value > 2047 ||
    216a:	69f3      	ldr	r3, [r6, #28]
    216c:	2080      	movs	r0, #128	; 0x80
    216e:	0100      	lsls	r0, r0, #4
    2170:	4684      	mov	ip, r0
    2172:	4463      	add	r3, ip
    2174:	1c19      	adds	r1, r3, #0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2176:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    2178:	4825      	ldr	r0, [pc, #148]	; (2210 <adc_init+0x350>)
    217a:	4281      	cmp	r1, r0
    217c:	d900      	bls.n	2180 <adc_init+0x2c0>
    217e:	e0b1      	b.n	22e4 <adc_init+0x424>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    2180:	6a33      	ldr	r3, [r6, #32]
    2182:	4463      	add	r3, ip
    2184:	1c19      	adds	r1, r3, #0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2186:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    2188:	4821      	ldr	r0, [pc, #132]	; (2210 <adc_init+0x350>)
    218a:	4281      	cmp	r1, r0
    218c:	d900      	bls.n	2190 <adc_init+0x2d0>
    218e:	e0a9      	b.n	22e4 <adc_init+0x424>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2190:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    2192:	491f      	ldr	r1, [pc, #124]	; (2210 <adc_init+0x350>)
    2194:	69f0      	ldr	r0, [r6, #28]
    2196:	4288      	cmp	r0, r1
    2198:	dd00      	ble.n	219c <adc_init+0x2dc>
    219a:	e0a3      	b.n	22e4 <adc_init+0x424>
    219c:	6a30      	ldr	r0, [r6, #32]
    219e:	4288      	cmp	r0, r1
    21a0:	dd00      	ble.n	21a4 <adc_init+0x2e4>
    21a2:	e09f      	b.n	22e4 <adc_init+0x424>
    21a4:	e7ba      	b.n	211c <adc_init+0x25c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    21a6:	7cf3      	ldrb	r3, [r6, #19]
    21a8:	2b00      	cmp	r3, #0
    21aa:	d012      	beq.n	21d2 <adc_init+0x312>
					(config->window.window_lower_value > 32767 ||
    21ac:	69f3      	ldr	r3, [r6, #28]
    21ae:	2080      	movs	r0, #128	; 0x80
    21b0:	0200      	lsls	r0, r0, #8
    21b2:	4684      	mov	ip, r0
    21b4:	4463      	add	r3, ip
    21b6:	1c19      	adds	r1, r3, #0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    21b8:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    21ba:	4816      	ldr	r0, [pc, #88]	; (2214 <adc_init+0x354>)
    21bc:	4281      	cmp	r1, r0
    21be:	d900      	bls.n	21c2 <adc_init+0x302>
    21c0:	e090      	b.n	22e4 <adc_init+0x424>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    21c2:	6a33      	ldr	r3, [r6, #32]
    21c4:	4463      	add	r3, ip
    21c6:	1c19      	adds	r1, r3, #0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    21c8:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    21ca:	4812      	ldr	r0, [pc, #72]	; (2214 <adc_init+0x354>)
    21cc:	4281      	cmp	r1, r0
    21ce:	d900      	bls.n	21d2 <adc_init+0x312>
    21d0:	e088      	b.n	22e4 <adc_init+0x424>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    21d2:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    21d4:	490f      	ldr	r1, [pc, #60]	; (2214 <adc_init+0x354>)
    21d6:	69f0      	ldr	r0, [r6, #28]
    21d8:	4288      	cmp	r0, r1
    21da:	dd00      	ble.n	21de <adc_init+0x31e>
    21dc:	e082      	b.n	22e4 <adc_init+0x424>
    21de:	6a30      	ldr	r0, [r6, #32]
    21e0:	4288      	cmp	r0, r1
    21e2:	dd00      	ble.n	21e6 <adc_init+0x326>
    21e4:	e07e      	b.n	22e4 <adc_init+0x424>
    21e6:	e799      	b.n	211c <adc_init+0x25c>
    21e8:	40000400 	.word	0x40000400
    21ec:	40000800 	.word	0x40000800
    21f0:	41002018 	.word	0x41002018
    21f4:	00003465 	.word	0x00003465
    21f8:	000033d9 	.word	0x000033d9
    21fc:	00004765 	.word	0x00004765
    2200:	000048dc 	.word	0x000048dc
    2204:	0000355d 	.word	0x0000355d
    2208:	00004808 	.word	0x00004808
    220c:	000003ff 	.word	0x000003ff
    2210:	00000fff 	.word	0x00000fff
    2214:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2218:	7e4b      	ldrb	r3, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    221a:	b25b      	sxtb	r3, r3
    221c:	2b00      	cmp	r3, #0
    221e:	dbfb      	blt.n	2218 <adc_init+0x358>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    2220:	465b      	mov	r3, fp
    2222:	721a      	strb	r2, [r3, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2224:	4653      	mov	r3, sl
    2226:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2228:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    222a:	b25b      	sxtb	r3, r3
    222c:	2b00      	cmp	r3, #0
    222e:	dbfb      	blt.n	2228 <adc_init+0x368>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    2230:	8bb3      	ldrh	r3, [r6, #28]
    2232:	465a      	mov	r2, fp
    2234:	8393      	strh	r3, [r2, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2236:	4653      	mov	r3, sl
    2238:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    223a:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    223c:	b25b      	sxtb	r3, r3
    223e:	2b00      	cmp	r3, #0
    2240:	dbfb      	blt.n	223a <adc_init+0x37a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    2242:	8c33      	ldrh	r3, [r6, #32]
    2244:	465a      	mov	r2, fp
    2246:	8413      	strh	r3, [r2, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2248:	232c      	movs	r3, #44	; 0x2c
    224a:	5cf2      	ldrb	r2, [r6, r3]
	if (inputs_to_scan > 0) {
    224c:	2a00      	cmp	r2, #0
    224e:	d004      	beq.n	225a <adc_init+0x39a>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    2250:	3a01      	subs	r2, #1
    2252:	b2d2      	uxtb	r2, r2
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    2254:	3b15      	subs	r3, #21
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2256:	2a0f      	cmp	r2, #15
    2258:	d844      	bhi.n	22e4 <adc_init+0x424>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    225a:	232b      	movs	r3, #43	; 0x2b
    225c:	5cf1      	ldrb	r1, [r6, r3]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    225e:	3b14      	subs	r3, #20
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2260:	290f      	cmp	r1, #15
    2262:	d83f      	bhi.n	22e4 <adc_init+0x424>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2264:	4653      	mov	r3, sl
    2266:	6818      	ldr	r0, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2268:	7e43      	ldrb	r3, [r0, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
    226a:	b25b      	sxtb	r3, r3
    226c:	2b00      	cmp	r3, #0
    226e:	dbfb      	blt.n	2268 <adc_init+0x3a8>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    2270:	89f0      	ldrh	r0, [r6, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    2272:	7b33      	ldrb	r3, [r6, #12]
    2274:	4303      	orrs	r3, r0
    2276:	68b0      	ldr	r0, [r6, #8]
    2278:	4303      	orrs	r3, r0
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
    227a:	0509      	lsls	r1, r1, #20
    227c:	4319      	orrs	r1, r3
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    227e:	0412      	lsls	r2, r2, #16
			config->negative_input |
    2280:	430a      	orrs	r2, r1
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    2282:	465b      	mov	r3, fp
    2284:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    2286:	232a      	movs	r3, #42	; 0x2a
    2288:	5cf3      	ldrb	r3, [r6, r3]
    228a:	465a      	mov	r2, fp
    228c:	7513      	strb	r3, [r2, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    228e:	230f      	movs	r3, #15
    2290:	7593      	strb	r3, [r2, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    2292:	3315      	adds	r3, #21
    2294:	5cf3      	ldrb	r3, [r6, r3]
    2296:	2b00      	cmp	r3, #0
    2298:	d011      	beq.n	22be <adc_init+0x3fe>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    229a:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    229c:	2317      	movs	r3, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    229e:	4915      	ldr	r1, [pc, #84]	; (22f4 <adc_init+0x434>)
    22a0:	428a      	cmp	r2, r1
    22a2:	d81f      	bhi.n	22e4 <adc_init+0x424>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    22a4:	465b      	mov	r3, fp
    22a6:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    22a8:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    22aa:	2380      	movs	r3, #128	; 0x80
    22ac:	011b      	lsls	r3, r3, #4
    22ae:	18ca      	adds	r2, r1, r3
    22b0:	b292      	uxth	r2, r2
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    22b2:	2317      	movs	r3, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    22b4:	480f      	ldr	r0, [pc, #60]	; (22f4 <adc_init+0x434>)
    22b6:	4282      	cmp	r2, r0
    22b8:	d814      	bhi.n	22e4 <adc_init+0x424>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    22ba:	465b      	mov	r3, fp
    22bc:	84d9      	strh	r1, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    22be:	4b0e      	ldr	r3, [pc, #56]	; (22f8 <adc_init+0x438>)
    22c0:	6819      	ldr	r1, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    22c2:	0149      	lsls	r1, r1, #5
    22c4:	23e0      	movs	r3, #224	; 0xe0
    22c6:	00db      	lsls	r3, r3, #3
    22c8:	4019      	ands	r1, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    22ca:	4b0c      	ldr	r3, [pc, #48]	; (22fc <adc_init+0x43c>)
    22cc:	685a      	ldr	r2, [r3, #4]
    22ce:	0150      	lsls	r0, r2, #5
    22d0:	681a      	ldr	r2, [r3, #0]
    22d2:	0ed3      	lsrs	r3, r2, #27
    22d4:	4303      	orrs	r3, r0
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    22d6:	b2db      	uxtb	r3, r3
    22d8:	430b      	orrs	r3, r1
    22da:	465a      	mov	r2, fp
    22dc:	8513      	strh	r3, [r2, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    22de:	2300      	movs	r3, #0
    22e0:	e000      	b.n	22e4 <adc_init+0x424>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    22e2:	2317      	movs	r3, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    22e4:	1c18      	adds	r0, r3, #0
    22e6:	b019      	add	sp, #100	; 0x64
    22e8:	bc3c      	pop	{r2, r3, r4, r5}
    22ea:	4690      	mov	r8, r2
    22ec:	4699      	mov	r9, r3
    22ee:	46a2      	mov	sl, r4
    22f0:	46ab      	mov	fp, r5
    22f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22f4:	00000fff 	.word	0x00000fff
    22f8:	00806024 	.word	0x00806024
    22fc:	00806020 	.word	0x00806020

00002300 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
    2300:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
    2302:	4b0b      	ldr	r3, [pc, #44]	; (2330 <EVSYS_Handler+0x30>)
    2304:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
    2306:	490b      	ldr	r1, [pc, #44]	; (2334 <EVSYS_Handler+0x34>)
    2308:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
    230a:	6898      	ldr	r0, [r3, #8]
    230c:	4302      	orrs	r2, r0
    230e:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
    2310:	4b09      	ldr	r3, [pc, #36]	; (2338 <EVSYS_Handler+0x38>)
    2312:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
    2314:	2c00      	cmp	r4, #0
    2316:	d005      	beq.n	2324 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
    2318:	6820      	ldr	r0, [r4, #0]
    231a:	6863      	ldr	r3, [r4, #4]
    231c:	4798      	blx	r3
		current_hook = current_hook->next;
    231e:	68a4      	ldr	r4, [r4, #8]
	_events_inst.interrupt_flag_buffer |= flag;
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;

	/* Traverse the linked list */
	while (current_hook != NULL) {
    2320:	2c00      	cmp	r4, #0
    2322:	d1f9      	bne.n	2318 <EVSYS_Handler+0x18>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
    2324:	4b02      	ldr	r3, [pc, #8]	; (2330 <EVSYS_Handler+0x30>)
    2326:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
    2328:	689a      	ldr	r2, [r3, #8]
    232a:	438a      	bics	r2, r1
    232c:	609a      	str	r2, [r3, #8]
}
    232e:	bd10      	pop	{r4, pc}
    2330:	2000000c 	.word	0x2000000c
    2334:	42000400 	.word	0x42000400
    2338:	0f0fffff 	.word	0x0f0fffff

0000233c <_events_find_bit_position>:
 */
uint32_t _events_find_bit_position(uint8_t channel, uint8_t start_offset)
{
	uint32_t pos;

	if (channel < _EVENTS_START_OFFSET_BUSY_BITS) {
    233c:	2807      	cmp	r0, #7
    233e:	d804      	bhi.n	234a <_events_find_bit_position+0xe>
		pos = 0x01UL << (start_offset + channel);
    2340:	1808      	adds	r0, r1, r0
    2342:	2101      	movs	r1, #1
    2344:	4081      	lsls	r1, r0
    2346:	1c08      	adds	r0, r1, #0
    2348:	e004      	b.n	2354 <_events_find_bit_position+0x18>
	} else {
		pos = 0x01UL << (start_offset + channel + _EVENTS_START_OFFSET_BUSY_BITS);
    234a:	1808      	adds	r0, r1, r0
    234c:	3008      	adds	r0, #8
    234e:	2101      	movs	r1, #1
    2350:	4081      	lsls	r1, r0
    2352:	1c08      	adds	r0, r1, #0
	}

	return pos;
}
    2354:	4770      	bx	lr
    2356:	46c0      	nop			; (mov r8, r8)

00002358 <_system_events_init>:
    2358:	4a06      	ldr	r2, [pc, #24]	; (2374 <_system_events_init+0x1c>)
    235a:	6a11      	ldr	r1, [r2, #32]
    235c:	2302      	movs	r3, #2
    235e:	430b      	orrs	r3, r1
    2360:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
    2362:	2201      	movs	r2, #1
    2364:	4b04      	ldr	r3, [pc, #16]	; (2378 <_system_events_init+0x20>)
    2366:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
    2368:	1c19      	adds	r1, r3, #0
    236a:	780b      	ldrb	r3, [r1, #0]
    236c:	4213      	tst	r3, r2
    236e:	d1fc      	bne.n	236a <_system_events_init+0x12>
	}
}
    2370:	4770      	bx	lr
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	40000400 	.word	0x40000400
    2378:	42000400 	.word	0x42000400

0000237c <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
    237c:	2301      	movs	r3, #1
    237e:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
    2380:	2300      	movs	r3, #0
    2382:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
    2384:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
    2386:	70c3      	strb	r3, [r0, #3]
}
    2388:	4770      	bx	lr
    238a:	46c0      	nop			; (mov r8, r8)

0000238c <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
    238c:	b5f0      	push	{r4, r5, r6, r7, lr}
    238e:	b083      	sub	sp, #12
    2390:	1c06      	adds	r6, r0, #0
    2392:	1c0d      	adds	r5, r1, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2394:	4b29      	ldr	r3, [pc, #164]	; (243c <events_allocate+0xb0>)
    2396:	4798      	blx	r3
	uint32_t tmp;
	bool allocated = false;

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;
    2398:	4b29      	ldr	r3, [pc, #164]	; (2440 <events_allocate+0xb4>)
    239a:	681b      	ldr	r3, [r3, #0]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {

		if(!(tmp & 0x00000001)) {
    239c:	07da      	lsls	r2, r3, #31
    239e:	d447      	bmi.n	2430 <events_allocate+0xa4>
    23a0:	e002      	b.n	23a8 <events_allocate+0x1c>
    23a2:	421a      	tst	r2, r3
    23a4:	d110      	bne.n	23c8 <events_allocate+0x3c>
    23a6:	e000      	b.n	23aa <events_allocate+0x1e>

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    23a8:	2400      	movs	r4, #0

		if(!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
    23aa:	4b25      	ldr	r3, [pc, #148]	; (2440 <events_allocate+0xb4>)
    23ac:	6819      	ldr	r1, [r3, #0]
    23ae:	2201      	movs	r2, #1
    23b0:	40a2      	lsls	r2, r4
    23b2:	430a      	orrs	r2, r1
    23b4:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
    23b6:	791a      	ldrb	r2, [r3, #4]
    23b8:	3a01      	subs	r2, #1
    23ba:	711a      	strb	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    23bc:	4b21      	ldr	r3, [pc, #132]	; (2444 <events_allocate+0xb8>)
    23be:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
    23c0:	2014      	movs	r0, #20

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
    23c2:	2cff      	cmp	r4, #255	; 0xff
    23c4:	d106      	bne.n	23d4 <events_allocate+0x48>
    23c6:	e037      	b.n	2438 <events_allocate+0xac>

			break;

		}

		tmp = tmp >> 1;
    23c8:	085b      	lsrs	r3, r3, #1

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    23ca:	3401      	adds	r4, #1
    23cc:	b2e4      	uxtb	r4, r4
    23ce:	2c08      	cmp	r4, #8
    23d0:	d1e7      	bne.n	23a2 <events_allocate+0x16>
    23d2:	e029      	b.n	2428 <events_allocate+0x9c>

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
	}

	resource->channel = new_channel;
    23d4:	7034      	strb	r4, [r6, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
    23d6:	786b      	ldrb	r3, [r5, #1]
    23d8:	2b02      	cmp	r3, #2
    23da:	d00a      	beq.n	23f2 <events_allocate+0x66>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator =
    23dc:	a901      	add	r1, sp, #4
    23de:	78eb      	ldrb	r3, [r5, #3]
    23e0:	700b      	strb	r3, [r1, #0]
				(enum gclk_generator)config->clock_source;
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
    23e2:	1d27      	adds	r7, r4, #4
    23e4:	b2ff      	uxtb	r7, r7
    23e6:	1c38      	adds	r0, r7, #0
    23e8:	4b17      	ldr	r3, [pc, #92]	; (2448 <events_allocate+0xbc>)
    23ea:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
    23ec:	1c38      	adds	r0, r7, #0
    23ee:	4b17      	ldr	r3, [pc, #92]	; (244c <events_allocate+0xc0>)
    23f0:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
			     EVSYS_CHANNEL_PATH(config->path)         |
    23f2:	786a      	ldrb	r2, [r5, #1]
    23f4:	0612      	lsls	r2, r2, #24
    23f6:	23c0      	movs	r3, #192	; 0xc0
    23f8:	049b      	lsls	r3, r3, #18
    23fa:	401a      	ands	r2, r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
    23fc:	78a8      	ldrb	r0, [r5, #2]
    23fe:	0400      	lsls	r0, r0, #16
    2400:	21fc      	movs	r1, #252	; 0xfc
    2402:	0389      	lsls	r1, r1, #14
    2404:	1c03      	adds	r3, r0, #0
    2406:	400b      	ands	r3, r1
    2408:	431a      	orrs	r2, r3
    240a:	1c10      	adds	r0, r2, #0
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
    240c:	782a      	ldrb	r2, [r5, #0]
    240e:	0692      	lsls	r2, r2, #26
    2410:	21c0      	movs	r1, #192	; 0xc0
    2412:	0509      	lsls	r1, r1, #20
    2414:	1c13      	adds	r3, r2, #0
    2416:	400b      	ands	r3, r1
    2418:	1c02      	adds	r2, r0, #0
    241a:	431a      	orrs	r2, r3
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    241c:	2307      	movs	r3, #7
    241e:	401c      	ands	r4, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
			     EVSYS_CHANNEL_PATH(config->path)         |
    2420:	4314      	orrs	r4, r2
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    2422:	6074      	str	r4, [r6, #4]
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);


	return STATUS_OK;
    2424:	2000      	movs	r0, #0
    2426:	e007      	b.n	2438 <events_allocate+0xac>
    2428:	4b06      	ldr	r3, [pc, #24]	; (2444 <events_allocate+0xb8>)
    242a:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
    242c:	2014      	movs	r0, #20
    242e:	e003      	b.n	2438 <events_allocate+0xac>

			break;

		}

		tmp = tmp >> 1;
    2430:	085b      	lsrs	r3, r3, #1

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    2432:	2401      	movs	r4, #1

		if(!(tmp & 0x00000001)) {
    2434:	2201      	movs	r2, #1
    2436:	e7b4      	b.n	23a2 <events_allocate+0x16>
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);


	return STATUS_OK;
}
    2438:	b003      	add	sp, #12
    243a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    243c:	00002719 	.word	0x00002719
    2440:	2000000c 	.word	0x2000000c
    2444:	00002759 	.word	0x00002759
    2448:	00003465 	.word	0x00003465
    244c:	000033d9 	.word	0x000033d9

00002450 <events_is_busy>:

	return STATUS_OK;
}

bool events_is_busy(struct events_resource *resource)
{
    2450:	b510      	push	{r4, lr}
	Assert(resource);

	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
    2452:	4b05      	ldr	r3, [pc, #20]	; (2468 <events_is_busy+0x18>)
    2454:	68dc      	ldr	r4, [r3, #12]
    2456:	7800      	ldrb	r0, [r0, #0]
    2458:	2108      	movs	r1, #8
    245a:	4b04      	ldr	r3, [pc, #16]	; (246c <events_is_busy+0x1c>)
    245c:	4798      	blx	r3
    245e:	4020      	ands	r0, r4
    2460:	1e43      	subs	r3, r0, #1
    2462:	4198      	sbcs	r0, r3
    2464:	b2c0      	uxtb	r0, r0
			_EVENTS_START_OFFSET_BUSY_BITS));
}
    2466:	bd10      	pop	{r4, pc}
    2468:	42000400 	.word	0x42000400
    246c:	0000233d 	.word	0x0000233d

00002470 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
    2470:	230f      	movs	r3, #15
    2472:	4019      	ands	r1, r3
    2474:	7803      	ldrb	r3, [r0, #0]
    2476:	3301      	adds	r3, #1
    2478:	021b      	lsls	r3, r3, #8
    247a:	22f0      	movs	r2, #240	; 0xf0
    247c:	0112      	lsls	r2, r2, #4
    247e:	4013      	ands	r3, r2
    2480:	4319      	orrs	r1, r3
    2482:	4b03      	ldr	r3, [pc, #12]	; (2490 <events_attach_user+0x20>)
    2484:	8119      	strh	r1, [r3, #8]
			  EVSYS_USER_USER(user_id);

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
    2486:	6842      	ldr	r2, [r0, #4]
    2488:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
}
    248a:	2000      	movs	r0, #0
    248c:	4770      	bx	lr
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	42000400 	.word	0x42000400

00002494 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2494:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    2496:	2a00      	cmp	r2, #0
    2498:	d10d      	bne.n	24b6 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    249a:	008b      	lsls	r3, r1, #2
    249c:	4a07      	ldr	r2, [pc, #28]	; (24bc <extint_register_callback+0x28>)
    249e:	589b      	ldr	r3, [r3, r2]
    24a0:	2b00      	cmp	r3, #0
    24a2:	d103      	bne.n	24ac <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    24a4:	0089      	lsls	r1, r1, #2
    24a6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    24a8:	2300      	movs	r3, #0
    24aa:	e004      	b.n	24b6 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    24ac:	4283      	cmp	r3, r0
    24ae:	d001      	beq.n	24b4 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    24b0:	231d      	movs	r3, #29
    24b2:	e000      	b.n	24b6 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    24b4:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    24b6:	1c18      	adds	r0, r3, #0
    24b8:	4770      	bx	lr
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	20000098 	.word	0x20000098

000024c0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    24c0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    24c2:	2900      	cmp	r1, #0
    24c4:	d107      	bne.n	24d6 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    24c6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    24c8:	281f      	cmp	r0, #31
    24ca:	d800      	bhi.n	24ce <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    24cc:	4a03      	ldr	r2, [pc, #12]	; (24dc <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    24ce:	2301      	movs	r3, #1
    24d0:	4083      	lsls	r3, r0
    24d2:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    24d4:	2300      	movs	r3, #0
}
    24d6:	1c18      	adds	r0, r3, #0
    24d8:	4770      	bx	lr
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	40001800 	.word	0x40001800

000024e0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    24e0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    24e2:	2200      	movs	r2, #0
    24e4:	4b15      	ldr	r3, [pc, #84]	; (253c <EIC_Handler+0x5c>)
    24e6:	701a      	strb	r2, [r3, #0]
    24e8:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    24ea:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    24ec:	4e14      	ldr	r6, [pc, #80]	; (2540 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    24ee:	4c13      	ldr	r4, [pc, #76]	; (253c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    24f0:	2b1f      	cmp	r3, #31
    24f2:	d919      	bls.n	2528 <EIC_Handler+0x48>
    24f4:	e00f      	b.n	2516 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    24f6:	2100      	movs	r1, #0
    24f8:	e000      	b.n	24fc <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    24fa:	4912      	ldr	r1, [pc, #72]	; (2544 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    24fc:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    24fe:	009b      	lsls	r3, r3, #2
    2500:	599b      	ldr	r3, [r3, r6]
    2502:	2b00      	cmp	r3, #0
    2504:	d000      	beq.n	2508 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2506:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2508:	7823      	ldrb	r3, [r4, #0]
    250a:	3301      	adds	r3, #1
    250c:	b2db      	uxtb	r3, r3
    250e:	7023      	strb	r3, [r4, #0]
    2510:	2b0f      	cmp	r3, #15
    2512:	d9ed      	bls.n	24f0 <EIC_Handler+0x10>
    2514:	e011      	b.n	253a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2516:	1c29      	adds	r1, r5, #0
    2518:	4019      	ands	r1, r3
    251a:	2201      	movs	r2, #1
    251c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    251e:	2100      	movs	r1, #0
    2520:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    2522:	4211      	tst	r1, r2
    2524:	d1e7      	bne.n	24f6 <EIC_Handler+0x16>
    2526:	e7ef      	b.n	2508 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2528:	1c29      	adds	r1, r5, #0
    252a:	4019      	ands	r1, r3
    252c:	2201      	movs	r2, #1
    252e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    2530:	4904      	ldr	r1, [pc, #16]	; (2544 <EIC_Handler+0x64>)
    2532:	6909      	ldr	r1, [r1, #16]
    2534:	4211      	tst	r1, r2
    2536:	d1e0      	bne.n	24fa <EIC_Handler+0x1a>
    2538:	e7e6      	b.n	2508 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    253a:	bd70      	pop	{r4, r5, r6, pc}
    253c:	20000094 	.word	0x20000094
    2540:	20000098 	.word	0x20000098
    2544:	40001800 	.word	0x40001800

00002548 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2548:	4a04      	ldr	r2, [pc, #16]	; (255c <_extint_enable+0x14>)
    254a:	7811      	ldrb	r1, [r2, #0]
    254c:	2302      	movs	r3, #2
    254e:	430b      	orrs	r3, r1
    2550:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2552:	7853      	ldrb	r3, [r2, #1]
    2554:	b25b      	sxtb	r3, r3
    2556:	2b00      	cmp	r3, #0
    2558:	dbfb      	blt.n	2552 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    255a:	4770      	bx	lr
    255c:	40001800 	.word	0x40001800

00002560 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    2560:	b500      	push	{lr}
    2562:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2564:	4a12      	ldr	r2, [pc, #72]	; (25b0 <_system_extint_init+0x50>)
    2566:	6991      	ldr	r1, [r2, #24]
    2568:	2340      	movs	r3, #64	; 0x40
    256a:	430b      	orrs	r3, r1
    256c:	6193      	str	r3, [r2, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    256e:	a901      	add	r1, sp, #4
    2570:	2301      	movs	r3, #1
    2572:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2574:	2003      	movs	r0, #3
    2576:	4b0f      	ldr	r3, [pc, #60]	; (25b4 <_system_extint_init+0x54>)
    2578:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    257a:	2003      	movs	r0, #3
    257c:	4b0e      	ldr	r3, [pc, #56]	; (25b8 <_system_extint_init+0x58>)
    257e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    2580:	4a0e      	ldr	r2, [pc, #56]	; (25bc <_system_extint_init+0x5c>)
    2582:	7811      	ldrb	r1, [r2, #0]
    2584:	2301      	movs	r3, #1
    2586:	430b      	orrs	r3, r1
    2588:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    258a:	7853      	ldrb	r3, [r2, #1]
    258c:	b25b      	sxtb	r3, r3
    258e:	2b00      	cmp	r3, #0
    2590:	dbfb      	blt.n	258a <_system_extint_init+0x2a>
    2592:	4b0b      	ldr	r3, [pc, #44]	; (25c0 <_system_extint_init+0x60>)
    2594:	1c19      	adds	r1, r3, #0
    2596:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    2598:	2200      	movs	r2, #0
    259a:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    259c:	428b      	cmp	r3, r1
    259e:	d1fc      	bne.n	259a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    25a0:	2210      	movs	r2, #16
    25a2:	4b08      	ldr	r3, [pc, #32]	; (25c4 <_system_extint_init+0x64>)
    25a4:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    25a6:	4b08      	ldr	r3, [pc, #32]	; (25c8 <_system_extint_init+0x68>)
    25a8:	4798      	blx	r3
}
    25aa:	b003      	add	sp, #12
    25ac:	bd00      	pop	{pc}
    25ae:	46c0      	nop			; (mov r8, r8)
    25b0:	40000400 	.word	0x40000400
    25b4:	00003465 	.word	0x00003465
    25b8:	000033d9 	.word	0x000033d9
    25bc:	40001800 	.word	0x40001800
    25c0:	20000098 	.word	0x20000098
    25c4:	e000e100 	.word	0xe000e100
    25c8:	00002549 	.word	0x00002549

000025cc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    25cc:	2300      	movs	r3, #0
    25ce:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    25d0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    25d2:	2201      	movs	r2, #1
    25d4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    25d6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    25d8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    25da:	3302      	adds	r3, #2
    25dc:	72c3      	strb	r3, [r0, #11]
}
    25de:	4770      	bx	lr

000025e0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    25e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25e2:	b083      	sub	sp, #12
    25e4:	1c05      	adds	r5, r0, #0
    25e6:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    25e8:	a901      	add	r1, sp, #4
    25ea:	2300      	movs	r3, #0
    25ec:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    25ee:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    25f0:	7923      	ldrb	r3, [r4, #4]
    25f2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    25f4:	7a23      	ldrb	r3, [r4, #8]
    25f6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    25f8:	7820      	ldrb	r0, [r4, #0]
    25fa:	4b15      	ldr	r3, [pc, #84]	; (2650 <extint_chan_set_config+0x70>)
    25fc:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    25fe:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    2600:	2d1f      	cmp	r5, #31
    2602:	d800      	bhi.n	2606 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2604:	4e13      	ldr	r6, [pc, #76]	; (2654 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    2606:	2207      	movs	r2, #7
    2608:	402a      	ands	r2, r5
    260a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    260c:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    260e:	7aa3      	ldrb	r3, [r4, #10]
    2610:	2b00      	cmp	r3, #0
    2612:	d001      	beq.n	2618 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    2614:	2308      	movs	r3, #8
    2616:	4318      	orrs	r0, r3
    2618:	08eb      	lsrs	r3, r5, #3
    261a:	009b      	lsls	r3, r3, #2
    261c:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    261e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    2620:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2622:	270f      	movs	r7, #15
    2624:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2626:	43b9      	bics	r1, r7
    2628:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    262a:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    262c:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    262e:	7a63      	ldrb	r3, [r4, #9]
    2630:	2b00      	cmp	r3, #0
    2632:	d006      	beq.n	2642 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    2634:	6973      	ldr	r3, [r6, #20]
    2636:	2201      	movs	r2, #1
    2638:	40aa      	lsls	r2, r5
    263a:	1c15      	adds	r5, r2, #0
    263c:	431d      	orrs	r5, r3
    263e:	6175      	str	r5, [r6, #20]
    2640:	e004      	b.n	264c <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    2642:	6973      	ldr	r3, [r6, #20]
    2644:	2201      	movs	r2, #1
    2646:	40aa      	lsls	r2, r5
    2648:	4393      	bics	r3, r2
    264a:	6173      	str	r3, [r6, #20]
	}
}
    264c:	b003      	add	sp, #12
    264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2650:	0000355d 	.word	0x0000355d
    2654:	40001800 	.word	0x40001800

00002658 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2658:	b500      	push	{lr}
    265a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    265c:	ab01      	add	r3, sp, #4
    265e:	2280      	movs	r2, #128	; 0x80
    2660:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2662:	780a      	ldrb	r2, [r1, #0]
    2664:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2666:	784a      	ldrb	r2, [r1, #1]
    2668:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    266a:	788a      	ldrb	r2, [r1, #2]
    266c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    266e:	1c19      	adds	r1, r3, #0
    2670:	4b01      	ldr	r3, [pc, #4]	; (2678 <port_pin_set_config+0x20>)
    2672:	4798      	blx	r3
}
    2674:	b003      	add	sp, #12
    2676:	bd00      	pop	{pc}
    2678:	0000355d 	.word	0x0000355d

0000267c <system_board_init>:
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)

{
    267c:	b5f0      	push	{r4, r5, r6, r7, lr}
    267e:	464f      	mov	r7, r9
    2680:	4646      	mov	r6, r8
    2682:	b4c0      	push	{r6, r7}
    2684:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2686:	ac01      	add	r4, sp, #4
    2688:	2701      	movs	r7, #1
    268a:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    268c:	2300      	movs	r3, #0
    268e:	4698      	mov	r8, r3
    2690:	70a3      	strb	r3, [r4, #2]
	
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2692:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(GLED_PIN, &pin_conf);
    2694:	2006      	movs	r0, #6
    2696:	1c21      	adds	r1, r4, #0
    2698:	4d1d      	ldr	r5, [pc, #116]	; (2710 <system_board_init+0x94>)
    269a:	47a8      	blx	r5
	port_pin_set_config(RLED_PIN, &pin_conf);
    269c:	2005      	movs	r0, #5
    269e:	1c21      	adds	r1, r4, #0
    26a0:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    26a2:	4e1c      	ldr	r6, [pc, #112]	; (2714 <system_board_init+0x98>)
    26a4:	2340      	movs	r3, #64	; 0x40
    26a6:	6173      	str	r3, [r6, #20]
    26a8:	3b20      	subs	r3, #32
    26aa:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(GLED_PIN, LOW);
	port_pin_set_output_level(RLED_PIN, LOW);
	
	//Analogue front end
	port_pin_set_config(AFE_ENABLE_PIN, &pin_conf);
    26ac:	201b      	movs	r0, #27
    26ae:	1c21      	adds	r1, r4, #0
    26b0:	47a8      	blx	r5
    26b2:	2380      	movs	r3, #128	; 0x80
    26b4:	051b      	lsls	r3, r3, #20
    26b6:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(AFE_ENABLE_PIN, LOW);
	
	//SD card enable
	port_pin_set_config(SDCARD_ENABLE_PIN, &pin_conf);
    26b8:	2018      	movs	r0, #24
    26ba:	1c21      	adds	r1, r4, #0
    26bc:	47a8      	blx	r5
    26be:	2380      	movs	r3, #128	; 0x80
    26c0:	045b      	lsls	r3, r3, #17
    26c2:	4699      	mov	r9, r3
    26c4:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(SDCARD_ENABLE_PIN, LOW);
	
	//Battsense
	port_pin_set_config(BATTSENSE_ENABLE_PIN, &pin_conf);
    26c6:	2016      	movs	r0, #22
    26c8:	1c21      	adds	r1, r4, #0
    26ca:	47a8      	blx	r5
    26cc:	2380      	movs	r3, #128	; 0x80
    26ce:	03db      	lsls	r3, r3, #15
    26d0:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(BATTSENSE_ENABLE_PIN, LOW);
	
	
	//External addons, like HC06
	port_pin_set_config(EXT_ENABLE_PIN, &pin_conf);
    26d2:	2013      	movs	r0, #19
    26d4:	1c21      	adds	r1, r4, #0
    26d6:	47a8      	blx	r5
    26d8:	2380      	movs	r3, #128	; 0x80
    26da:	031b      	lsls	r3, r3, #12
    26dc:	6173      	str	r3, [r6, #20]
	port_pin_set_output_level(EXT_ENABLE_PIN, LOW);
	
	//Sd card enable (not the same as SS or CS)
	port_pin_set_config(SDCARD_ENABLE_PIN, &pin_conf);
    26de:	2018      	movs	r0, #24
    26e0:	1c21      	adds	r1, r4, #0
    26e2:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    26e4:	464b      	mov	r3, r9
    26e6:	61b3      	str	r3, [r6, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    26e8:	4643      	mov	r3, r8
    26ea:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    26ec:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    26ee:	70a3      	strb	r3, [r4, #2]
	
	//Inputs
	port_get_config_defaults(&pin_conf);
	pin_conf.direction = PORT_PIN_DIR_INPUT;
	
	port_pin_set_config(SW0_PIN, &pin_conf);
    26f0:	2007      	movs	r0, #7
    26f2:	1c21      	adds	r1, r4, #0
    26f4:	47a8      	blx	r5
	port_pin_set_config(CHG_STATUS_PIN, &pin_conf);
    26f6:	2017      	movs	r0, #23
    26f8:	1c21      	adds	r1, r4, #0
    26fa:	47a8      	blx	r5
	
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    26fc:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(EXT_STATUS_PIN, &pin_conf);
    26fe:	2012      	movs	r0, #18
    2700:	1c21      	adds	r1, r4, #0
    2702:	47a8      	blx	r5
			
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2704:	b003      	add	sp, #12
    2706:	bc0c      	pop	{r2, r3}
    2708:	4690      	mov	r8, r2
    270a:	4699      	mov	r9, r3
    270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	00002659 	.word	0x00002659
    2714:	41004400 	.word	0x41004400

00002718 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2718:	4b0c      	ldr	r3, [pc, #48]	; (274c <cpu_irq_enter_critical+0x34>)
    271a:	681b      	ldr	r3, [r3, #0]
    271c:	2b00      	cmp	r3, #0
    271e:	d110      	bne.n	2742 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2720:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2724:	2b00      	cmp	r3, #0
    2726:	d109      	bne.n	273c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2728:	b672      	cpsid	i
    272a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    272e:	2200      	movs	r2, #0
    2730:	4b07      	ldr	r3, [pc, #28]	; (2750 <cpu_irq_enter_critical+0x38>)
    2732:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2734:	3201      	adds	r2, #1
    2736:	4b07      	ldr	r3, [pc, #28]	; (2754 <cpu_irq_enter_critical+0x3c>)
    2738:	701a      	strb	r2, [r3, #0]
    273a:	e002      	b.n	2742 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    273c:	2200      	movs	r2, #0
    273e:	4b05      	ldr	r3, [pc, #20]	; (2754 <cpu_irq_enter_critical+0x3c>)
    2740:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2742:	4a02      	ldr	r2, [pc, #8]	; (274c <cpu_irq_enter_critical+0x34>)
    2744:	6813      	ldr	r3, [r2, #0]
    2746:	3301      	adds	r3, #1
    2748:	6013      	str	r3, [r2, #0]
}
    274a:	4770      	bx	lr
    274c:	2000004c 	.word	0x2000004c
    2750:	20000020 	.word	0x20000020
    2754:	20000050 	.word	0x20000050

00002758 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2758:	4b08      	ldr	r3, [pc, #32]	; (277c <cpu_irq_leave_critical+0x24>)
    275a:	681a      	ldr	r2, [r3, #0]
    275c:	3a01      	subs	r2, #1
    275e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2760:	681b      	ldr	r3, [r3, #0]
    2762:	2b00      	cmp	r3, #0
    2764:	d109      	bne.n	277a <cpu_irq_leave_critical+0x22>
    2766:	4b06      	ldr	r3, [pc, #24]	; (2780 <cpu_irq_leave_critical+0x28>)
    2768:	781b      	ldrb	r3, [r3, #0]
    276a:	2b00      	cmp	r3, #0
    276c:	d005      	beq.n	277a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    276e:	2201      	movs	r2, #1
    2770:	4b04      	ldr	r3, [pc, #16]	; (2784 <cpu_irq_leave_critical+0x2c>)
    2772:	701a      	strb	r2, [r3, #0]
    2774:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2778:	b662      	cpsie	i
	}
}
    277a:	4770      	bx	lr
    277c:	2000004c 	.word	0x2000004c
    2780:	20000050 	.word	0x20000050
    2784:	20000020 	.word	0x20000020

00002788 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2788:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    278a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    278c:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    278e:	4281      	cmp	r1, r0
    2790:	d30c      	bcc.n	27ac <_sercom_get_sync_baud_val+0x24>
    2792:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    2794:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2796:	3301      	adds	r3, #1
    2798:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    279a:	4288      	cmp	r0, r1
    279c:	d9fa      	bls.n	2794 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    279e:	3b01      	subs	r3, #1
    27a0:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    27a2:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    27a4:	2bff      	cmp	r3, #255	; 0xff
    27a6:	d801      	bhi.n	27ac <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    27a8:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    27aa:	2400      	movs	r4, #0
	}
}
    27ac:	1c20      	adds	r0, r4, #0
    27ae:	bd10      	pop	{r4, pc}

000027b0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    27b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27b2:	465f      	mov	r7, fp
    27b4:	4656      	mov	r6, sl
    27b6:	464d      	mov	r5, r9
    27b8:	4644      	mov	r4, r8
    27ba:	b4f0      	push	{r4, r5, r6, r7}
    27bc:	b089      	sub	sp, #36	; 0x24
    27be:	1c1c      	adds	r4, r3, #0
    27c0:	ab12      	add	r3, sp, #72	; 0x48
    27c2:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    27c4:	1c06      	adds	r6, r0, #0
    27c6:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    27c8:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    27ca:	428e      	cmp	r6, r1
    27cc:	d900      	bls.n	27d0 <_sercom_get_async_baud_val+0x20>
    27ce:	e0c7      	b.n	2960 <_sercom_get_async_baud_val+0x1b0>
    27d0:	1c25      	adds	r5, r4, #0
    27d2:	9207      	str	r2, [sp, #28]
    27d4:	1c0c      	adds	r4, r1, #0
    27d6:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    27d8:	2d00      	cmp	r5, #0
    27da:	d151      	bne.n	2880 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    27dc:	1c18      	adds	r0, r3, #0
    27de:	2100      	movs	r1, #0
    27e0:	2300      	movs	r3, #0
    27e2:	4d63      	ldr	r5, [pc, #396]	; (2970 <_sercom_get_async_baud_val+0x1c0>)
    27e4:	47a8      	blx	r5
    27e6:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    27e8:	1c26      	adds	r6, r4, #0
    27ea:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    27ec:	2300      	movs	r3, #0
    27ee:	2400      	movs	r4, #0
    27f0:	9302      	str	r3, [sp, #8]
    27f2:	9403      	str	r4, [sp, #12]
    27f4:	2200      	movs	r2, #0
    27f6:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    27f8:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    27fa:	2120      	movs	r1, #32
    27fc:	468c      	mov	ip, r1
    27fe:	391f      	subs	r1, #31
    2800:	9600      	str	r6, [sp, #0]
    2802:	9701      	str	r7, [sp, #4]
    2804:	2420      	movs	r4, #32
    2806:	4264      	negs	r4, r4
    2808:	1904      	adds	r4, r0, r4
    280a:	d403      	bmi.n	2814 <_sercom_get_async_baud_val+0x64>
    280c:	1c0d      	adds	r5, r1, #0
    280e:	40a5      	lsls	r5, r4
    2810:	46a8      	mov	r8, r5
    2812:	e004      	b.n	281e <_sercom_get_async_baud_val+0x6e>
    2814:	4664      	mov	r4, ip
    2816:	1a24      	subs	r4, r4, r0
    2818:	1c0d      	adds	r5, r1, #0
    281a:	40e5      	lsrs	r5, r4
    281c:	46a8      	mov	r8, r5
    281e:	1c0c      	adds	r4, r1, #0
    2820:	4084      	lsls	r4, r0
    2822:	46a1      	mov	r9, r4

		r = r << 1;
    2824:	1c14      	adds	r4, r2, #0
    2826:	1c1d      	adds	r5, r3, #0
    2828:	18a4      	adds	r4, r4, r2
    282a:	415d      	adcs	r5, r3
    282c:	1c22      	adds	r2, r4, #0
    282e:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
    2830:	465e      	mov	r6, fp
    2832:	4647      	mov	r7, r8
    2834:	423e      	tst	r6, r7
    2836:	d003      	beq.n	2840 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
    2838:	1c0e      	adds	r6, r1, #0
    283a:	4326      	orrs	r6, r4
    283c:	1c32      	adds	r2, r6, #0
    283e:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
    2840:	9c01      	ldr	r4, [sp, #4]
    2842:	429c      	cmp	r4, r3
    2844:	d810      	bhi.n	2868 <_sercom_get_async_baud_val+0xb8>
    2846:	d102      	bne.n	284e <_sercom_get_async_baud_val+0x9e>
    2848:	9c00      	ldr	r4, [sp, #0]
    284a:	4294      	cmp	r4, r2
    284c:	d80c      	bhi.n	2868 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
    284e:	9c00      	ldr	r4, [sp, #0]
    2850:	9d01      	ldr	r5, [sp, #4]
    2852:	1b12      	subs	r2, r2, r4
    2854:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    2856:	464d      	mov	r5, r9
    2858:	9e02      	ldr	r6, [sp, #8]
    285a:	9f03      	ldr	r7, [sp, #12]
    285c:	4335      	orrs	r5, r6
    285e:	1c3c      	adds	r4, r7, #0
    2860:	4646      	mov	r6, r8
    2862:	4334      	orrs	r4, r6
    2864:	9502      	str	r5, [sp, #8]
    2866:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    2868:	3801      	subs	r0, #1
    286a:	d2cb      	bcs.n	2804 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    286c:	2200      	movs	r2, #0
    286e:	2301      	movs	r3, #1
    2870:	9802      	ldr	r0, [sp, #8]
    2872:	9903      	ldr	r1, [sp, #12]
    2874:	1a12      	subs	r2, r2, r0
    2876:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    2878:	0c11      	lsrs	r1, r2, #16
    287a:	041b      	lsls	r3, r3, #16
    287c:	4319      	orrs	r1, r3
    287e:	e06c      	b.n	295a <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    2880:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2882:	2d01      	cmp	r5, #1
    2884:	d169      	bne.n	295a <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    2886:	0f61      	lsrs	r1, r4, #29
    2888:	1c0f      	adds	r7, r1, #0
    288a:	00e1      	lsls	r1, r4, #3
    288c:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
    288e:	1c18      	adds	r0, r3, #0
    2890:	2100      	movs	r1, #0
    2892:	2300      	movs	r3, #0
    2894:	4c36      	ldr	r4, [pc, #216]	; (2970 <_sercom_get_async_baud_val+0x1c0>)
    2896:	47a0      	blx	r4
    2898:	1c04      	adds	r4, r0, #0
    289a:	1c0d      	adds	r5, r1, #0
    289c:	2300      	movs	r3, #0
    289e:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    28a0:	3320      	adds	r3, #32
    28a2:	469b      	mov	fp, r3
    28a4:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    28a6:	4663      	mov	r3, ip
    28a8:	9305      	str	r3, [sp, #20]
    28aa:	46b9      	mov	r9, r7
    28ac:	466b      	mov	r3, sp
    28ae:	7d1b      	ldrb	r3, [r3, #20]
    28b0:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    28b2:	2300      	movs	r3, #0
    28b4:	469c      	mov	ip, r3
    28b6:	2000      	movs	r0, #0
    28b8:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    28ba:	223f      	movs	r2, #63	; 0x3f
    28bc:	9400      	str	r4, [sp, #0]
    28be:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
    28c0:	2320      	movs	r3, #32
    28c2:	425b      	negs	r3, r3
    28c4:	18d3      	adds	r3, r2, r3
    28c6:	d403      	bmi.n	28d0 <_sercom_get_async_baud_val+0x120>
    28c8:	1c34      	adds	r4, r6, #0
    28ca:	409c      	lsls	r4, r3
    28cc:	1c23      	adds	r3, r4, #0
    28ce:	e004      	b.n	28da <_sercom_get_async_baud_val+0x12a>
    28d0:	465b      	mov	r3, fp
    28d2:	1a9b      	subs	r3, r3, r2
    28d4:	1c34      	adds	r4, r6, #0
    28d6:	40dc      	lsrs	r4, r3
    28d8:	1c23      	adds	r3, r4, #0
    28da:	1c37      	adds	r7, r6, #0
    28dc:	4097      	lsls	r7, r2

		r = r << 1;
    28de:	1c04      	adds	r4, r0, #0
    28e0:	1c0d      	adds	r5, r1, #0
    28e2:	1824      	adds	r4, r4, r0
    28e4:	414d      	adcs	r5, r1
    28e6:	1c20      	adds	r0, r4, #0
    28e8:	1c29      	adds	r1, r5, #0
    28ea:	9002      	str	r0, [sp, #8]
    28ec:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
    28ee:	4644      	mov	r4, r8
    28f0:	403c      	ands	r4, r7
    28f2:	46a2      	mov	sl, r4
    28f4:	464c      	mov	r4, r9
    28f6:	4023      	ands	r3, r4
    28f8:	4654      	mov	r4, sl
    28fa:	4323      	orrs	r3, r4
    28fc:	d005      	beq.n	290a <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
    28fe:	9b02      	ldr	r3, [sp, #8]
    2900:	9c03      	ldr	r4, [sp, #12]
    2902:	1c1d      	adds	r5, r3, #0
    2904:	4335      	orrs	r5, r6
    2906:	1c28      	adds	r0, r5, #0
    2908:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
    290a:	9b01      	ldr	r3, [sp, #4]
    290c:	428b      	cmp	r3, r1
    290e:	d80a      	bhi.n	2926 <_sercom_get_async_baud_val+0x176>
    2910:	d102      	bne.n	2918 <_sercom_get_async_baud_val+0x168>
    2912:	9b00      	ldr	r3, [sp, #0]
    2914:	4283      	cmp	r3, r0
    2916:	d806      	bhi.n	2926 <_sercom_get_async_baud_val+0x176>
			r = r - d;
    2918:	9b00      	ldr	r3, [sp, #0]
    291a:	9c01      	ldr	r4, [sp, #4]
    291c:	1ac0      	subs	r0, r0, r3
    291e:	41a1      	sbcs	r1, r4
			q |= bit_shift;
    2920:	4663      	mov	r3, ip
    2922:	433b      	orrs	r3, r7
    2924:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    2926:	3a01      	subs	r2, #1
    2928:	d2ca      	bcs.n	28c0 <_sercom_get_async_baud_val+0x110>
    292a:	9c00      	ldr	r4, [sp, #0]
    292c:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    292e:	4662      	mov	r2, ip
    2930:	9905      	ldr	r1, [sp, #20]
    2932:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
    2934:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    2936:	4a0f      	ldr	r2, [pc, #60]	; (2974 <_sercom_get_async_baud_val+0x1c4>)
    2938:	4293      	cmp	r3, r2
    293a:	d908      	bls.n	294e <_sercom_get_async_baud_val+0x19e>
    293c:	9a06      	ldr	r2, [sp, #24]
    293e:	3201      	adds	r2, #1
    2940:	b2d2      	uxtb	r2, r2
    2942:	9206      	str	r2, [sp, #24]
    2944:	1c0a      	adds	r2, r1, #0
    2946:	3201      	adds	r2, #1
    2948:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    294a:	2a08      	cmp	r2, #8
    294c:	d1ae      	bne.n	28ac <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    294e:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    2950:	9a06      	ldr	r2, [sp, #24]
    2952:	2a08      	cmp	r2, #8
    2954:	d004      	beq.n	2960 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    2956:	0351      	lsls	r1, r2, #13
    2958:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
    295a:	9b07      	ldr	r3, [sp, #28]
    295c:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
    295e:	2500      	movs	r5, #0
}
    2960:	1c28      	adds	r0, r5, #0
    2962:	b009      	add	sp, #36	; 0x24
    2964:	bc3c      	pop	{r2, r3, r4, r5}
    2966:	4690      	mov	r8, r2
    2968:	4699      	mov	r9, r3
    296a:	46a2      	mov	sl, r4
    296c:	46ab      	mov	fp, r5
    296e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2970:	000046c5 	.word	0x000046c5
    2974:	00001fff 	.word	0x00001fff

00002978 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2978:	b510      	push	{r4, lr}
    297a:	b082      	sub	sp, #8
    297c:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    297e:	4b0e      	ldr	r3, [pc, #56]	; (29b8 <sercom_set_gclk_generator+0x40>)
    2980:	781b      	ldrb	r3, [r3, #0]
    2982:	2b00      	cmp	r3, #0
    2984:	d001      	beq.n	298a <sercom_set_gclk_generator+0x12>
    2986:	2900      	cmp	r1, #0
    2988:	d00d      	beq.n	29a6 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    298a:	a901      	add	r1, sp, #4
    298c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    298e:	200c      	movs	r0, #12
    2990:	4b0a      	ldr	r3, [pc, #40]	; (29bc <sercom_set_gclk_generator+0x44>)
    2992:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2994:	200c      	movs	r0, #12
    2996:	4b0a      	ldr	r3, [pc, #40]	; (29c0 <sercom_set_gclk_generator+0x48>)
    2998:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    299a:	4b07      	ldr	r3, [pc, #28]	; (29b8 <sercom_set_gclk_generator+0x40>)
    299c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    299e:	2201      	movs	r2, #1
    29a0:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    29a2:	2000      	movs	r0, #0
    29a4:	e006      	b.n	29b4 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    29a6:	4b04      	ldr	r3, [pc, #16]	; (29b8 <sercom_set_gclk_generator+0x40>)
    29a8:	785b      	ldrb	r3, [r3, #1]
    29aa:	4283      	cmp	r3, r0
    29ac:	d001      	beq.n	29b2 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    29ae:	201d      	movs	r0, #29
    29b0:	e000      	b.n	29b4 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    29b2:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    29b4:	b002      	add	sp, #8
    29b6:	bd10      	pop	{r4, pc}
    29b8:	20000054 	.word	0x20000054
    29bc:	00003465 	.word	0x00003465
    29c0:	000033d9 	.word	0x000033d9

000029c4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    29c4:	4b2e      	ldr	r3, [pc, #184]	; (2a80 <_sercom_get_default_pad+0xbc>)
    29c6:	4298      	cmp	r0, r3
    29c8:	d01c      	beq.n	2a04 <_sercom_get_default_pad+0x40>
    29ca:	d803      	bhi.n	29d4 <_sercom_get_default_pad+0x10>
    29cc:	4b2d      	ldr	r3, [pc, #180]	; (2a84 <_sercom_get_default_pad+0xc0>)
    29ce:	4298      	cmp	r0, r3
    29d0:	d007      	beq.n	29e2 <_sercom_get_default_pad+0x1e>
    29d2:	e04a      	b.n	2a6a <_sercom_get_default_pad+0xa6>
    29d4:	4b2c      	ldr	r3, [pc, #176]	; (2a88 <_sercom_get_default_pad+0xc4>)
    29d6:	4298      	cmp	r0, r3
    29d8:	d025      	beq.n	2a26 <_sercom_get_default_pad+0x62>
    29da:	4b2c      	ldr	r3, [pc, #176]	; (2a8c <_sercom_get_default_pad+0xc8>)
    29dc:	4298      	cmp	r0, r3
    29de:	d033      	beq.n	2a48 <_sercom_get_default_pad+0x84>
    29e0:	e043      	b.n	2a6a <_sercom_get_default_pad+0xa6>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    29e2:	2901      	cmp	r1, #1
    29e4:	d006      	beq.n	29f4 <_sercom_get_default_pad+0x30>
    29e6:	2900      	cmp	r1, #0
    29e8:	d041      	beq.n	2a6e <_sercom_get_default_pad+0xaa>
    29ea:	2902      	cmp	r1, #2
    29ec:	d006      	beq.n	29fc <_sercom_get_default_pad+0x38>
    29ee:	2903      	cmp	r1, #3
    29f0:	d006      	beq.n	2a00 <_sercom_get_default_pad+0x3c>
    29f2:	e001      	b.n	29f8 <_sercom_get_default_pad+0x34>
    29f4:	4826      	ldr	r0, [pc, #152]	; (2a90 <_sercom_get_default_pad+0xcc>)
    29f6:	e041      	b.n	2a7c <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
    29f8:	2000      	movs	r0, #0
    29fa:	e03f      	b.n	2a7c <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    29fc:	4825      	ldr	r0, [pc, #148]	; (2a94 <_sercom_get_default_pad+0xd0>)
    29fe:	e03d      	b.n	2a7c <_sercom_get_default_pad+0xb8>
    2a00:	4825      	ldr	r0, [pc, #148]	; (2a98 <_sercom_get_default_pad+0xd4>)
    2a02:	e03b      	b.n	2a7c <_sercom_get_default_pad+0xb8>
    2a04:	2901      	cmp	r1, #1
    2a06:	d006      	beq.n	2a16 <_sercom_get_default_pad+0x52>
    2a08:	2900      	cmp	r1, #0
    2a0a:	d032      	beq.n	2a72 <_sercom_get_default_pad+0xae>
    2a0c:	2902      	cmp	r1, #2
    2a0e:	d006      	beq.n	2a1e <_sercom_get_default_pad+0x5a>
    2a10:	2903      	cmp	r1, #3
    2a12:	d006      	beq.n	2a22 <_sercom_get_default_pad+0x5e>
    2a14:	e001      	b.n	2a1a <_sercom_get_default_pad+0x56>
    2a16:	4821      	ldr	r0, [pc, #132]	; (2a9c <_sercom_get_default_pad+0xd8>)
    2a18:	e030      	b.n	2a7c <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
    2a1a:	2000      	movs	r0, #0
    2a1c:	e02e      	b.n	2a7c <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a1e:	4820      	ldr	r0, [pc, #128]	; (2aa0 <_sercom_get_default_pad+0xdc>)
    2a20:	e02c      	b.n	2a7c <_sercom_get_default_pad+0xb8>
    2a22:	4820      	ldr	r0, [pc, #128]	; (2aa4 <_sercom_get_default_pad+0xe0>)
    2a24:	e02a      	b.n	2a7c <_sercom_get_default_pad+0xb8>
    2a26:	2901      	cmp	r1, #1
    2a28:	d006      	beq.n	2a38 <_sercom_get_default_pad+0x74>
    2a2a:	2900      	cmp	r1, #0
    2a2c:	d023      	beq.n	2a76 <_sercom_get_default_pad+0xb2>
    2a2e:	2902      	cmp	r1, #2
    2a30:	d006      	beq.n	2a40 <_sercom_get_default_pad+0x7c>
    2a32:	2903      	cmp	r1, #3
    2a34:	d006      	beq.n	2a44 <_sercom_get_default_pad+0x80>
    2a36:	e001      	b.n	2a3c <_sercom_get_default_pad+0x78>
    2a38:	481b      	ldr	r0, [pc, #108]	; (2aa8 <_sercom_get_default_pad+0xe4>)
    2a3a:	e01f      	b.n	2a7c <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
    2a3c:	2000      	movs	r0, #0
    2a3e:	e01d      	b.n	2a7c <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a40:	481a      	ldr	r0, [pc, #104]	; (2aac <_sercom_get_default_pad+0xe8>)
    2a42:	e01b      	b.n	2a7c <_sercom_get_default_pad+0xb8>
    2a44:	481a      	ldr	r0, [pc, #104]	; (2ab0 <_sercom_get_default_pad+0xec>)
    2a46:	e019      	b.n	2a7c <_sercom_get_default_pad+0xb8>
    2a48:	2901      	cmp	r1, #1
    2a4a:	d006      	beq.n	2a5a <_sercom_get_default_pad+0x96>
    2a4c:	2900      	cmp	r1, #0
    2a4e:	d014      	beq.n	2a7a <_sercom_get_default_pad+0xb6>
    2a50:	2902      	cmp	r1, #2
    2a52:	d006      	beq.n	2a62 <_sercom_get_default_pad+0x9e>
    2a54:	2903      	cmp	r1, #3
    2a56:	d006      	beq.n	2a66 <_sercom_get_default_pad+0xa2>
    2a58:	e001      	b.n	2a5e <_sercom_get_default_pad+0x9a>
    2a5a:	4816      	ldr	r0, [pc, #88]	; (2ab4 <_sercom_get_default_pad+0xf0>)
    2a5c:	e00e      	b.n	2a7c <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
    2a5e:	2000      	movs	r0, #0
    2a60:	e00c      	b.n	2a7c <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a62:	4815      	ldr	r0, [pc, #84]	; (2ab8 <_sercom_get_default_pad+0xf4>)
    2a64:	e00a      	b.n	2a7c <_sercom_get_default_pad+0xb8>
    2a66:	4815      	ldr	r0, [pc, #84]	; (2abc <_sercom_get_default_pad+0xf8>)
    2a68:	e008      	b.n	2a7c <_sercom_get_default_pad+0xb8>
	}

	Assert(false);
	return 0;
    2a6a:	2000      	movs	r0, #0
    2a6c:	e006      	b.n	2a7c <_sercom_get_default_pad+0xb8>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2a6e:	4814      	ldr	r0, [pc, #80]	; (2ac0 <_sercom_get_default_pad+0xfc>)
    2a70:	e004      	b.n	2a7c <_sercom_get_default_pad+0xb8>
    2a72:	2003      	movs	r0, #3
    2a74:	e002      	b.n	2a7c <_sercom_get_default_pad+0xb8>
    2a76:	4813      	ldr	r0, [pc, #76]	; (2ac4 <_sercom_get_default_pad+0x100>)
    2a78:	e000      	b.n	2a7c <_sercom_get_default_pad+0xb8>
    2a7a:	4813      	ldr	r0, [pc, #76]	; (2ac8 <_sercom_get_default_pad+0x104>)
	}

	Assert(false);
	return 0;
}
    2a7c:	4770      	bx	lr
    2a7e:	46c0      	nop			; (mov r8, r8)
    2a80:	42000c00 	.word	0x42000c00
    2a84:	42000800 	.word	0x42000800
    2a88:	42001000 	.word	0x42001000
    2a8c:	42001400 	.word	0x42001400
    2a90:	00050003 	.word	0x00050003
    2a94:	00060003 	.word	0x00060003
    2a98:	00070003 	.word	0x00070003
    2a9c:	00010003 	.word	0x00010003
    2aa0:	001e0003 	.word	0x001e0003
    2aa4:	001f0003 	.word	0x001f0003
    2aa8:	00090003 	.word	0x00090003
    2aac:	000a0003 	.word	0x000a0003
    2ab0:	000b0003 	.word	0x000b0003
    2ab4:	00110003 	.word	0x00110003
    2ab8:	00120003 	.word	0x00120003
    2abc:	00130003 	.word	0x00130003
    2ac0:	00040003 	.word	0x00040003
    2ac4:	00080003 	.word	0x00080003
    2ac8:	00100003 	.word	0x00100003

00002acc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2acc:	b530      	push	{r4, r5, lr}
    2ace:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2ad0:	466a      	mov	r2, sp
    2ad2:	4b0e      	ldr	r3, [pc, #56]	; (2b0c <_sercom_get_sercom_inst_index+0x40>)
    2ad4:	cb32      	ldmia	r3!, {r1, r4, r5}
    2ad6:	c232      	stmia	r2!, {r1, r4, r5}
    2ad8:	681b      	ldr	r3, [r3, #0]
    2ada:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2adc:	1c03      	adds	r3, r0, #0
    2ade:	9a00      	ldr	r2, [sp, #0]
    2ae0:	4282      	cmp	r2, r0
    2ae2:	d00f      	beq.n	2b04 <_sercom_get_sercom_inst_index+0x38>
    2ae4:	9a01      	ldr	r2, [sp, #4]
    2ae6:	4282      	cmp	r2, r0
    2ae8:	d008      	beq.n	2afc <_sercom_get_sercom_inst_index+0x30>
    2aea:	9a02      	ldr	r2, [sp, #8]
    2aec:	4282      	cmp	r2, r0
    2aee:	d007      	beq.n	2b00 <_sercom_get_sercom_inst_index+0x34>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2af0:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2af2:	9a03      	ldr	r2, [sp, #12]
    2af4:	429a      	cmp	r2, r3
    2af6:	d107      	bne.n	2b08 <_sercom_get_sercom_inst_index+0x3c>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2af8:	3003      	adds	r0, #3
    2afa:	e004      	b.n	2b06 <_sercom_get_sercom_inst_index+0x3a>
    2afc:	2001      	movs	r0, #1
    2afe:	e002      	b.n	2b06 <_sercom_get_sercom_inst_index+0x3a>
    2b00:	2002      	movs	r0, #2
    2b02:	e000      	b.n	2b06 <_sercom_get_sercom_inst_index+0x3a>
    2b04:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    2b06:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
    2b08:	b005      	add	sp, #20
    2b0a:	bd30      	pop	{r4, r5, pc}
    2b0c:	0000492c 	.word	0x0000492c

00002b10 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2b10:	4770      	bx	lr
    2b12:	46c0      	nop			; (mov r8, r8)

00002b14 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2b14:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2b16:	4b0b      	ldr	r3, [pc, #44]	; (2b44 <_sercom_set_handler+0x30>)
    2b18:	781b      	ldrb	r3, [r3, #0]
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d10e      	bne.n	2b3c <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2b1e:	4c0a      	ldr	r4, [pc, #40]	; (2b48 <_sercom_set_handler+0x34>)
    2b20:	4d0a      	ldr	r5, [pc, #40]	; (2b4c <_sercom_set_handler+0x38>)
    2b22:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    2b24:	4b0a      	ldr	r3, [pc, #40]	; (2b50 <_sercom_set_handler+0x3c>)
    2b26:	2200      	movs	r2, #0
    2b28:	601a      	str	r2, [r3, #0]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2b2a:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    2b2c:	605a      	str	r2, [r3, #4]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2b2e:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    2b30:	609a      	str	r2, [r3, #8]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2b32:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
    2b34:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
    2b36:	3201      	adds	r2, #1
    2b38:	4b02      	ldr	r3, [pc, #8]	; (2b44 <_sercom_set_handler+0x30>)
    2b3a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2b3c:	0080      	lsls	r0, r0, #2
    2b3e:	4b02      	ldr	r3, [pc, #8]	; (2b48 <_sercom_set_handler+0x34>)
    2b40:	50c1      	str	r1, [r0, r3]
}
    2b42:	bd30      	pop	{r4, r5, pc}
    2b44:	20000056 	.word	0x20000056
    2b48:	20000058 	.word	0x20000058
    2b4c:	00002b11 	.word	0x00002b11
    2b50:	200000d8 	.word	0x200000d8

00002b54 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2b54:	b530      	push	{r4, r5, lr}
    2b56:	b083      	sub	sp, #12
    2b58:	1c05      	adds	r5, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2b5a:	ac01      	add	r4, sp, #4
    2b5c:	1c20      	adds	r0, r4, #0
    2b5e:	4905      	ldr	r1, [pc, #20]	; (2b74 <_sercom_get_interrupt_vector+0x20>)
    2b60:	2204      	movs	r2, #4
    2b62:	4b05      	ldr	r3, [pc, #20]	; (2b78 <_sercom_get_interrupt_vector+0x24>)
    2b64:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2b66:	1c28      	adds	r0, r5, #0
    2b68:	4b04      	ldr	r3, [pc, #16]	; (2b7c <_sercom_get_interrupt_vector+0x28>)
    2b6a:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2b6c:	5620      	ldrsb	r0, [r4, r0]
}
    2b6e:	b003      	add	sp, #12
    2b70:	bd30      	pop	{r4, r5, pc}
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	0000493c 	.word	0x0000493c
    2b78:	00004765 	.word	0x00004765
    2b7c:	00002acd 	.word	0x00002acd

00002b80 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2b80:	b508      	push	{r3, lr}
    2b82:	4b02      	ldr	r3, [pc, #8]	; (2b8c <SERCOM0_Handler+0xc>)
    2b84:	681b      	ldr	r3, [r3, #0]
    2b86:	2000      	movs	r0, #0
    2b88:	4798      	blx	r3
    2b8a:	bd08      	pop	{r3, pc}
    2b8c:	20000058 	.word	0x20000058

00002b90 <SERCOM1_Handler>:
    2b90:	b508      	push	{r3, lr}
    2b92:	4b02      	ldr	r3, [pc, #8]	; (2b9c <SERCOM1_Handler+0xc>)
    2b94:	685b      	ldr	r3, [r3, #4]
    2b96:	2001      	movs	r0, #1
    2b98:	4798      	blx	r3
    2b9a:	bd08      	pop	{r3, pc}
    2b9c:	20000058 	.word	0x20000058

00002ba0 <SERCOM2_Handler>:
    2ba0:	b508      	push	{r3, lr}
    2ba2:	4b02      	ldr	r3, [pc, #8]	; (2bac <SERCOM2_Handler+0xc>)
    2ba4:	689b      	ldr	r3, [r3, #8]
    2ba6:	2002      	movs	r0, #2
    2ba8:	4798      	blx	r3
    2baa:	bd08      	pop	{r3, pc}
    2bac:	20000058 	.word	0x20000058

00002bb0 <SERCOM3_Handler>:
    2bb0:	b508      	push	{r3, lr}
    2bb2:	4b02      	ldr	r3, [pc, #8]	; (2bbc <SERCOM3_Handler+0xc>)
    2bb4:	68db      	ldr	r3, [r3, #12]
    2bb6:	2003      	movs	r0, #3
    2bb8:	4798      	blx	r3
    2bba:	bd08      	pop	{r3, pc}
    2bbc:	20000058 	.word	0x20000058

00002bc0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bc2:	465f      	mov	r7, fp
    2bc4:	4656      	mov	r6, sl
    2bc6:	464d      	mov	r5, r9
    2bc8:	4644      	mov	r4, r8
    2bca:	b4f0      	push	{r4, r5, r6, r7}
    2bcc:	b08d      	sub	sp, #52	; 0x34
    2bce:	1c05      	adds	r5, r0, #0
    2bd0:	1c0c      	adds	r4, r1, #0
    2bd2:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2bd4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2bd6:	1c08      	adds	r0, r1, #0
    2bd8:	4b82      	ldr	r3, [pc, #520]	; (2de4 <usart_init+0x224>)
    2bda:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2bdc:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2bde:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2be0:	07d2      	lsls	r2, r2, #31
    2be2:	d500      	bpl.n	2be6 <usart_init+0x26>
    2be4:	e0f5      	b.n	2dd2 <usart_init+0x212>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2be6:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2be8:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2bea:	0792      	lsls	r2, r2, #30
    2bec:	d500      	bpl.n	2bf0 <usart_init+0x30>
    2bee:	e0f0      	b.n	2dd2 <usart_init+0x212>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2bf0:	497d      	ldr	r1, [pc, #500]	; (2de8 <usart_init+0x228>)
    2bf2:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2bf4:	1c87      	adds	r7, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2bf6:	3b1b      	subs	r3, #27
    2bf8:	40bb      	lsls	r3, r7
    2bfa:	4313      	orrs	r3, r2
    2bfc:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2bfe:	a90b      	add	r1, sp, #44	; 0x2c
    2c00:	7f73      	ldrb	r3, [r6, #29]
    2c02:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2c04:	300d      	adds	r0, #13

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2c06:	b2c7      	uxtb	r7, r0
    2c08:	1c38      	adds	r0, r7, #0
    2c0a:	4b78      	ldr	r3, [pc, #480]	; (2dec <usart_init+0x22c>)
    2c0c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2c0e:	1c38      	adds	r0, r7, #0
    2c10:	4b77      	ldr	r3, [pc, #476]	; (2df0 <usart_init+0x230>)
    2c12:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2c14:	7f70      	ldrb	r0, [r6, #29]
    2c16:	2100      	movs	r1, #0
    2c18:	4b76      	ldr	r3, [pc, #472]	; (2df4 <usart_init+0x234>)
    2c1a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    2c1c:	7af3      	ldrb	r3, [r6, #11]
    2c1e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    2c20:	7d33      	ldrb	r3, [r6, #20]
    2c22:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2c24:	7d73      	ldrb	r3, [r6, #21]
    2c26:	71eb      	strb	r3, [r5, #7]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c28:	682b      	ldr	r3, [r5, #0]
    2c2a:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2c2c:	1c18      	adds	r0, r3, #0
    2c2e:	4b6d      	ldr	r3, [pc, #436]	; (2de4 <usart_init+0x224>)
    2c30:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2c32:	300d      	adds	r0, #13
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2c34:	2200      	movs	r2, #0
    2c36:	230e      	movs	r3, #14
    2c38:	a902      	add	r1, sp, #8
    2c3a:	468c      	mov	ip, r1
    2c3c:	4463      	add	r3, ip
    2c3e:	801a      	strh	r2, [r3, #0]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2c40:	6833      	ldr	r3, [r6, #0]
    2c42:	469a      	mov	sl, r3
		(uint32_t)config->mux_setting |
    2c44:	68f3      	ldr	r3, [r6, #12]
    2c46:	469b      	mov	fp, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2c48:	7db3      	ldrb	r3, [r6, #22]
    2c4a:	9302      	str	r3, [sp, #8]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    2c4c:	6872      	ldr	r2, [r6, #4]
    2c4e:	9203      	str	r2, [sp, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2c50:	2a00      	cmp	r2, #0
    2c52:	d014      	beq.n	2c7e <usart_init+0xbe>
    2c54:	2380      	movs	r3, #128	; 0x80
    2c56:	055b      	lsls	r3, r3, #21
    2c58:	429a      	cmp	r2, r3
    2c5a:	d130      	bne.n	2cbe <usart_init+0xfe>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2c5c:	7df3      	ldrb	r3, [r6, #23]
    2c5e:	2b00      	cmp	r3, #0
    2c60:	d131      	bne.n	2cc6 <usart_init+0x106>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2c62:	6933      	ldr	r3, [r6, #16]
    2c64:	4698      	mov	r8, r3
    2c66:	b2c0      	uxtb	r0, r0
    2c68:	4b63      	ldr	r3, [pc, #396]	; (2df8 <usart_init+0x238>)
    2c6a:	4798      	blx	r3
    2c6c:	1c01      	adds	r1, r0, #0
    2c6e:	4640      	mov	r0, r8
    2c70:	220e      	movs	r2, #14
    2c72:	ab02      	add	r3, sp, #8
    2c74:	469c      	mov	ip, r3
    2c76:	4462      	add	r2, ip
    2c78:	4b60      	ldr	r3, [pc, #384]	; (2dfc <usart_init+0x23c>)
    2c7a:	4798      	blx	r3
    2c7c:	e020      	b.n	2cc0 <usart_init+0x100>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    2c7e:	7df3      	ldrb	r3, [r6, #23]
    2c80:	2b00      	cmp	r3, #0
    2c82:	d00b      	beq.n	2c9c <usart_init+0xdc>
				status_code =
    2c84:	2310      	movs	r3, #16
    2c86:	9300      	str	r3, [sp, #0]
    2c88:	6930      	ldr	r0, [r6, #16]
    2c8a:	69b1      	ldr	r1, [r6, #24]
    2c8c:	220e      	movs	r2, #14
    2c8e:	ab02      	add	r3, sp, #8
    2c90:	469c      	mov	ip, r3
    2c92:	4462      	add	r2, ip
    2c94:	2300      	movs	r3, #0
    2c96:	4f5a      	ldr	r7, [pc, #360]	; (2e00 <usart_init+0x240>)
    2c98:	47b8      	blx	r7
    2c9a:	e011      	b.n	2cc0 <usart_init+0x100>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2c9c:	6933      	ldr	r3, [r6, #16]
    2c9e:	4698      	mov	r8, r3
    2ca0:	b2c0      	uxtb	r0, r0
    2ca2:	4b55      	ldr	r3, [pc, #340]	; (2df8 <usart_init+0x238>)
    2ca4:	4798      	blx	r3
    2ca6:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    2ca8:	2310      	movs	r3, #16
    2caa:	9300      	str	r3, [sp, #0]
    2cac:	4640      	mov	r0, r8
    2cae:	220e      	movs	r2, #14
    2cb0:	ab02      	add	r3, sp, #8
    2cb2:	469c      	mov	ip, r3
    2cb4:	4462      	add	r2, ip
    2cb6:	2300      	movs	r3, #0
    2cb8:	4f51      	ldr	r7, [pc, #324]	; (2e00 <usart_init+0x240>)
    2cba:	47b8      	blx	r7
    2cbc:	e000      	b.n	2cc0 <usart_init+0x100>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    2cbe:	2000      	movs	r0, #0
    2cc0:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2cc2:	d000      	beq.n	2cc6 <usart_init+0x106>
    2cc4:	e085      	b.n	2dd2 <usart_init+0x212>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2cc6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2cc8:	8a13      	ldrh	r3, [r2, #16]
    2cca:	0bdb      	lsrs	r3, r3, #15
    2ccc:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2cce:	b29b      	uxth	r3, r3
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d1f9      	bne.n	2cc8 <usart_init+0x108>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2cd4:	330e      	adds	r3, #14
    2cd6:	aa02      	add	r2, sp, #8
    2cd8:	4694      	mov	ip, r2
    2cda:	4463      	add	r3, ip
    2cdc:	881b      	ldrh	r3, [r3, #0]
    2cde:	464a      	mov	r2, r9
    2ce0:	8153      	strh	r3, [r2, #10]
    2ce2:	465b      	mov	r3, fp
    2ce4:	4652      	mov	r2, sl
    2ce6:	4313      	orrs	r3, r2
    2ce8:	9a03      	ldr	r2, [sp, #12]
    2cea:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2cec:	9a02      	ldr	r2, [sp, #8]
    2cee:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    2cf0:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    2cf2:	7df3      	ldrb	r3, [r6, #23]
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d101      	bne.n	2cfc <usart_init+0x13c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2cf8:	3304      	adds	r3, #4
    2cfa:	431f      	orrs	r7, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2cfc:	7d73      	ldrb	r3, [r6, #21]
    2cfe:	041a      	lsls	r2, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2d00:	7d33      	ldrb	r3, [r6, #20]
    2d02:	045b      	lsls	r3, r3, #17
    2d04:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    2d06:	7af1      	ldrb	r1, [r6, #11]
    2d08:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    2d0a:	8932      	ldrh	r2, [r6, #8]
    2d0c:	2aff      	cmp	r2, #255	; 0xff
    2d0e:	d003      	beq.n	2d18 <usart_init+0x158>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2d10:	2380      	movs	r3, #128	; 0x80
    2d12:	045b      	lsls	r3, r3, #17
    2d14:	431f      	orrs	r7, r3
		ctrlb |= config->parity;
    2d16:	4311      	orrs	r1, r2
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2d18:	7f33      	ldrb	r3, [r6, #28]
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d103      	bne.n	2d26 <usart_init+0x166>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2d1e:	4b39      	ldr	r3, [pc, #228]	; (2e04 <usart_init+0x244>)
    2d20:	789b      	ldrb	r3, [r3, #2]
    2d22:	079b      	lsls	r3, r3, #30
    2d24:	d501      	bpl.n	2d2a <usart_init+0x16a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2d26:	2380      	movs	r3, #128	; 0x80
    2d28:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2d2a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2d2c:	8a13      	ldrh	r3, [r2, #16]
    2d2e:	0bdb      	lsrs	r3, r3, #15
    2d30:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2d32:	b29b      	uxth	r3, r3
    2d34:	2b00      	cmp	r3, #0
    2d36:	d1f9      	bne.n	2d2c <usart_init+0x16c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2d38:	464b      	mov	r3, r9
    2d3a:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2d3c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2d3e:	8a13      	ldrh	r3, [r2, #16]
    2d40:	0bdb      	lsrs	r3, r3, #15
    2d42:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2d44:	b29b      	uxth	r3, r3
    2d46:	2b00      	cmp	r3, #0
    2d48:	d1f9      	bne.n	2d3e <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2d4a:	464b      	mov	r3, r9
    2d4c:	601f      	str	r7, [r3, #0]
    2d4e:	ab0a      	add	r3, sp, #40	; 0x28
    2d50:	2280      	movs	r2, #128	; 0x80
    2d52:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2d54:	2200      	movs	r2, #0
    2d56:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2d58:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2d5a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    2d5c:	6a33      	ldr	r3, [r6, #32]
    2d5e:	9306      	str	r3, [sp, #24]
    2d60:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2d62:	9307      	str	r3, [sp, #28]
    2d64:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2d66:	9308      	str	r3, [sp, #32]
    2d68:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2d6a:	9302      	str	r3, [sp, #8]
    2d6c:	9309      	str	r3, [sp, #36]	; 0x24
    2d6e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2d70:	ae0a      	add	r6, sp, #40	; 0x28
    2d72:	b2f9      	uxtb	r1, r7
    2d74:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2d76:	aa06      	add	r2, sp, #24
    2d78:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    2d7a:	2800      	cmp	r0, #0
    2d7c:	d102      	bne.n	2d84 <usart_init+0x1c4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2d7e:	1c20      	adds	r0, r4, #0
    2d80:	4b21      	ldr	r3, [pc, #132]	; (2e08 <usart_init+0x248>)
    2d82:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2d84:	1c43      	adds	r3, r0, #1
    2d86:	d005      	beq.n	2d94 <usart_init+0x1d4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2d88:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2d8a:	0c00      	lsrs	r0, r0, #16
    2d8c:	b2c0      	uxtb	r0, r0
    2d8e:	1c31      	adds	r1, r6, #0
    2d90:	4b1e      	ldr	r3, [pc, #120]	; (2e0c <usart_init+0x24c>)
    2d92:	4798      	blx	r3
    2d94:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2d96:	2f04      	cmp	r7, #4
    2d98:	d1eb      	bne.n	2d72 <usart_init+0x1b2>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    2d9a:	2300      	movs	r3, #0
    2d9c:	60ab      	str	r3, [r5, #8]
    2d9e:	60eb      	str	r3, [r5, #12]
    2da0:	612b      	str	r3, [r5, #16]
	}

	module->tx_buffer_ptr              = NULL;
    2da2:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
    2da4:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
    2da6:	2200      	movs	r2, #0
    2da8:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
    2daa:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
    2dac:	3320      	adds	r3, #32
    2dae:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2db0:	3301      	adds	r3, #1
    2db2:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2db4:	3301      	adds	r3, #1
    2db6:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2db8:	3301      	adds	r3, #1
    2dba:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2dbc:	6828      	ldr	r0, [r5, #0]
    2dbe:	4b09      	ldr	r3, [pc, #36]	; (2de4 <usart_init+0x224>)
    2dc0:	4798      	blx	r3
    2dc2:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2dc4:	4912      	ldr	r1, [pc, #72]	; (2e10 <usart_init+0x250>)
    2dc6:	4b13      	ldr	r3, [pc, #76]	; (2e14 <usart_init+0x254>)
    2dc8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2dca:	00a4      	lsls	r4, r4, #2
    2dcc:	4b12      	ldr	r3, [pc, #72]	; (2e18 <usart_init+0x258>)
    2dce:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    2dd0:	2300      	movs	r3, #0
}
    2dd2:	1c18      	adds	r0, r3, #0
    2dd4:	b00d      	add	sp, #52	; 0x34
    2dd6:	bc3c      	pop	{r2, r3, r4, r5}
    2dd8:	4690      	mov	r8, r2
    2dda:	4699      	mov	r9, r3
    2ddc:	46a2      	mov	sl, r4
    2dde:	46ab      	mov	fp, r5
    2de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2de2:	46c0      	nop			; (mov r8, r8)
    2de4:	00002acd 	.word	0x00002acd
    2de8:	40000400 	.word	0x40000400
    2dec:	00003465 	.word	0x00003465
    2df0:	000033d9 	.word	0x000033d9
    2df4:	00002979 	.word	0x00002979
    2df8:	00003481 	.word	0x00003481
    2dfc:	00002789 	.word	0x00002789
    2e00:	000027b1 	.word	0x000027b1
    2e04:	41002000 	.word	0x41002000
    2e08:	000029c5 	.word	0x000029c5
    2e0c:	0000355d 	.word	0x0000355d
    2e10:	00002e91 	.word	0x00002e91
    2e14:	00002b15 	.word	0x00002b15
    2e18:	200000d8 	.word	0x200000d8

00002e1c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e1e:	1c06      	adds	r6, r0, #0
    2e20:	1c0c      	adds	r4, r1, #0
    2e22:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e24:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2e26:	4b0a      	ldr	r3, [pc, #40]	; (2e50 <_usart_write_buffer+0x34>)
    2e28:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2e2a:	8bf3      	ldrh	r3, [r6, #30]
    2e2c:	b29b      	uxth	r3, r3
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d003      	beq.n	2e3a <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2e32:	4b08      	ldr	r3, [pc, #32]	; (2e54 <_usart_write_buffer+0x38>)
    2e34:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2e36:	2005      	movs	r0, #5
    2e38:	e009      	b.n	2e4e <_usart_write_buffer+0x32>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    2e3a:	83f5      	strh	r5, [r6, #30]
    2e3c:	4b05      	ldr	r3, [pc, #20]	; (2e54 <_usart_write_buffer+0x38>)
    2e3e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->tx_buffer_ptr              = tx_data;
    2e40:	61b4      	str	r4, [r6, #24]
	module->tx_status                  = STATUS_BUSY;
    2e42:	2205      	movs	r2, #5
    2e44:	2323      	movs	r3, #35	; 0x23
    2e46:	54f2      	strb	r2, [r6, r3]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2e48:	3b22      	subs	r3, #34	; 0x22
    2e4a:	737b      	strb	r3, [r7, #13]

	return STATUS_OK;
    2e4c:	2000      	movs	r0, #0
}
    2e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e50:	00002719 	.word	0x00002719
    2e54:	00002759 	.word	0x00002759

00002e58 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2e58:	1c93      	adds	r3, r2, #2
    2e5a:	009b      	lsls	r3, r3, #2
    2e5c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2e5e:	2301      	movs	r3, #1
    2e60:	4093      	lsls	r3, r2
    2e62:	1c1a      	adds	r2, r3, #0
    2e64:	2120      	movs	r1, #32
    2e66:	5c43      	ldrb	r3, [r0, r1]
    2e68:	431a      	orrs	r2, r3
    2e6a:	5442      	strb	r2, [r0, r1]
}
    2e6c:	4770      	bx	lr
    2e6e:	46c0      	nop			; (mov r8, r8)

00002e70 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2e70:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2e72:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    2e74:	2a00      	cmp	r2, #0
    2e76:	d006      	beq.n	2e86 <usart_write_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    2e78:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2e7a:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    2e7c:	2c00      	cmp	r4, #0
    2e7e:	d002      	beq.n	2e86 <usart_write_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    2e80:	4b02      	ldr	r3, [pc, #8]	; (2e8c <usart_write_buffer_job+0x1c>)
    2e82:	4798      	blx	r3
    2e84:	1c03      	adds	r3, r0, #0
}
    2e86:	1c18      	adds	r0, r3, #0
    2e88:	bd10      	pop	{r4, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	00002e1d 	.word	0x00002e1d

00002e90 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2e92:	0080      	lsls	r0, r0, #2
    2e94:	4b49      	ldr	r3, [pc, #292]	; (2fbc <_usart_interrupt_handler+0x12c>)
    2e96:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2e98:	682c      	ldr	r4, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2e9a:	8a23      	ldrh	r3, [r4, #16]
    2e9c:	0bdb      	lsrs	r3, r3, #15
    2e9e:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2ea0:	b29b      	uxth	r3, r3
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	d1f9      	bne.n	2e9a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2ea6:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
    2ea8:	7b66      	ldrb	r6, [r4, #13]
    2eaa:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    2eac:	2321      	movs	r3, #33	; 0x21
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    2eae:	5ceb      	ldrb	r3, [r5, r3]
    2eb0:	2220      	movs	r2, #32
    2eb2:	5caf      	ldrb	r7, [r5, r2]
    2eb4:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2eb6:	07f3      	lsls	r3, r6, #31
    2eb8:	d522      	bpl.n	2f00 <_usart_interrupt_handler+0x70>
		if (module->remaining_tx_buffer_length) {
    2eba:	8beb      	ldrh	r3, [r5, #30]
    2ebc:	b29b      	uxth	r3, r3
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	d01c      	beq.n	2efc <_usart_interrupt_handler+0x6c>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ec2:	69aa      	ldr	r2, [r5, #24]
    2ec4:	7813      	ldrb	r3, [r2, #0]
    2ec6:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2ec8:	1c51      	adds	r1, r2, #1
    2eca:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ecc:	7969      	ldrb	r1, [r5, #5]
    2ece:	2901      	cmp	r1, #1
    2ed0:	d001      	beq.n	2ed6 <_usart_interrupt_handler+0x46>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ed2:	b29b      	uxth	r3, r3
    2ed4:	e004      	b.n	2ee0 <_usart_interrupt_handler+0x50>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2ed6:	7851      	ldrb	r1, [r2, #1]
    2ed8:	0209      	lsls	r1, r1, #8
    2eda:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2edc:	3202      	adds	r2, #2
    2ede:	61aa      	str	r2, [r5, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2ee0:	05db      	lsls	r3, r3, #23
    2ee2:	0ddb      	lsrs	r3, r3, #23
    2ee4:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    2ee6:	8beb      	ldrh	r3, [r5, #30]
    2ee8:	3b01      	subs	r3, #1
    2eea:	b29b      	uxth	r3, r3
    2eec:	83eb      	strh	r3, [r5, #30]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d106      	bne.n	2f00 <_usart_interrupt_handler+0x70>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ef2:	3301      	adds	r3, #1
    2ef4:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2ef6:	3301      	adds	r3, #1
    2ef8:	7363      	strb	r3, [r4, #13]
    2efa:	e001      	b.n	2f00 <_usart_interrupt_handler+0x70>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2efc:	2301      	movs	r3, #1
    2efe:	7323      	strb	r3, [r4, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2f00:	07b3      	lsls	r3, r6, #30
    2f02:	d509      	bpl.n	2f18 <_usart_interrupt_handler+0x88>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2f04:	2302      	movs	r3, #2
    2f06:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
    2f08:	2200      	movs	r2, #0
    2f0a:	3321      	adds	r3, #33	; 0x21
    2f0c:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2f0e:	07fb      	lsls	r3, r7, #31
    2f10:	d502      	bpl.n	2f18 <_usart_interrupt_handler+0x88>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2f12:	1c28      	adds	r0, r5, #0
    2f14:	68ab      	ldr	r3, [r5, #8]
    2f16:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2f18:	0773      	lsls	r3, r6, #29
    2f1a:	d54e      	bpl.n	2fba <_usart_interrupt_handler+0x12a>

		if (module->remaining_rx_buffer_length) {
    2f1c:	8bab      	ldrh	r3, [r5, #28]
    2f1e:	b29b      	uxth	r3, r3
    2f20:	2b00      	cmp	r3, #0
    2f22:	d048      	beq.n	2fb6 <_usart_interrupt_handler+0x126>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f24:	8a23      	ldrh	r3, [r4, #16]
    2f26:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2f28:	075a      	lsls	r2, r3, #29
    2f2a:	d022      	beq.n	2f72 <_usart_interrupt_handler+0xe2>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2f2c:	079a      	lsls	r2, r3, #30
    2f2e:	d507      	bpl.n	2f40 <_usart_interrupt_handler+0xb0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2f30:	221a      	movs	r2, #26
    2f32:	2322      	movs	r3, #34	; 0x22
    2f34:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    2f36:	8a22      	ldrh	r2, [r4, #16]
    2f38:	3b20      	subs	r3, #32
    2f3a:	4313      	orrs	r3, r2
    2f3c:	8223      	strh	r3, [r4, #16]
    2f3e:	e012      	b.n	2f66 <_usart_interrupt_handler+0xd6>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2f40:	075a      	lsls	r2, r3, #29
    2f42:	d507      	bpl.n	2f54 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2f44:	221e      	movs	r2, #30
    2f46:	2322      	movs	r3, #34	; 0x22
    2f48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    2f4a:	8a22      	ldrh	r2, [r4, #16]
    2f4c:	3b1e      	subs	r3, #30
    2f4e:	4313      	orrs	r3, r2
    2f50:	8223      	strh	r3, [r4, #16]
    2f52:	e008      	b.n	2f66 <_usart_interrupt_handler+0xd6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2f54:	07db      	lsls	r3, r3, #31
    2f56:	d506      	bpl.n	2f66 <_usart_interrupt_handler+0xd6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    2f58:	2213      	movs	r2, #19
    2f5a:	2322      	movs	r3, #34	; 0x22
    2f5c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    2f5e:	8a22      	ldrh	r2, [r4, #16]
    2f60:	3b21      	subs	r3, #33	; 0x21
    2f62:	4313      	orrs	r3, r2
    2f64:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2f66:	077b      	lsls	r3, r7, #29
    2f68:	d527      	bpl.n	2fba <_usart_interrupt_handler+0x12a>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2f6a:	692b      	ldr	r3, [r5, #16]
    2f6c:	1c28      	adds	r0, r5, #0
    2f6e:	4798      	blx	r3
    2f70:	e023      	b.n	2fba <_usart_interrupt_handler+0x12a>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2f72:	8b23      	ldrh	r3, [r4, #24]
    2f74:	05db      	lsls	r3, r3, #23
    2f76:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2f78:	b2da      	uxtb	r2, r3
    2f7a:	6969      	ldr	r1, [r5, #20]
    2f7c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2f7e:	696a      	ldr	r2, [r5, #20]
    2f80:	1c51      	adds	r1, r2, #1
    2f82:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2f84:	7969      	ldrb	r1, [r5, #5]
    2f86:	2901      	cmp	r1, #1
    2f88:	d104      	bne.n	2f94 <_usart_interrupt_handler+0x104>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2f8a:	0a1b      	lsrs	r3, r3, #8
    2f8c:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    2f8e:	696b      	ldr	r3, [r5, #20]
    2f90:	3301      	adds	r3, #1
    2f92:	616b      	str	r3, [r5, #20]
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2f94:	8bab      	ldrh	r3, [r5, #28]
    2f96:	3b01      	subs	r3, #1
    2f98:	b29b      	uxth	r3, r3
    2f9a:	83ab      	strh	r3, [r5, #28]
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d10c      	bne.n	2fba <_usart_interrupt_handler+0x12a>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2fa0:	3304      	adds	r3, #4
    2fa2:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
    2fa4:	2200      	movs	r2, #0
    2fa6:	331e      	adds	r3, #30
    2fa8:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2faa:	07bb      	lsls	r3, r7, #30
    2fac:	d505      	bpl.n	2fba <_usart_interrupt_handler+0x12a>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2fae:	68eb      	ldr	r3, [r5, #12]
    2fb0:	1c28      	adds	r0, r5, #0
    2fb2:	4798      	blx	r3
    2fb4:	e001      	b.n	2fba <_usart_interrupt_handler+0x12a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2fb6:	2304      	movs	r3, #4
    2fb8:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fbc:	200000d8 	.word	0x200000d8

00002fc0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2fc0:	b508      	push	{r3, lr}
	switch (clock_source) {
    2fc2:	2807      	cmp	r0, #7
    2fc4:	d803      	bhi.n	2fce <system_clock_source_get_hz+0xe>
    2fc6:	0080      	lsls	r0, r0, #2
    2fc8:	4b17      	ldr	r3, [pc, #92]	; (3028 <system_clock_source_get_hz+0x68>)
    2fca:	581b      	ldr	r3, [r3, r0]
    2fcc:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    2fce:	2000      	movs	r0, #0
    2fd0:	e028      	b.n	3024 <system_clock_source_get_hz+0x64>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2fd2:	4b16      	ldr	r3, [pc, #88]	; (302c <system_clock_source_get_hz+0x6c>)
    2fd4:	68d8      	ldr	r0, [r3, #12]
    2fd6:	e025      	b.n	3024 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2fd8:	4b15      	ldr	r3, [pc, #84]	; (3030 <system_clock_source_get_hz+0x70>)
    2fda:	6a18      	ldr	r0, [r3, #32]
    2fdc:	0580      	lsls	r0, r0, #22
    2fde:	0f80      	lsrs	r0, r0, #30
    2fe0:	4b14      	ldr	r3, [pc, #80]	; (3034 <system_clock_source_get_hz+0x74>)
    2fe2:	40c3      	lsrs	r3, r0
    2fe4:	1c18      	adds	r0, r3, #0
    2fe6:	e01d      	b.n	3024 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2fe8:	4b10      	ldr	r3, [pc, #64]	; (302c <system_clock_source_get_hz+0x6c>)
    2fea:	6918      	ldr	r0, [r3, #16]
    2fec:	e01a      	b.n	3024 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2fee:	4b0f      	ldr	r3, [pc, #60]	; (302c <system_clock_source_get_hz+0x6c>)
    2ff0:	681b      	ldr	r3, [r3, #0]
    2ff2:	2002      	movs	r0, #2
    2ff4:	4018      	ands	r0, r3
    2ff6:	d015      	beq.n	3024 <system_clock_source_get_hz+0x64>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ff8:	490d      	ldr	r1, [pc, #52]	; (3030 <system_clock_source_get_hz+0x70>)
    2ffa:	2210      	movs	r2, #16
    2ffc:	68cb      	ldr	r3, [r1, #12]
    2ffe:	421a      	tst	r2, r3
    3000:	d0fc      	beq.n	2ffc <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3002:	4b0a      	ldr	r3, [pc, #40]	; (302c <system_clock_source_get_hz+0x6c>)
    3004:	681b      	ldr	r3, [r3, #0]
    3006:	075b      	lsls	r3, r3, #29
    3008:	d50b      	bpl.n	3022 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    300a:	2000      	movs	r0, #0
    300c:	4b0a      	ldr	r3, [pc, #40]	; (3038 <system_clock_source_get_hz+0x78>)
    300e:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3010:	4b06      	ldr	r3, [pc, #24]	; (302c <system_clock_source_get_hz+0x6c>)
    3012:	689b      	ldr	r3, [r3, #8]
    3014:	041b      	lsls	r3, r3, #16
    3016:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3018:	4358      	muls	r0, r3
    301a:	e003      	b.n	3024 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    301c:	2080      	movs	r0, #128	; 0x80
    301e:	0200      	lsls	r0, r0, #8
    3020:	e000      	b.n	3024 <system_clock_source_get_hz+0x64>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3022:	4806      	ldr	r0, [pc, #24]	; (303c <system_clock_source_get_hz+0x7c>)

	default:
		return 0;
	}
}
    3024:	bd08      	pop	{r3, pc}
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	00004940 	.word	0x00004940
    302c:	20000068 	.word	0x20000068
    3030:	40000800 	.word	0x40000800
    3034:	007a1200 	.word	0x007a1200
    3038:	00003481 	.word	0x00003481
    303c:	02dc6c00 	.word	0x02dc6c00

00003040 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3040:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3042:	4c0c      	ldr	r4, [pc, #48]	; (3074 <system_clock_source_osc8m_set_config+0x34>)
    3044:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3046:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3048:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    304a:	7842      	ldrb	r2, [r0, #1]
    304c:	2001      	movs	r0, #1
    304e:	4002      	ands	r2, r0
    3050:	0192      	lsls	r2, r2, #6
    3052:	2640      	movs	r6, #64	; 0x40
    3054:	43b3      	bics	r3, r6
    3056:	4313      	orrs	r3, r2
    3058:	1c02      	adds	r2, r0, #0
    305a:	402a      	ands	r2, r5
    305c:	01d2      	lsls	r2, r2, #7
    305e:	307f      	adds	r0, #127	; 0x7f
    3060:	4383      	bics	r3, r0
    3062:	4313      	orrs	r3, r2
    3064:	2203      	movs	r2, #3
    3066:	400a      	ands	r2, r1
    3068:	0212      	lsls	r2, r2, #8
    306a:	4903      	ldr	r1, [pc, #12]	; (3078 <system_clock_source_osc8m_set_config+0x38>)
    306c:	400b      	ands	r3, r1
    306e:	4313      	orrs	r3, r2
    3070:	6223      	str	r3, [r4, #32]
}
    3072:	bd70      	pop	{r4, r5, r6, pc}
    3074:	40000800 	.word	0x40000800
    3078:	fffffcff 	.word	0xfffffcff

0000307c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    307c:	b5f0      	push	{r4, r5, r6, r7, lr}
    307e:	4657      	mov	r7, sl
    3080:	464e      	mov	r6, r9
    3082:	4645      	mov	r5, r8
    3084:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    3086:	4e1c      	ldr	r6, [pc, #112]	; (30f8 <system_clock_source_osc32k_set_config+0x7c>)
    3088:	69b3      	ldr	r3, [r6, #24]
    308a:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    308c:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    308e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3090:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3092:	78c3      	ldrb	r3, [r0, #3]
    3094:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    3096:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    3098:	7883      	ldrb	r3, [r0, #2]
    309a:	2001      	movs	r0, #1
    309c:	4003      	ands	r3, r0
    309e:	009b      	lsls	r3, r3, #2
    30a0:	469a      	mov	sl, r3
    30a2:	2204      	movs	r2, #4
    30a4:	4690      	mov	r8, r2
    30a6:	4662      	mov	r2, ip
    30a8:	4643      	mov	r3, r8
    30aa:	439a      	bics	r2, r3
    30ac:	1c13      	adds	r3, r2, #0
    30ae:	4652      	mov	r2, sl
    30b0:	431a      	orrs	r2, r3
    30b2:	1c13      	adds	r3, r2, #0
    30b4:	4001      	ands	r1, r0
    30b6:	00c9      	lsls	r1, r1, #3
    30b8:	2208      	movs	r2, #8
    30ba:	4393      	bics	r3, r2
    30bc:	430b      	orrs	r3, r1
    30be:	464a      	mov	r2, r9
    30c0:	4002      	ands	r2, r0
    30c2:	0192      	lsls	r2, r2, #6
    30c4:	2140      	movs	r1, #64	; 0x40
    30c6:	438b      	bics	r3, r1
    30c8:	4313      	orrs	r3, r2
    30ca:	4007      	ands	r7, r0
    30cc:	01ff      	lsls	r7, r7, #7
    30ce:	2280      	movs	r2, #128	; 0x80
    30d0:	4393      	bics	r3, r2
    30d2:	433b      	orrs	r3, r7
    30d4:	3a79      	subs	r2, #121	; 0x79
    30d6:	4015      	ands	r5, r2
    30d8:	022d      	lsls	r5, r5, #8
    30da:	4f08      	ldr	r7, [pc, #32]	; (30fc <system_clock_source_osc32k_set_config+0x80>)
    30dc:	403b      	ands	r3, r7
    30de:	432b      	orrs	r3, r5
    30e0:	4004      	ands	r4, r0
    30e2:	0320      	lsls	r0, r4, #12
    30e4:	4c06      	ldr	r4, [pc, #24]	; (3100 <system_clock_source_osc32k_set_config+0x84>)
    30e6:	401c      	ands	r4, r3
    30e8:	4304      	orrs	r4, r0
    30ea:	61b4      	str	r4, [r6, #24]
}
    30ec:	bc1c      	pop	{r2, r3, r4}
    30ee:	4690      	mov	r8, r2
    30f0:	4699      	mov	r9, r3
    30f2:	46a2      	mov	sl, r4
    30f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	40000800 	.word	0x40000800
    30fc:	fffff8ff 	.word	0xfffff8ff
    3100:	ffffefff 	.word	0xffffefff

00003104 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3104:	2807      	cmp	r0, #7
    3106:	d803      	bhi.n	3110 <system_clock_source_enable+0xc>
    3108:	0080      	lsls	r0, r0, #2
    310a:	4b1e      	ldr	r3, [pc, #120]	; (3184 <system_clock_source_enable+0x80>)
    310c:	581b      	ldr	r3, [r3, r0]
    310e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3110:	2017      	movs	r0, #23
    3112:	e036      	b.n	3182 <system_clock_source_enable+0x7e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3114:	4a1c      	ldr	r2, [pc, #112]	; (3188 <system_clock_source_enable+0x84>)
    3116:	6a11      	ldr	r1, [r2, #32]
    3118:	2302      	movs	r3, #2
    311a:	430b      	orrs	r3, r1
    311c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    311e:	2000      	movs	r0, #0
    3120:	e02f      	b.n	3182 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3122:	4a19      	ldr	r2, [pc, #100]	; (3188 <system_clock_source_enable+0x84>)
    3124:	6991      	ldr	r1, [r2, #24]
    3126:	2302      	movs	r3, #2
    3128:	430b      	orrs	r3, r1
    312a:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    312c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    312e:	e028      	b.n	3182 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3130:	4a15      	ldr	r2, [pc, #84]	; (3188 <system_clock_source_enable+0x84>)
    3132:	8a11      	ldrh	r1, [r2, #16]
    3134:	2302      	movs	r3, #2
    3136:	430b      	orrs	r3, r1
    3138:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    313a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    313c:	e021      	b.n	3182 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    313e:	4a12      	ldr	r2, [pc, #72]	; (3188 <system_clock_source_enable+0x84>)
    3140:	8a91      	ldrh	r1, [r2, #20]
    3142:	2302      	movs	r3, #2
    3144:	430b      	orrs	r3, r1
    3146:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3148:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    314a:	e01a      	b.n	3182 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    314c:	4b0f      	ldr	r3, [pc, #60]	; (318c <system_clock_source_enable+0x88>)
    314e:	6819      	ldr	r1, [r3, #0]
    3150:	2202      	movs	r2, #2
    3152:	430a      	orrs	r2, r1
    3154:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    3156:	681a      	ldr	r2, [r3, #0]
    3158:	4b0d      	ldr	r3, [pc, #52]	; (3190 <system_clock_source_enable+0x8c>)
    315a:	4013      	ands	r3, r2
    315c:	4a0a      	ldr	r2, [pc, #40]	; (3188 <system_clock_source_enable+0x84>)
    315e:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3160:	1c11      	adds	r1, r2, #0
    3162:	2210      	movs	r2, #16
    3164:	68cb      	ldr	r3, [r1, #12]
    3166:	421a      	tst	r2, r3
    3168:	d0fc      	beq.n	3164 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    316a:	4a08      	ldr	r2, [pc, #32]	; (318c <system_clock_source_enable+0x88>)
    316c:	6891      	ldr	r1, [r2, #8]
    316e:	4b06      	ldr	r3, [pc, #24]	; (3188 <system_clock_source_enable+0x84>)
    3170:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3172:	6851      	ldr	r1, [r2, #4]
    3174:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3176:	6812      	ldr	r2, [r2, #0]
    3178:	b292      	uxth	r2, r2
    317a:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    317c:	2000      	movs	r0, #0
    317e:	e000      	b.n	3182 <system_clock_source_enable+0x7e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3180:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    3182:	4770      	bx	lr
    3184:	00004960 	.word	0x00004960
    3188:	40000800 	.word	0x40000800
    318c:	20000068 	.word	0x20000068
    3190:	0000ff7f 	.word	0x0000ff7f

00003194 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3194:	b530      	push	{r4, r5, lr}
    3196:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3198:	22c2      	movs	r2, #194	; 0xc2
    319a:	00d2      	lsls	r2, r2, #3
    319c:	4b1a      	ldr	r3, [pc, #104]	; (3208 <system_clock_init+0x74>)
    319e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    31a0:	4a1a      	ldr	r2, [pc, #104]	; (320c <system_clock_init+0x78>)
    31a2:	6853      	ldr	r3, [r2, #4]
    31a4:	211e      	movs	r1, #30
    31a6:	438b      	bics	r3, r1
    31a8:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    31aa:	2301      	movs	r3, #1
    31ac:	466a      	mov	r2, sp
    31ae:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    31b0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    31b2:	4d17      	ldr	r5, [pc, #92]	; (3210 <system_clock_init+0x7c>)
    31b4:	b2e0      	uxtb	r0, r4
    31b6:	4669      	mov	r1, sp
    31b8:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    31ba:	3401      	adds	r4, #1
    31bc:	2c1c      	cmp	r4, #28
    31be:	d1f9      	bne.n	31b4 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    31c0:	a803      	add	r0, sp, #12
    31c2:	2400      	movs	r4, #0
    31c4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    31c6:	2501      	movs	r5, #1
    31c8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    31ca:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    31cc:	4b11      	ldr	r3, [pc, #68]	; (3214 <system_clock_init+0x80>)
    31ce:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    31d0:	2006      	movs	r0, #6
    31d2:	4b11      	ldr	r3, [pc, #68]	; (3218 <system_clock_init+0x84>)
    31d4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    31d6:	4b11      	ldr	r3, [pc, #68]	; (321c <system_clock_init+0x88>)
    31d8:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    31da:	4b11      	ldr	r3, [pc, #68]	; (3220 <system_clock_init+0x8c>)
    31dc:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    31de:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    31e0:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    31e2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    31e4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    31e6:	466b      	mov	r3, sp
    31e8:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    31ea:	2306      	movs	r3, #6
    31ec:	466a      	mov	r2, sp
    31ee:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    31f0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    31f2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    31f4:	2000      	movs	r0, #0
    31f6:	4669      	mov	r1, sp
    31f8:	4b0a      	ldr	r3, [pc, #40]	; (3224 <system_clock_init+0x90>)
    31fa:	4798      	blx	r3
    31fc:	2000      	movs	r0, #0
    31fe:	4b0a      	ldr	r3, [pc, #40]	; (3228 <system_clock_init+0x94>)
    3200:	4798      	blx	r3
#endif
}
    3202:	b005      	add	sp, #20
    3204:	bd30      	pop	{r4, r5, pc}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	40000800 	.word	0x40000800
    320c:	41004000 	.word	0x41004000
    3210:	00003465 	.word	0x00003465
    3214:	00003041 	.word	0x00003041
    3218:	00003105 	.word	0x00003105
    321c:	0000322d 	.word	0x0000322d
    3220:	40000400 	.word	0x40000400
    3224:	00003251 	.word	0x00003251
    3228:	00003309 	.word	0x00003309

0000322c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    322c:	4a06      	ldr	r2, [pc, #24]	; (3248 <system_gclk_init+0x1c>)
    322e:	6991      	ldr	r1, [r2, #24]
    3230:	2308      	movs	r3, #8
    3232:	430b      	orrs	r3, r1
    3234:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3236:	2201      	movs	r2, #1
    3238:	4b04      	ldr	r3, [pc, #16]	; (324c <system_gclk_init+0x20>)
    323a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    323c:	1c19      	adds	r1, r3, #0
    323e:	780b      	ldrb	r3, [r1, #0]
    3240:	4213      	tst	r3, r2
    3242:	d1fc      	bne.n	323e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3244:	4770      	bx	lr
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	40000400 	.word	0x40000400
    324c:	40000c00 	.word	0x40000c00

00003250 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3250:	b570      	push	{r4, r5, r6, lr}
    3252:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3254:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3256:	780d      	ldrb	r5, [r1, #0]
    3258:	022d      	lsls	r5, r5, #8
    325a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    325c:	784b      	ldrb	r3, [r1, #1]
    325e:	2b00      	cmp	r3, #0
    3260:	d002      	beq.n	3268 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3262:	2380      	movs	r3, #128	; 0x80
    3264:	02db      	lsls	r3, r3, #11
    3266:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3268:	7a4b      	ldrb	r3, [r1, #9]
    326a:	2b00      	cmp	r3, #0
    326c:	d002      	beq.n	3274 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    326e:	2380      	movs	r3, #128	; 0x80
    3270:	031b      	lsls	r3, r3, #12
    3272:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3274:	6848      	ldr	r0, [r1, #4]
    3276:	2801      	cmp	r0, #1
    3278:	d918      	bls.n	32ac <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    327a:	1e43      	subs	r3, r0, #1
    327c:	4218      	tst	r0, r3
    327e:	d110      	bne.n	32a2 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3280:	2802      	cmp	r0, #2
    3282:	d906      	bls.n	3292 <system_gclk_gen_set_config+0x42>
    3284:	2302      	movs	r3, #2
    3286:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3288:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    328a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    328c:	4298      	cmp	r0, r3
    328e:	d8fb      	bhi.n	3288 <system_gclk_gen_set_config+0x38>
    3290:	e000      	b.n	3294 <system_gclk_gen_set_config+0x44>
    3292:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3294:	0212      	lsls	r2, r2, #8
    3296:	4332      	orrs	r2, r6
    3298:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    329a:	2380      	movs	r3, #128	; 0x80
    329c:	035b      	lsls	r3, r3, #13
    329e:	431d      	orrs	r5, r3
    32a0:	e004      	b.n	32ac <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    32a2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    32a4:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    32a6:	2380      	movs	r3, #128	; 0x80
    32a8:	029b      	lsls	r3, r3, #10
    32aa:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    32ac:	7a0b      	ldrb	r3, [r1, #8]
    32ae:	2b00      	cmp	r3, #0
    32b0:	d002      	beq.n	32b8 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    32b2:	2380      	movs	r3, #128	; 0x80
    32b4:	039b      	lsls	r3, r3, #14
    32b6:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32b8:	4a0f      	ldr	r2, [pc, #60]	; (32f8 <system_gclk_gen_set_config+0xa8>)
    32ba:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    32bc:	b25b      	sxtb	r3, r3
    32be:	2b00      	cmp	r3, #0
    32c0:	dbfb      	blt.n	32ba <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    32c2:	4b0e      	ldr	r3, [pc, #56]	; (32fc <system_gclk_gen_set_config+0xac>)
    32c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    32c6:	4b0e      	ldr	r3, [pc, #56]	; (3300 <system_gclk_gen_set_config+0xb0>)
    32c8:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32ca:	4a0b      	ldr	r2, [pc, #44]	; (32f8 <system_gclk_gen_set_config+0xa8>)
    32cc:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    32ce:	b25b      	sxtb	r3, r3
    32d0:	2b00      	cmp	r3, #0
    32d2:	dbfb      	blt.n	32cc <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    32d4:	4b08      	ldr	r3, [pc, #32]	; (32f8 <system_gclk_gen_set_config+0xa8>)
    32d6:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32d8:	1c1a      	adds	r2, r3, #0
    32da:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    32dc:	b25b      	sxtb	r3, r3
    32de:	2b00      	cmp	r3, #0
    32e0:	dbfb      	blt.n	32da <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    32e2:	4a05      	ldr	r2, [pc, #20]	; (32f8 <system_gclk_gen_set_config+0xa8>)
    32e4:	6851      	ldr	r1, [r2, #4]
    32e6:	2380      	movs	r3, #128	; 0x80
    32e8:	025b      	lsls	r3, r3, #9
    32ea:	400b      	ands	r3, r1
    32ec:	431d      	orrs	r5, r3
    32ee:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    32f0:	4b04      	ldr	r3, [pc, #16]	; (3304 <system_gclk_gen_set_config+0xb4>)
    32f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    32f4:	bd70      	pop	{r4, r5, r6, pc}
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	40000c00 	.word	0x40000c00
    32fc:	00002719 	.word	0x00002719
    3300:	40000c08 	.word	0x40000c08
    3304:	00002759 	.word	0x00002759

00003308 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3308:	b510      	push	{r4, lr}
    330a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    330c:	4a0b      	ldr	r2, [pc, #44]	; (333c <system_gclk_gen_enable+0x34>)
    330e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    3310:	b25b      	sxtb	r3, r3
    3312:	2b00      	cmp	r3, #0
    3314:	dbfb      	blt.n	330e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3316:	4b0a      	ldr	r3, [pc, #40]	; (3340 <system_gclk_gen_enable+0x38>)
    3318:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    331a:	4b0a      	ldr	r3, [pc, #40]	; (3344 <system_gclk_gen_enable+0x3c>)
    331c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    331e:	4a07      	ldr	r2, [pc, #28]	; (333c <system_gclk_gen_enable+0x34>)
    3320:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    3322:	b25b      	sxtb	r3, r3
    3324:	2b00      	cmp	r3, #0
    3326:	dbfb      	blt.n	3320 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3328:	4a04      	ldr	r2, [pc, #16]	; (333c <system_gclk_gen_enable+0x34>)
    332a:	6853      	ldr	r3, [r2, #4]
    332c:	2180      	movs	r1, #128	; 0x80
    332e:	0249      	lsls	r1, r1, #9
    3330:	430b      	orrs	r3, r1
    3332:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3334:	4b04      	ldr	r3, [pc, #16]	; (3348 <system_gclk_gen_enable+0x40>)
    3336:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3338:	bd10      	pop	{r4, pc}
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	40000c00 	.word	0x40000c00
    3340:	00002719 	.word	0x00002719
    3344:	40000c04 	.word	0x40000c04
    3348:	00002759 	.word	0x00002759

0000334c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    334c:	b570      	push	{r4, r5, r6, lr}
    334e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3350:	4a1a      	ldr	r2, [pc, #104]	; (33bc <system_gclk_gen_get_hz+0x70>)
    3352:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    3354:	b25b      	sxtb	r3, r3
    3356:	2b00      	cmp	r3, #0
    3358:	dbfb      	blt.n	3352 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    335a:	4b19      	ldr	r3, [pc, #100]	; (33c0 <system_gclk_gen_get_hz+0x74>)
    335c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    335e:	4b19      	ldr	r3, [pc, #100]	; (33c4 <system_gclk_gen_get_hz+0x78>)
    3360:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3362:	4a16      	ldr	r2, [pc, #88]	; (33bc <system_gclk_gen_get_hz+0x70>)
    3364:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    3366:	b25b      	sxtb	r3, r3
    3368:	2b00      	cmp	r3, #0
    336a:	dbfb      	blt.n	3364 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    336c:	4e13      	ldr	r6, [pc, #76]	; (33bc <system_gclk_gen_get_hz+0x70>)
    336e:	6870      	ldr	r0, [r6, #4]
    3370:	04c0      	lsls	r0, r0, #19
    3372:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3374:	4b14      	ldr	r3, [pc, #80]	; (33c8 <system_gclk_gen_get_hz+0x7c>)
    3376:	4798      	blx	r3
    3378:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    337a:	4b12      	ldr	r3, [pc, #72]	; (33c4 <system_gclk_gen_get_hz+0x78>)
    337c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    337e:	6876      	ldr	r6, [r6, #4]
    3380:	02f6      	lsls	r6, r6, #11
    3382:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3384:	4b11      	ldr	r3, [pc, #68]	; (33cc <system_gclk_gen_get_hz+0x80>)
    3386:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3388:	4a0c      	ldr	r2, [pc, #48]	; (33bc <system_gclk_gen_get_hz+0x70>)
    338a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    338c:	b25b      	sxtb	r3, r3
    338e:	2b00      	cmp	r3, #0
    3390:	dbfb      	blt.n	338a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3392:	4b0a      	ldr	r3, [pc, #40]	; (33bc <system_gclk_gen_get_hz+0x70>)
    3394:	689c      	ldr	r4, [r3, #8]
    3396:	0a24      	lsrs	r4, r4, #8
    3398:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    339a:	4b0d      	ldr	r3, [pc, #52]	; (33d0 <system_gclk_gen_get_hz+0x84>)
    339c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    339e:	2e00      	cmp	r6, #0
    33a0:	d107      	bne.n	33b2 <system_gclk_gen_get_hz+0x66>
    33a2:	2c01      	cmp	r4, #1
    33a4:	d907      	bls.n	33b6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    33a6:	1c28      	adds	r0, r5, #0
    33a8:	1c21      	adds	r1, r4, #0
    33aa:	4b0a      	ldr	r3, [pc, #40]	; (33d4 <system_gclk_gen_get_hz+0x88>)
    33ac:	4798      	blx	r3
    33ae:	1c05      	adds	r5, r0, #0
    33b0:	e001      	b.n	33b6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    33b2:	3401      	adds	r4, #1
    33b4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    33b6:	1c28      	adds	r0, r5, #0
    33b8:	bd70      	pop	{r4, r5, r6, pc}
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	40000c00 	.word	0x40000c00
    33c0:	00002719 	.word	0x00002719
    33c4:	40000c04 	.word	0x40000c04
    33c8:	00002fc1 	.word	0x00002fc1
    33cc:	40000c08 	.word	0x40000c08
    33d0:	00002759 	.word	0x00002759
    33d4:	000043c1 	.word	0x000043c1

000033d8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    33d8:	b510      	push	{r4, lr}
    33da:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    33dc:	4b06      	ldr	r3, [pc, #24]	; (33f8 <system_gclk_chan_enable+0x20>)
    33de:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    33e0:	4b06      	ldr	r3, [pc, #24]	; (33fc <system_gclk_chan_enable+0x24>)
    33e2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    33e4:	4a06      	ldr	r2, [pc, #24]	; (3400 <system_gclk_chan_enable+0x28>)
    33e6:	8851      	ldrh	r1, [r2, #2]
    33e8:	2380      	movs	r3, #128	; 0x80
    33ea:	01db      	lsls	r3, r3, #7
    33ec:	430b      	orrs	r3, r1
    33ee:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    33f0:	4b04      	ldr	r3, [pc, #16]	; (3404 <system_gclk_chan_enable+0x2c>)
    33f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    33f4:	bd10      	pop	{r4, pc}
    33f6:	46c0      	nop			; (mov r8, r8)
    33f8:	00002719 	.word	0x00002719
    33fc:	40000c02 	.word	0x40000c02
    3400:	40000c00 	.word	0x40000c00
    3404:	00002759 	.word	0x00002759

00003408 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3408:	b510      	push	{r4, lr}
    340a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    340c:	4b0f      	ldr	r3, [pc, #60]	; (344c <system_gclk_chan_disable+0x44>)
    340e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3410:	4b0f      	ldr	r3, [pc, #60]	; (3450 <system_gclk_chan_disable+0x48>)
    3412:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3414:	4b0f      	ldr	r3, [pc, #60]	; (3454 <system_gclk_chan_disable+0x4c>)
    3416:	885a      	ldrh	r2, [r3, #2]
    3418:	0512      	lsls	r2, r2, #20
    341a:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    341c:	8859      	ldrh	r1, [r3, #2]
    341e:	4a0e      	ldr	r2, [pc, #56]	; (3458 <system_gclk_chan_disable+0x50>)
    3420:	400a      	ands	r2, r1
    3422:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3424:	8859      	ldrh	r1, [r3, #2]
    3426:	4a0d      	ldr	r2, [pc, #52]	; (345c <system_gclk_chan_disable+0x54>)
    3428:	400a      	ands	r2, r1
    342a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    342c:	1c19      	adds	r1, r3, #0
    342e:	2280      	movs	r2, #128	; 0x80
    3430:	01d2      	lsls	r2, r2, #7
    3432:	884b      	ldrh	r3, [r1, #2]
    3434:	4213      	tst	r3, r2
    3436:	d1fc      	bne.n	3432 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3438:	4906      	ldr	r1, [pc, #24]	; (3454 <system_gclk_chan_disable+0x4c>)
    343a:	0202      	lsls	r2, r0, #8
    343c:	8848      	ldrh	r0, [r1, #2]
    343e:	4b06      	ldr	r3, [pc, #24]	; (3458 <system_gclk_chan_disable+0x50>)
    3440:	4003      	ands	r3, r0
    3442:	4313      	orrs	r3, r2
    3444:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3446:	4b06      	ldr	r3, [pc, #24]	; (3460 <system_gclk_chan_disable+0x58>)
    3448:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    344a:	bd10      	pop	{r4, pc}
    344c:	00002719 	.word	0x00002719
    3450:	40000c02 	.word	0x40000c02
    3454:	40000c00 	.word	0x40000c00
    3458:	fffff0ff 	.word	0xfffff0ff
    345c:	ffffbfff 	.word	0xffffbfff
    3460:	00002759 	.word	0x00002759

00003464 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3464:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3466:	780c      	ldrb	r4, [r1, #0]
    3468:	0224      	lsls	r4, r4, #8
    346a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    346c:	4b02      	ldr	r3, [pc, #8]	; (3478 <system_gclk_chan_set_config+0x14>)
    346e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3470:	b2a4      	uxth	r4, r4
    3472:	4b02      	ldr	r3, [pc, #8]	; (347c <system_gclk_chan_set_config+0x18>)
    3474:	805c      	strh	r4, [r3, #2]
}
    3476:	bd10      	pop	{r4, pc}
    3478:	00003409 	.word	0x00003409
    347c:	40000c00 	.word	0x40000c00

00003480 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3480:	b510      	push	{r4, lr}
    3482:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3484:	4b06      	ldr	r3, [pc, #24]	; (34a0 <system_gclk_chan_get_hz+0x20>)
    3486:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3488:	4b06      	ldr	r3, [pc, #24]	; (34a4 <system_gclk_chan_get_hz+0x24>)
    348a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    348c:	4b06      	ldr	r3, [pc, #24]	; (34a8 <system_gclk_chan_get_hz+0x28>)
    348e:	885c      	ldrh	r4, [r3, #2]
    3490:	0524      	lsls	r4, r4, #20
    3492:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3494:	4b05      	ldr	r3, [pc, #20]	; (34ac <system_gclk_chan_get_hz+0x2c>)
    3496:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3498:	1c20      	adds	r0, r4, #0
    349a:	4b05      	ldr	r3, [pc, #20]	; (34b0 <system_gclk_chan_get_hz+0x30>)
    349c:	4798      	blx	r3
}
    349e:	bd10      	pop	{r4, pc}
    34a0:	00002719 	.word	0x00002719
    34a4:	40000c02 	.word	0x40000c02
    34a8:	40000c00 	.word	0x40000c00
    34ac:	00002759 	.word	0x00002759
    34b0:	0000334d 	.word	0x0000334d

000034b4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    34b4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    34b6:	78d3      	ldrb	r3, [r2, #3]
    34b8:	2b00      	cmp	r3, #0
    34ba:	d11e      	bne.n	34fa <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    34bc:	7814      	ldrb	r4, [r2, #0]
    34be:	2c80      	cmp	r4, #128	; 0x80
    34c0:	d004      	beq.n	34cc <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    34c2:	0624      	lsls	r4, r4, #24
    34c4:	2380      	movs	r3, #128	; 0x80
    34c6:	025b      	lsls	r3, r3, #9
    34c8:	431c      	orrs	r4, r3
    34ca:	e000      	b.n	34ce <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    34cc:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    34ce:	7853      	ldrb	r3, [r2, #1]
    34d0:	2502      	movs	r5, #2
    34d2:	43ab      	bics	r3, r5
    34d4:	d10a      	bne.n	34ec <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    34d6:	7893      	ldrb	r3, [r2, #2]
    34d8:	2b00      	cmp	r3, #0
    34da:	d103      	bne.n	34e4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    34dc:	2380      	movs	r3, #128	; 0x80
    34de:	029b      	lsls	r3, r3, #10
    34e0:	431c      	orrs	r4, r3
    34e2:	e002      	b.n	34ea <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    34e4:	23c0      	movs	r3, #192	; 0xc0
    34e6:	02db      	lsls	r3, r3, #11
    34e8:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    34ea:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    34ec:	7853      	ldrb	r3, [r2, #1]
    34ee:	3b01      	subs	r3, #1
    34f0:	2b01      	cmp	r3, #1
    34f2:	d812      	bhi.n	351a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    34f4:	4b18      	ldr	r3, [pc, #96]	; (3558 <_system_pinmux_config+0xa4>)
    34f6:	401c      	ands	r4, r3
    34f8:	e00f      	b.n	351a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    34fa:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    34fc:	040b      	lsls	r3, r1, #16
    34fe:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3500:	24a0      	movs	r4, #160	; 0xa0
    3502:	05e4      	lsls	r4, r4, #23
    3504:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3506:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3508:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    350a:	24d0      	movs	r4, #208	; 0xd0
    350c:	0624      	lsls	r4, r4, #24
    350e:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3510:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3512:	78d3      	ldrb	r3, [r2, #3]
    3514:	2b00      	cmp	r3, #0
    3516:	d018      	beq.n	354a <_system_pinmux_config+0x96>
    3518:	e01c      	b.n	3554 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    351a:	040b      	lsls	r3, r1, #16
    351c:	0c1b      	lsrs	r3, r3, #16
    351e:	25a0      	movs	r5, #160	; 0xa0
    3520:	05ed      	lsls	r5, r5, #23
    3522:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3524:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3526:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3528:	0c0b      	lsrs	r3, r1, #16
    352a:	25d0      	movs	r5, #208	; 0xd0
    352c:	062d      	lsls	r5, r5, #24
    352e:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3530:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3532:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3534:	78d3      	ldrb	r3, [r2, #3]
    3536:	2b00      	cmp	r3, #0
    3538:	d10c      	bne.n	3554 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    353a:	0363      	lsls	r3, r4, #13
    353c:	d505      	bpl.n	354a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    353e:	7893      	ldrb	r3, [r2, #2]
    3540:	2b01      	cmp	r3, #1
    3542:	d101      	bne.n	3548 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    3544:	6181      	str	r1, [r0, #24]
    3546:	e000      	b.n	354a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    3548:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    354a:	7853      	ldrb	r3, [r2, #1]
    354c:	3b01      	subs	r3, #1
    354e:	2b01      	cmp	r3, #1
    3550:	d800      	bhi.n	3554 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3552:	6081      	str	r1, [r0, #8]
		}
	}
}
    3554:	bd30      	pop	{r4, r5, pc}
    3556:	46c0      	nop			; (mov r8, r8)
    3558:	fffbffff 	.word	0xfffbffff

0000355c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    355c:	b508      	push	{r3, lr}
    355e:	1c03      	adds	r3, r0, #0
    3560:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3562:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3564:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3566:	2900      	cmp	r1, #0
    3568:	d104      	bne.n	3574 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    356a:	0958      	lsrs	r0, r3, #5
    356c:	01c0      	lsls	r0, r0, #7
    356e:	4905      	ldr	r1, [pc, #20]	; (3584 <system_pinmux_pin_set_config+0x28>)
    3570:	468c      	mov	ip, r1
    3572:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3574:	211f      	movs	r1, #31
    3576:	400b      	ands	r3, r1
    3578:	391e      	subs	r1, #30
    357a:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    357c:	4b02      	ldr	r3, [pc, #8]	; (3588 <system_pinmux_pin_set_config+0x2c>)
    357e:	4798      	blx	r3
}
    3580:	bd08      	pop	{r3, pc}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	41004400 	.word	0x41004400
    3588:	000034b5 	.word	0x000034b5

0000358c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    358c:	4770      	bx	lr
    358e:	46c0      	nop			; (mov r8, r8)

00003590 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3590:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3592:	4b05      	ldr	r3, [pc, #20]	; (35a8 <system_init+0x18>)
    3594:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3596:	4b05      	ldr	r3, [pc, #20]	; (35ac <system_init+0x1c>)
    3598:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    359a:	4b05      	ldr	r3, [pc, #20]	; (35b0 <system_init+0x20>)
    359c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    359e:	4b05      	ldr	r3, [pc, #20]	; (35b4 <system_init+0x24>)
    35a0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    35a2:	4b05      	ldr	r3, [pc, #20]	; (35b8 <system_init+0x28>)
    35a4:	4798      	blx	r3
}
    35a6:	bd08      	pop	{r3, pc}
    35a8:	00003195 	.word	0x00003195
    35ac:	0000267d 	.word	0x0000267d
    35b0:	00002359 	.word	0x00002359
    35b4:	00002561 	.word	0x00002561
    35b8:	0000358d 	.word	0x0000358d

000035bc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    35bc:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    35be:	0080      	lsls	r0, r0, #2
    35c0:	4b14      	ldr	r3, [pc, #80]	; (3614 <_tc_interrupt_handler+0x58>)
    35c2:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    35c4:	682b      	ldr	r3, [r5, #0]
    35c6:	7b9c      	ldrb	r4, [r3, #14]
    35c8:	7e2b      	ldrb	r3, [r5, #24]
    35ca:	401c      	ands	r4, r3
    35cc:	7e6b      	ldrb	r3, [r5, #25]
    35ce:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    35d0:	07e3      	lsls	r3, r4, #31
    35d2:	d505      	bpl.n	35e0 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    35d4:	1c28      	adds	r0, r5, #0
    35d6:	68ab      	ldr	r3, [r5, #8]
    35d8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    35da:	2301      	movs	r3, #1
    35dc:	682a      	ldr	r2, [r5, #0]
    35de:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    35e0:	07a3      	lsls	r3, r4, #30
    35e2:	d505      	bpl.n	35f0 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    35e4:	1c28      	adds	r0, r5, #0
    35e6:	68eb      	ldr	r3, [r5, #12]
    35e8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    35ea:	2302      	movs	r3, #2
    35ec:	682a      	ldr	r2, [r5, #0]
    35ee:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    35f0:	06e3      	lsls	r3, r4, #27
    35f2:	d505      	bpl.n	3600 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    35f4:	1c28      	adds	r0, r5, #0
    35f6:	692b      	ldr	r3, [r5, #16]
    35f8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    35fa:	2310      	movs	r3, #16
    35fc:	682a      	ldr	r2, [r5, #0]
    35fe:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3600:	06a3      	lsls	r3, r4, #26
    3602:	d505      	bpl.n	3610 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3604:	1c28      	adds	r0, r5, #0
    3606:	696b      	ldr	r3, [r5, #20]
    3608:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    360a:	682b      	ldr	r3, [r5, #0]
    360c:	2220      	movs	r2, #32
    360e:	739a      	strb	r2, [r3, #14]
	}
}
    3610:	bd38      	pop	{r3, r4, r5, pc}
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	200000e8 	.word	0x200000e8

00003618 <TC0_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3618:	b508      	push	{r3, lr}
    361a:	2000      	movs	r0, #0
    361c:	4b01      	ldr	r3, [pc, #4]	; (3624 <TC0_Handler+0xc>)
    361e:	4798      	blx	r3
    3620:	bd08      	pop	{r3, pc}
    3622:	46c0      	nop			; (mov r8, r8)
    3624:	000035bd 	.word	0x000035bd

00003628 <TC1_Handler>:
    3628:	b508      	push	{r3, lr}
    362a:	2001      	movs	r0, #1
    362c:	4b01      	ldr	r3, [pc, #4]	; (3634 <TC1_Handler+0xc>)
    362e:	4798      	blx	r3
    3630:	bd08      	pop	{r3, pc}
    3632:	46c0      	nop			; (mov r8, r8)
    3634:	000035bd 	.word	0x000035bd

00003638 <TC2_Handler>:
    3638:	b508      	push	{r3, lr}
    363a:	2002      	movs	r0, #2
    363c:	4b01      	ldr	r3, [pc, #4]	; (3644 <TC2_Handler+0xc>)
    363e:	4798      	blx	r3
    3640:	bd08      	pop	{r3, pc}
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	000035bd 	.word	0x000035bd

00003648 <TC3_Handler>:
    3648:	b508      	push	{r3, lr}
    364a:	2003      	movs	r0, #3
    364c:	4b01      	ldr	r3, [pc, #4]	; (3654 <TC3_Handler+0xc>)
    364e:	4798      	blx	r3
    3650:	bd08      	pop	{r3, pc}
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	000035bd 	.word	0x000035bd

00003658 <TC4_Handler>:
    3658:	b508      	push	{r3, lr}
    365a:	2004      	movs	r0, #4
    365c:	4b01      	ldr	r3, [pc, #4]	; (3664 <TC4_Handler+0xc>)
    365e:	4798      	blx	r3
    3660:	bd08      	pop	{r3, pc}
    3662:	46c0      	nop			; (mov r8, r8)
    3664:	000035bd 	.word	0x000035bd

00003668 <TC5_Handler>:
    3668:	b508      	push	{r3, lr}
    366a:	2005      	movs	r0, #5
    366c:	4b01      	ldr	r3, [pc, #4]	; (3674 <TC5_Handler+0xc>)
    366e:	4798      	blx	r3
    3670:	bd08      	pop	{r3, pc}
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	000035bd 	.word	0x000035bd

00003678 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    3678:	b530      	push	{r4, r5, lr}
    367a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    367c:	4b0c      	ldr	r3, [pc, #48]	; (36b0 <_tc_get_inst_index+0x38>)
    367e:	466a      	mov	r2, sp
    3680:	cb32      	ldmia	r3!, {r1, r4, r5}
    3682:	c232      	stmia	r2!, {r1, r4, r5}
    3684:	cb32      	ldmia	r3!, {r1, r4, r5}
    3686:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    3688:	9b00      	ldr	r3, [sp, #0]
    368a:	4283      	cmp	r3, r0
    368c:	d006      	beq.n	369c <_tc_get_inst_index+0x24>
    368e:	2301      	movs	r3, #1
    3690:	009a      	lsls	r2, r3, #2
    3692:	4669      	mov	r1, sp
    3694:	5852      	ldr	r2, [r2, r1]
    3696:	4282      	cmp	r2, r0
    3698:	d103      	bne.n	36a2 <_tc_get_inst_index+0x2a>
    369a:	e000      	b.n	369e <_tc_get_inst_index+0x26>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    369c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    369e:	b2d8      	uxtb	r0, r3
    36a0:	e003      	b.n	36aa <_tc_get_inst_index+0x32>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    36a2:	3301      	adds	r3, #1
    36a4:	2b06      	cmp	r3, #6
    36a6:	d1f3      	bne.n	3690 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    36a8:	2000      	movs	r0, #0
}
    36aa:	b007      	add	sp, #28
    36ac:	bd30      	pop	{r4, r5, pc}
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	00004980 	.word	0x00004980

000036b4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    36b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36b6:	464f      	mov	r7, r9
    36b8:	4646      	mov	r6, r8
    36ba:	b4c0      	push	{r6, r7}
    36bc:	b089      	sub	sp, #36	; 0x24
    36be:	1c04      	adds	r4, r0, #0
    36c0:	1c0e      	adds	r6, r1, #0
    36c2:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    36c4:	1c08      	adds	r0, r1, #0
    36c6:	4b91      	ldr	r3, [pc, #580]	; (390c <tc_init+0x258>)
    36c8:	4798      	blx	r3
    36ca:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    36cc:	4d90      	ldr	r5, [pc, #576]	; (3910 <tc_init+0x25c>)
    36ce:	1c29      	adds	r1, r5, #0
    36d0:	3118      	adds	r1, #24
    36d2:	a806      	add	r0, sp, #24
    36d4:	2206      	movs	r2, #6
    36d6:	4f8f      	ldr	r7, [pc, #572]	; (3914 <tc_init+0x260>)
    36d8:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    36da:	1c29      	adds	r1, r5, #0
    36dc:	3120      	adds	r1, #32
    36de:	a803      	add	r0, sp, #12
    36e0:	220c      	movs	r2, #12
    36e2:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    36e4:	2300      	movs	r3, #0
    36e6:	60a3      	str	r3, [r4, #8]
    36e8:	60e3      	str	r3, [r4, #12]
    36ea:	6123      	str	r3, [r4, #16]
    36ec:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    36ee:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    36f0:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    36f2:	464b      	mov	r3, r9
    36f4:	009a      	lsls	r2, r3, #2
    36f6:	4b88      	ldr	r3, [pc, #544]	; (3918 <tc_init+0x264>)
    36f8:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    36fa:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    36fc:	4643      	mov	r3, r8
    36fe:	789b      	ldrb	r3, [r3, #2]
    3700:	2b08      	cmp	r3, #8
    3702:	d104      	bne.n	370e <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3704:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3706:	464a      	mov	r2, r9
    3708:	07d2      	lsls	r2, r2, #31
    370a:	d500      	bpl.n	370e <tc_init+0x5a>
    370c:	e0f9      	b.n	3902 <tc_init+0x24e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    370e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3710:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    3712:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3714:	07db      	lsls	r3, r3, #31
    3716:	d500      	bpl.n	371a <tc_init+0x66>
    3718:	e0f3      	b.n	3902 <tc_init+0x24e>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    371a:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    371c:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    371e:	06db      	lsls	r3, r3, #27
    3720:	d500      	bpl.n	3724 <tc_init+0x70>
    3722:	e0ee      	b.n	3902 <tc_init+0x24e>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    3724:	8833      	ldrh	r3, [r6, #0]
    3726:	079b      	lsls	r3, r3, #30
    3728:	d500      	bpl.n	372c <tc_init+0x78>
    372a:	e0ea      	b.n	3902 <tc_init+0x24e>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    372c:	4643      	mov	r3, r8
    372e:	7c1b      	ldrb	r3, [r3, #16]
    3730:	2b00      	cmp	r3, #0
    3732:	d00c      	beq.n	374e <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3734:	a902      	add	r1, sp, #8
    3736:	2301      	movs	r3, #1
    3738:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    373a:	2200      	movs	r2, #0
    373c:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    373e:	4642      	mov	r2, r8
    3740:	7e12      	ldrb	r2, [r2, #24]
    3742:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3744:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    3746:	4643      	mov	r3, r8
    3748:	7d18      	ldrb	r0, [r3, #20]
    374a:	4b74      	ldr	r3, [pc, #464]	; (391c <tc_init+0x268>)
    374c:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    374e:	4643      	mov	r3, r8
    3750:	7f1b      	ldrb	r3, [r3, #28]
    3752:	2b00      	cmp	r3, #0
    3754:	d00d      	beq.n	3772 <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3756:	a902      	add	r1, sp, #8
    3758:	2301      	movs	r3, #1
    375a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    375c:	2200      	movs	r2, #0
    375e:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    3760:	4642      	mov	r2, r8
    3762:	6a52      	ldr	r2, [r2, #36]	; 0x24
    3764:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3766:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    3768:	4643      	mov	r3, r8
    376a:	6a1b      	ldr	r3, [r3, #32]
    376c:	b2d8      	uxtb	r0, r3
    376e:	4b6b      	ldr	r3, [pc, #428]	; (391c <tc_init+0x268>)
    3770:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3772:	496b      	ldr	r1, [pc, #428]	; (3920 <tc_init+0x26c>)
    3774:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    3776:	464a      	mov	r2, r9
    3778:	0052      	lsls	r2, r2, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    377a:	a803      	add	r0, sp, #12
    377c:	5a12      	ldrh	r2, [r2, r0]
    377e:	4313      	orrs	r3, r2
    3780:	620b      	str	r3, [r1, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    3782:	4643      	mov	r3, r8
    3784:	789b      	ldrb	r3, [r3, #2]
    3786:	2b08      	cmp	r3, #8
    3788:	d106      	bne.n	3798 <tc_init+0xe4>
    378a:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    378c:	464a      	mov	r2, r9
    378e:	3201      	adds	r2, #1
    3790:	0052      	lsls	r2, r2, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3792:	5a12      	ldrh	r2, [r2, r0]
    3794:	4313      	orrs	r3, r2
    3796:	620b      	str	r3, [r1, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    3798:	a901      	add	r1, sp, #4
    379a:	4643      	mov	r3, r8
    379c:	781b      	ldrb	r3, [r3, #0]
    379e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    37a0:	ab06      	add	r3, sp, #24
    37a2:	464a      	mov	r2, r9
    37a4:	5c9d      	ldrb	r5, [r3, r2]
    37a6:	1c28      	adds	r0, r5, #0
    37a8:	4b5e      	ldr	r3, [pc, #376]	; (3924 <tc_init+0x270>)
    37aa:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    37ac:	1c28      	adds	r0, r5, #0
    37ae:	4b5e      	ldr	r3, [pc, #376]	; (3928 <tc_init+0x274>)
    37b0:	4798      	blx	r3
    37b2:	4643      	mov	r3, r8
    37b4:	8898      	ldrh	r0, [r3, #4]
    37b6:	891b      	ldrh	r3, [r3, #8]
    37b8:	4303      	orrs	r3, r0

	/* Set ctrla register */
	ctrla_tmp =
    37ba:	4642      	mov	r2, r8
    37bc:	7990      	ldrb	r0, [r2, #6]
    37be:	7892      	ldrb	r2, [r2, #2]
    37c0:	4310      	orrs	r0, r2
    37c2:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    37c4:	4643      	mov	r3, r8
    37c6:	785b      	ldrb	r3, [r3, #1]
    37c8:	2b00      	cmp	r3, #0
    37ca:	d002      	beq.n	37d2 <tc_init+0x11e>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    37cc:	2380      	movs	r3, #128	; 0x80
    37ce:	011b      	lsls	r3, r3, #4
    37d0:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    37d2:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    37d4:	227f      	movs	r2, #127	; 0x7f
    37d6:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    37d8:	4393      	bics	r3, r2
    37da:	d1fc      	bne.n	37d6 <tc_init+0x122>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    37dc:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    37de:	4643      	mov	r3, r8
    37e0:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    37e2:	1e43      	subs	r3, r0, #1
    37e4:	4198      	sbcs	r0, r3
    37e6:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    37e8:	4643      	mov	r3, r8
    37ea:	7b9b      	ldrb	r3, [r3, #14]
    37ec:	2b00      	cmp	r3, #0
    37ee:	d001      	beq.n	37f4 <tc_init+0x140>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    37f0:	2301      	movs	r3, #1
    37f2:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    37f4:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    37f6:	227f      	movs	r2, #127	; 0x7f
    37f8:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    37fa:	4393      	bics	r3, r2
    37fc:	d1fc      	bne.n	37f8 <tc_init+0x144>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    37fe:	33ff      	adds	r3, #255	; 0xff
    3800:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    3802:	2800      	cmp	r0, #0
    3804:	d005      	beq.n	3812 <tc_init+0x15e>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3806:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3808:	227f      	movs	r2, #127	; 0x7f
    380a:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    380c:	4393      	bics	r3, r2
    380e:	d1fc      	bne.n	380a <tc_init+0x156>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    3810:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    3812:	4643      	mov	r3, r8
    3814:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    3816:	7adb      	ldrb	r3, [r3, #11]
    3818:	2b00      	cmp	r3, #0
    381a:	d001      	beq.n	3820 <tc_init+0x16c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    381c:	2310      	movs	r3, #16
    381e:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    3820:	4643      	mov	r3, r8
    3822:	7b1b      	ldrb	r3, [r3, #12]
    3824:	2b00      	cmp	r3, #0
    3826:	d001      	beq.n	382c <tc_init+0x178>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    3828:	2320      	movs	r3, #32
    382a:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    382c:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    382e:	227f      	movs	r2, #127	; 0x7f
    3830:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3832:	4393      	bics	r3, r2
    3834:	d1fc      	bne.n	3830 <tc_init+0x17c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    3836:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3838:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    383a:	217f      	movs	r1, #127	; 0x7f
    383c:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    383e:	438b      	bics	r3, r1
    3840:	d1fc      	bne.n	383c <tc_init+0x188>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    3842:	7923      	ldrb	r3, [r4, #4]
    3844:	2b04      	cmp	r3, #4
    3846:	d005      	beq.n	3854 <tc_init+0x1a0>
    3848:	2b08      	cmp	r3, #8
    384a:	d041      	beq.n	38d0 <tc_init+0x21c>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    384c:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    384e:	2b00      	cmp	r3, #0
    3850:	d157      	bne.n	3902 <tc_init+0x24e>
    3852:	e024      	b.n	389e <tc_init+0x1ea>
    3854:	217f      	movs	r1, #127	; 0x7f
    3856:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    3858:	438b      	bics	r3, r1
    385a:	d1fc      	bne.n	3856 <tc_init+0x1a2>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    385c:	3328      	adds	r3, #40	; 0x28
    385e:	4642      	mov	r2, r8
    3860:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    3862:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3864:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3866:	227f      	movs	r2, #127	; 0x7f
    3868:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    386a:	4393      	bics	r3, r2
    386c:	d1fc      	bne.n	3868 <tc_init+0x1b4>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    386e:	3329      	adds	r3, #41	; 0x29
    3870:	4642      	mov	r2, r8
    3872:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    3874:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3876:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3878:	227f      	movs	r2, #127	; 0x7f
    387a:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    387c:	4393      	bics	r3, r2
    387e:	d1fc      	bne.n	387a <tc_init+0x1c6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    3880:	332a      	adds	r3, #42	; 0x2a
    3882:	4642      	mov	r2, r8
    3884:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    3886:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3888:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    388a:	227f      	movs	r2, #127	; 0x7f
    388c:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    388e:	4393      	bics	r3, r2
    3890:	d1fc      	bne.n	388c <tc_init+0x1d8>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    3892:	332b      	adds	r3, #43	; 0x2b
    3894:	4642      	mov	r2, r8
    3896:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    3898:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    389a:	2000      	movs	r0, #0
    389c:	e031      	b.n	3902 <tc_init+0x24e>
    389e:	217f      	movs	r1, #127	; 0x7f
    38a0:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    38a2:	438b      	bics	r3, r1
    38a4:	d1fc      	bne.n	38a0 <tc_init+0x1ec>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    38a6:	4643      	mov	r3, r8
    38a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    38aa:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    38ac:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    38ae:	227f      	movs	r2, #127	; 0x7f
    38b0:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    38b2:	4393      	bics	r3, r2
    38b4:	d1fc      	bne.n	38b0 <tc_init+0x1fc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    38b6:	4643      	mov	r3, r8
    38b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    38ba:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    38bc:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    38be:	227f      	movs	r2, #127	; 0x7f
    38c0:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    38c2:	4393      	bics	r3, r2
    38c4:	d1fc      	bne.n	38c0 <tc_init+0x20c>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    38c6:	4643      	mov	r3, r8
    38c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    38ca:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    38cc:	2000      	movs	r0, #0
    38ce:	e018      	b.n	3902 <tc_init+0x24e>
    38d0:	217f      	movs	r1, #127	; 0x7f
    38d2:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    38d4:	438b      	bics	r3, r1
    38d6:	d1fc      	bne.n	38d2 <tc_init+0x21e>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    38d8:	4643      	mov	r3, r8
    38da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38dc:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    38de:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    38e0:	227f      	movs	r2, #127	; 0x7f
    38e2:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    38e4:	4393      	bics	r3, r2
    38e6:	d1fc      	bne.n	38e2 <tc_init+0x22e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    38e8:	4643      	mov	r3, r8
    38ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38ec:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    38ee:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    38f0:	227f      	movs	r2, #127	; 0x7f
    38f2:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    38f4:	4393      	bics	r3, r2
    38f6:	d1fc      	bne.n	38f2 <tc_init+0x23e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    38f8:	4643      	mov	r3, r8
    38fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    38fc:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    38fe:	2000      	movs	r0, #0
    3900:	e7ff      	b.n	3902 <tc_init+0x24e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    3902:	b009      	add	sp, #36	; 0x24
    3904:	bc0c      	pop	{r2, r3}
    3906:	4690      	mov	r8, r2
    3908:	4699      	mov	r9, r3
    390a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    390c:	00003679 	.word	0x00003679
    3910:	00004980 	.word	0x00004980
    3914:	00004765 	.word	0x00004765
    3918:	200000e8 	.word	0x200000e8
    391c:	0000355d 	.word	0x0000355d
    3920:	40000400 	.word	0x40000400
    3924:	00003465 	.word	0x00003465
    3928:	000033d9 	.word	0x000033d9

0000392c <Dummy_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    392c:	f3ef 8305 	mrs	r3, IPSR
    3930:	e7fc      	b.n	392c <Dummy_Handler>
    3932:	46c0      	nop			; (mov r8, r8)

00003934 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3934:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    3936:	4b1d      	ldr	r3, [pc, #116]	; (39ac <Reset_Handler+0x78>)
    3938:	4a1d      	ldr	r2, [pc, #116]	; (39b0 <Reset_Handler+0x7c>)
    393a:	429a      	cmp	r2, r3
    393c:	d003      	beq.n	3946 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    393e:	4b1d      	ldr	r3, [pc, #116]	; (39b4 <Reset_Handler+0x80>)
    3940:	4a1a      	ldr	r2, [pc, #104]	; (39ac <Reset_Handler+0x78>)
    3942:	429a      	cmp	r2, r3
    3944:	d304      	bcc.n	3950 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3946:	4b1c      	ldr	r3, [pc, #112]	; (39b8 <Reset_Handler+0x84>)
    3948:	4a1c      	ldr	r2, [pc, #112]	; (39bc <Reset_Handler+0x88>)
    394a:	429a      	cmp	r2, r3
    394c:	d310      	bcc.n	3970 <Reset_Handler+0x3c>
    394e:	e01e      	b.n	398e <Reset_Handler+0x5a>
    3950:	4a1b      	ldr	r2, [pc, #108]	; (39c0 <Reset_Handler+0x8c>)
    3952:	4b18      	ldr	r3, [pc, #96]	; (39b4 <Reset_Handler+0x80>)
    3954:	3303      	adds	r3, #3
    3956:	1a9b      	subs	r3, r3, r2
    3958:	089b      	lsrs	r3, r3, #2
    395a:	3301      	adds	r3, #1
    395c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    395e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3960:	4812      	ldr	r0, [pc, #72]	; (39ac <Reset_Handler+0x78>)
    3962:	4913      	ldr	r1, [pc, #76]	; (39b0 <Reset_Handler+0x7c>)
    3964:	588c      	ldr	r4, [r1, r2]
    3966:	5084      	str	r4, [r0, r2]
    3968:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    396a:	429a      	cmp	r2, r3
    396c:	d1fa      	bne.n	3964 <Reset_Handler+0x30>
    396e:	e7ea      	b.n	3946 <Reset_Handler+0x12>
    3970:	4a14      	ldr	r2, [pc, #80]	; (39c4 <Reset_Handler+0x90>)
    3972:	4b11      	ldr	r3, [pc, #68]	; (39b8 <Reset_Handler+0x84>)
    3974:	3303      	adds	r3, #3
    3976:	1a9b      	subs	r3, r3, r2
    3978:	089b      	lsrs	r3, r3, #2
    397a:	3301      	adds	r3, #1
    397c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    397e:	2200      	movs	r2, #0
                *pDest++ = 0;
    3980:	480e      	ldr	r0, [pc, #56]	; (39bc <Reset_Handler+0x88>)
    3982:	2100      	movs	r1, #0
    3984:	1814      	adds	r4, r2, r0
    3986:	6021      	str	r1, [r4, #0]
    3988:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    398a:	429a      	cmp	r2, r3
    398c:	d1fa      	bne.n	3984 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    398e:	4a0e      	ldr	r2, [pc, #56]	; (39c8 <Reset_Handler+0x94>)
    3990:	21ff      	movs	r1, #255	; 0xff
    3992:	4b0e      	ldr	r3, [pc, #56]	; (39cc <Reset_Handler+0x98>)
    3994:	438b      	bics	r3, r1
    3996:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3998:	4a0d      	ldr	r2, [pc, #52]	; (39d0 <Reset_Handler+0x9c>)
    399a:	6851      	ldr	r1, [r2, #4]
    399c:	2380      	movs	r3, #128	; 0x80
    399e:	430b      	orrs	r3, r1
    39a0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    39a2:	4b0c      	ldr	r3, [pc, #48]	; (39d4 <Reset_Handler+0xa0>)
    39a4:	4798      	blx	r3

        /* Branch to main function */
        main();
    39a6:	4b0c      	ldr	r3, [pc, #48]	; (39d8 <Reset_Handler+0xa4>)
    39a8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    39aa:	e7fe      	b.n	39aa <Reset_Handler+0x76>
    39ac:	20000000 	.word	0x20000000
    39b0:	000049e0 	.word	0x000049e0
    39b4:	20000024 	.word	0x20000024
    39b8:	2000088c 	.word	0x2000088c
    39bc:	20000024 	.word	0x20000024
    39c0:	20000004 	.word	0x20000004
    39c4:	20000028 	.word	0x20000028
    39c8:	e000ed00 	.word	0xe000ed00
    39cc:	00000000 	.word	0x00000000
    39d0:	41004000 	.word	0x41004000
    39d4:	00004719 	.word	0x00004719
    39d8:	0000421d 	.word	0x0000421d

000039dc <extint_detection_callback>:
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    39dc:	4b05      	ldr	r3, [pc, #20]	; (39f4 <extint_detection_callback+0x18>)
    39de:	6a1b      	ldr	r3, [r3, #32]
	
}

void extint_detection_callback(void)
{
	if(button_is_pressed())
    39e0:	061b      	lsls	r3, r3, #24
    39e2:	d403      	bmi.n	39ec <extint_detection_callback+0x10>
		flag_button = 1;
    39e4:	2201      	movs	r2, #1
    39e6:	4b04      	ldr	r3, [pc, #16]	; (39f8 <extint_detection_callback+0x1c>)
    39e8:	701a      	strb	r2, [r3, #0]
    39ea:	e002      	b.n	39f2 <extint_detection_callback+0x16>
	else
		flag_button = 0;
    39ec:	2200      	movs	r2, #0
    39ee:	4b02      	ldr	r3, [pc, #8]	; (39f8 <extint_detection_callback+0x1c>)
    39f0:	701a      	strb	r2, [r3, #0]
}
    39f2:	4770      	bx	lr
    39f4:	41004400 	.word	0x41004400
    39f8:	20000088 	.word	0x20000088

000039fc <usart_write_callback>:

	}
}


void usart_write_callback(struct usart_module *const usart_module){
    39fc:	b508      	push	{r3, lr}
	char writeguard[3];
	if(buffer_counter >= 2)
    39fe:	4b0c      	ldr	r3, [pc, #48]	; (3a30 <usart_write_callback+0x34>)
    3a00:	881b      	ldrh	r3, [r3, #0]
    3a02:	b29b      	uxth	r3, r3
    3a04:	2b01      	cmp	r3, #1
    3a06:	d90a      	bls.n	3a1e <usart_write_callback+0x22>
		usart_write_buffer_job(&usart_instance, buffer_current + buffer_counter - 2, 2);
    3a08:	4b09      	ldr	r3, [pc, #36]	; (3a30 <usart_write_callback+0x34>)
    3a0a:	8819      	ldrh	r1, [r3, #0]
    3a0c:	3902      	subs	r1, #2
    3a0e:	4b09      	ldr	r3, [pc, #36]	; (3a34 <usart_write_callback+0x38>)
    3a10:	681b      	ldr	r3, [r3, #0]
    3a12:	1859      	adds	r1, r3, r1
    3a14:	4808      	ldr	r0, [pc, #32]	; (3a38 <usart_write_callback+0x3c>)
    3a16:	2202      	movs	r2, #2
    3a18:	4b08      	ldr	r3, [pc, #32]	; (3a3c <usart_write_callback+0x40>)
    3a1a:	4798      	blx	r3
    3a1c:	e007      	b.n	3a2e <usart_write_callback+0x32>
	else
		usart_write_buffer_job(&usart_instance, buffer_last + BUFFER_SIZE - 2, 2);
    3a1e:	4b08      	ldr	r3, [pc, #32]	; (3a40 <usart_write_callback+0x44>)
    3a20:	6819      	ldr	r1, [r3, #0]
    3a22:	31ff      	adds	r1, #255	; 0xff
    3a24:	31ff      	adds	r1, #255	; 0xff
    3a26:	4804      	ldr	r0, [pc, #16]	; (3a38 <usart_write_callback+0x3c>)
    3a28:	2202      	movs	r2, #2
    3a2a:	4b04      	ldr	r3, [pc, #16]	; (3a3c <usart_write_callback+0x40>)
    3a2c:	4798      	blx	r3
		
}
    3a2e:	bd08      	pop	{r3, pc}
    3a30:	20000086 	.word	0x20000086
    3a34:	20000100 	.word	0x20000100
    3a38:	20000104 	.word	0x20000104
    3a3c:	00002e71 	.word	0x00002e71
    3a40:	20000360 	.word	0x20000360

00003a44 <get_fattime>:
	| ((DWORD)7 << 21)				/* Month 7 */
	| ((DWORD)28 << 16)				/* Mday 28 */
	| ((DWORD)0 << 11)				/* Hour 0 */
	| ((DWORD)0 << 5)				/* Min 0 */
	| ((DWORD)0 >> 1);				/* Sec 0 */
}
    3a44:	4800      	ldr	r0, [pc, #0]	; (3a48 <get_fattime+0x4>)
    3a46:	4770      	bx	lr
    3a48:	42fc0000 	.word	0x42fc0000

00003a4c <sdcard_init>:

uint8_t sdcard_init(void){
    3a4c:	b510      	push	{r4, lr}
	
	
	//Mount the memory card and create a file
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    3a4e:	4809      	ldr	r0, [pc, #36]	; (3a74 <sdcard_init+0x28>)
    3a50:	4909      	ldr	r1, [pc, #36]	; (3a78 <sdcard_init+0x2c>)
    3a52:	2200      	movs	r2, #0
    3a54:	4b09      	ldr	r3, [pc, #36]	; (3a7c <sdcard_init+0x30>)
    3a56:	4798      	blx	r3
	//Delete existing file
	f_unlink("ecgdata.bin");
    3a58:	4c09      	ldr	r4, [pc, #36]	; (3a80 <sdcard_init+0x34>)
    3a5a:	1c20      	adds	r0, r4, #0
    3a5c:	4b09      	ldr	r3, [pc, #36]	; (3a84 <sdcard_init+0x38>)
    3a5e:	4798      	blx	r3
	
	if (f_open(&Fil, "ecgdata.bin", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) 	/* Create a file */
    3a60:	4809      	ldr	r0, [pc, #36]	; (3a88 <sdcard_init+0x3c>)
    3a62:	1c21      	adds	r1, r4, #0
    3a64:	220a      	movs	r2, #10
    3a66:	4b09      	ldr	r3, [pc, #36]	; (3a8c <sdcard_init+0x40>)
    3a68:	4798      	blx	r3
    3a6a:	4243      	negs	r3, r0
    3a6c:	4158      	adcs	r0, r3
    3a6e:	b2c0      	uxtb	r0, r0
	return 1;
	else
	return 0;
	
}
    3a70:	bd10      	pop	{r4, pc}
    3a72:	46c0      	nop			; (mov r8, r8)
    3a74:	20000128 	.word	0x20000128
    3a78:	000049b0 	.word	0x000049b0
    3a7c:	000010f1 	.word	0x000010f1
    3a80:	000049b4 	.word	0x000049b4
    3a84:	00001569 	.word	0x00001569
    3a88:	20000660 	.word	0x20000660
    3a8c:	0000115d 	.word	0x0000115d

00003a90 <sdcard_write>:

uint8_t sdcard_write(char *charbuffer, uint16_t size){
    3a90:	b530      	push	{r4, r5, lr}
    3a92:	b083      	sub	sp, #12
    3a94:	1c03      	adds	r3, r0, #0
    3a96:	1c0c      	adds	r4, r1, #0
	
	UINT bw;
	//Write the data to the file
	
	f_write(&Fil, charbuffer, size, &bw);
    3a98:	4806      	ldr	r0, [pc, #24]	; (3ab4 <sdcard_write+0x24>)
    3a9a:	1c19      	adds	r1, r3, #0
    3a9c:	1c22      	adds	r2, r4, #0
    3a9e:	ab01      	add	r3, sp, #4
    3aa0:	4d05      	ldr	r5, [pc, #20]	; (3ab8 <sdcard_write+0x28>)
    3aa2:	47a8      	blx	r5
	
	//set interrupt flag here
	if (bw == size)
    3aa4:	9b01      	ldr	r3, [sp, #4]
    3aa6:	1ae0      	subs	r0, r4, r3
    3aa8:	4244      	negs	r4, r0
    3aaa:	4160      	adcs	r0, r4
	return 1;
    3aac:	b2c0      	uxtb	r0, r0
	else
	return 0;
	
}
    3aae:	b003      	add	sp, #12
    3ab0:	bd30      	pop	{r4, r5, pc}
    3ab2:	46c0      	nop			; (mov r8, r8)
    3ab4:	20000660 	.word	0x20000660
    3ab8:	000012e9 	.word	0x000012e9

00003abc <sdcard_close>:

void sdcard_close(void){
    3abc:	b570      	push	{r4, r5, r6, lr}
    3abe:	b082      	sub	sp, #8
	
	//Disable the analogue module
	
	//Write saved timestamps to the end of the file
	char stopbytes[2] = {0xFF, 0xFF};
    3ac0:	a801      	add	r0, sp, #4
    3ac2:	4912      	ldr	r1, [pc, #72]	; (3b0c <sdcard_close+0x50>)
    3ac4:	2202      	movs	r2, #2
    3ac6:	4b12      	ldr	r3, [pc, #72]	; (3b10 <sdcard_close+0x54>)
    3ac8:	4798      	blx	r3
	sdcard_write(stopbytes, 2);
    3aca:	a801      	add	r0, sp, #4
    3acc:	2102      	movs	r1, #2
    3ace:	4b11      	ldr	r3, [pc, #68]	; (3b14 <sdcard_close+0x58>)
    3ad0:	4798      	blx	r3
	while(buttoncounter){
    3ad2:	4b11      	ldr	r3, [pc, #68]	; (3b18 <sdcard_close+0x5c>)
    3ad4:	881b      	ldrh	r3, [r3, #0]
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d013      	beq.n	3b02 <sdcard_close+0x46>
		//We better store the timestamps as 2 x uint16 little endian so Matlab can easily read the values along with the samples.
		//Endianess of the total uint32 doesn't matter.
		char timestamp_buffer[4] = {buttonstamps[buttoncounter-1]>>16&0xFF, buttonstamps[buttoncounter-1]>>24 & 0xFF,buttonstamps[buttoncounter-1]&0xFF,buttonstamps[buttoncounter-1]>>8&0xFF};
    3ada:	4e10      	ldr	r6, [pc, #64]	; (3b1c <sdcard_close+0x60>)
		buttoncounter--;
    3adc:	4c0e      	ldr	r4, [pc, #56]	; (3b18 <sdcard_close+0x5c>)
		sdcard_write(timestamp_buffer, 4);
    3ade:	4d0d      	ldr	r5, [pc, #52]	; (3b14 <sdcard_close+0x58>)
	char stopbytes[2] = {0xFF, 0xFF};
	sdcard_write(stopbytes, 2);
	while(buttoncounter){
		//We better store the timestamps as 2 x uint16 little endian so Matlab can easily read the values along with the samples.
		//Endianess of the total uint32 doesn't matter.
		char timestamp_buffer[4] = {buttonstamps[buttoncounter-1]>>16&0xFF, buttonstamps[buttoncounter-1]>>24 & 0xFF,buttonstamps[buttoncounter-1]&0xFF,buttonstamps[buttoncounter-1]>>8&0xFF};
    3ae0:	1e5a      	subs	r2, r3, #1
    3ae2:	0093      	lsls	r3, r2, #2
    3ae4:	599b      	ldr	r3, [r3, r6]
    3ae6:	0c19      	lsrs	r1, r3, #16
    3ae8:	4668      	mov	r0, sp
    3aea:	7001      	strb	r1, [r0, #0]
    3aec:	0e19      	lsrs	r1, r3, #24
    3aee:	7041      	strb	r1, [r0, #1]
    3af0:	7083      	strb	r3, [r0, #2]
    3af2:	0a1b      	lsrs	r3, r3, #8
    3af4:	70c3      	strb	r3, [r0, #3]
		buttoncounter--;
    3af6:	8022      	strh	r2, [r4, #0]
		sdcard_write(timestamp_buffer, 4);
    3af8:	2104      	movs	r1, #4
    3afa:	47a8      	blx	r5
	//Disable the analogue module
	
	//Write saved timestamps to the end of the file
	char stopbytes[2] = {0xFF, 0xFF};
	sdcard_write(stopbytes, 2);
	while(buttoncounter){
    3afc:	8823      	ldrh	r3, [r4, #0]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d1ee      	bne.n	3ae0 <sdcard_close+0x24>
		char timestamp_buffer[4] = {buttonstamps[buttoncounter-1]>>16&0xFF, buttonstamps[buttoncounter-1]>>24 & 0xFF,buttonstamps[buttoncounter-1]&0xFF,buttonstamps[buttoncounter-1]>>8&0xFF};
		buttoncounter--;
		sdcard_write(timestamp_buffer, 4);
	}
	//Close and sync the file. Must be done before powerdown or removal of sd card.
	f_close(&Fil);
    3b02:	4807      	ldr	r0, [pc, #28]	; (3b20 <sdcard_close+0x64>)
    3b04:	4b07      	ldr	r3, [pc, #28]	; (3b24 <sdcard_close+0x68>)
    3b06:	4798      	blx	r3
}
    3b08:	b002      	add	sp, #8
    3b0a:	bd70      	pop	{r4, r5, r6, pc}
    3b0c:	000049ac 	.word	0x000049ac
    3b10:	00004765 	.word	0x00004765
    3b14:	00003a91 	.word	0x00003a91
    3b18:	2000007c 	.word	0x2000007c
    3b1c:	20000384 	.word	0x20000384
    3b20:	20000660 	.word	0x20000660
    3b24:	00001545 	.word	0x00001545

00003b28 <configure_extint_channel>:


void configure_extint_channel(void)
{
    3b28:	b510      	push	{r4, lr}
    3b2a:	b084      	sub	sp, #16
	//! [setup_1]
	struct extint_chan_conf config_extint_chan;
	//! [setup_1]
	//! [setup_2]
	extint_chan_get_config_defaults(&config_extint_chan);
    3b2c:	ac01      	add	r4, sp, #4
    3b2e:	1c20      	adds	r0, r4, #0
    3b30:	4b08      	ldr	r3, [pc, #32]	; (3b54 <configure_extint_channel+0x2c>)
    3b32:	4798      	blx	r3
	//! [setup_2]

	//! [setup_3]
	config_extint_chan.gpio_pin           = SW0_EIC_PIN;
    3b34:	2307      	movs	r3, #7
    3b36:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = SW0_EIC_MUX;
    3b38:	2300      	movs	r3, #0
    3b3a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    3b3c:	3301      	adds	r3, #1
    3b3e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    3b40:	2202      	movs	r2, #2
    3b42:	72e2      	strb	r2, [r4, #11]
	config_extint_chan.wake_if_sleeping = true;
    3b44:	7263      	strb	r3, [r4, #9]
	//! [setup_3]
	//! [setup_4]
	extint_chan_set_config(SW0_EIC_LINE, &config_extint_chan);
    3b46:	2007      	movs	r0, #7
    3b48:	1c21      	adds	r1, r4, #0
    3b4a:	4b03      	ldr	r3, [pc, #12]	; (3b58 <configure_extint_channel+0x30>)
    3b4c:	4798      	blx	r3
	//! [setup_4]
	
	
}
    3b4e:	b004      	add	sp, #16
    3b50:	bd10      	pop	{r4, pc}
    3b52:	46c0      	nop			; (mov r8, r8)
    3b54:	000025cd 	.word	0x000025cd
    3b58:	000025e1 	.word	0x000025e1

00003b5c <configure_extint_callbacks>:

void configure_extint_callbacks(void)
{
    3b5c:	b508      	push	{r3, lr}
	//! [setup_5]
	extint_register_callback(extint_detection_callback,
    3b5e:	4805      	ldr	r0, [pc, #20]	; (3b74 <configure_extint_callbacks+0x18>)
    3b60:	2107      	movs	r1, #7
    3b62:	2200      	movs	r2, #0
    3b64:	4b04      	ldr	r3, [pc, #16]	; (3b78 <configure_extint_callbacks+0x1c>)
    3b66:	4798      	blx	r3
	SW0_EIC_LINE,
	EXTINT_CALLBACK_TYPE_DETECT);
	//! [setup_5]
	//! [setup_6]
	extint_chan_enable_callback(SW0_EIC_LINE,
    3b68:	2007      	movs	r0, #7
    3b6a:	2100      	movs	r1, #0
    3b6c:	4b03      	ldr	r3, [pc, #12]	; (3b7c <configure_extint_callbacks+0x20>)
    3b6e:	4798      	blx	r3
	EXTINT_CALLBACK_TYPE_DETECT);
	//! [setup_6]
}
    3b70:	bd08      	pop	{r3, pc}
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	000039dd 	.word	0x000039dd
    3b78:	00002495 	.word	0x00002495
    3b7c:	000024c1 	.word	0x000024c1

00003b80 <configure_usart>:

void configure_usart(void){
    3b80:	b570      	push	{r4, r5, r6, lr}
    3b82:	b08c      	sub	sp, #48	; 0x30
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3b84:	2380      	movs	r3, #128	; 0x80
    3b86:	05db      	lsls	r3, r3, #23
    3b88:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3b8a:	2300      	movs	r3, #0
    3b8c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3b8e:	22ff      	movs	r2, #255	; 0xff
    3b90:	4669      	mov	r1, sp
    3b92:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3b94:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3b96:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    3b98:	2296      	movs	r2, #150	; 0x96
    3b9a:	0192      	lsls	r2, r2, #6
    3b9c:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
    3b9e:	2201      	movs	r2, #1
    3ba0:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    3ba2:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    3ba4:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    3ba6:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    3ba8:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3baa:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    3bac:	774b      	strb	r3, [r1, #29]
		usart_get_config_defaults(&config_usart);
		//! [setup_config_defaults]

		//! [setup_change_config]
		config_usart.baudrate    = 9600;
		config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    3bae:	2380      	movs	r3, #128	; 0x80
    3bb0:	035b      	lsls	r3, r3, #13
    3bb2:	9303      	str	r3, [sp, #12]
		config_usart.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    3bb4:	4b14      	ldr	r3, [pc, #80]	; (3c08 <configure_usart+0x88>)
    3bb6:	9308      	str	r3, [sp, #32]
		config_usart.pinmux_pad1 = PINMUX_PA17C_SERCOM1_PAD1;
    3bb8:	4b14      	ldr	r3, [pc, #80]	; (3c0c <configure_usart+0x8c>)
    3bba:	9309      	str	r3, [sp, #36]	; 0x24
		config_usart.pinmux_pad2 = PINMUX_UNUSED;
    3bbc:	2301      	movs	r3, #1
    3bbe:	425b      	negs	r3, r3
    3bc0:	930a      	str	r3, [sp, #40]	; 0x28
		config_usart.pinmux_pad3 = PINMUX_UNUSED;
    3bc2:	930b      	str	r3, [sp, #44]	; 0x2c
		//! [setup_change_config]

		//! [setup_set_config]
		while (usart_init(&usart_instance, SERCOM1, &config_usart) != STATUS_OK) {
    3bc4:	4e12      	ldr	r6, [pc, #72]	; (3c10 <configure_usart+0x90>)
    3bc6:	4d13      	ldr	r5, [pc, #76]	; (3c14 <configure_usart+0x94>)
    3bc8:	4c13      	ldr	r4, [pc, #76]	; (3c18 <configure_usart+0x98>)
    3bca:	1c30      	adds	r0, r6, #0
    3bcc:	1c29      	adds	r1, r5, #0
    3bce:	466a      	mov	r2, sp
    3bd0:	47a0      	blx	r4
    3bd2:	2800      	cmp	r0, #0
    3bd4:	d1f9      	bne.n	3bca <configure_usart+0x4a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bd6:	4d0e      	ldr	r5, [pc, #56]	; (3c10 <configure_usart+0x90>)
    3bd8:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3bda:	1c20      	adds	r0, r4, #0
    3bdc:	4b0f      	ldr	r3, [pc, #60]	; (3c1c <configure_usart+0x9c>)
    3bde:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3be0:	231f      	movs	r3, #31
    3be2:	4018      	ands	r0, r3
    3be4:	3b1e      	subs	r3, #30
    3be6:	4083      	lsls	r3, r0
    3be8:	1c18      	adds	r0, r3, #0
    3bea:	4b0d      	ldr	r3, [pc, #52]	; (3c20 <configure_usart+0xa0>)
    3bec:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3bee:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    3bf0:	8a13      	ldrh	r3, [r2, #16]
    3bf2:	0bdb      	lsrs	r3, r3, #15
    3bf4:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3bf6:	b29b      	uxth	r3, r3
    3bf8:	2b00      	cmp	r3, #0
    3bfa:	d1f9      	bne.n	3bf0 <configure_usart+0x70>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3bfc:	6822      	ldr	r2, [r4, #0]
    3bfe:	3302      	adds	r3, #2
    3c00:	4313      	orrs	r3, r2
    3c02:	6023      	str	r3, [r4, #0]
		//! [setup_set_config]

		//! [setup_enable]
		usart_enable(&usart_instance);
		//! [setup_enable]
}
    3c04:	b00c      	add	sp, #48	; 0x30
    3c06:	bd70      	pop	{r4, r5, r6, pc}
    3c08:	00100002 	.word	0x00100002
    3c0c:	00110002 	.word	0x00110002
    3c10:	20000104 	.word	0x20000104
    3c14:	42000c00 	.word	0x42000c00
    3c18:	00002bc1 	.word	0x00002bc1
    3c1c:	00002b55 	.word	0x00002b55
    3c20:	e000e100 	.word	0xe000e100

00003c24 <configure_usart_callback>:

void configure_usart_callback(void){
    3c24:	b510      	push	{r4, lr}
	//! [setup_register_callbacks]
	usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    3c26:	4c06      	ldr	r4, [pc, #24]	; (3c40 <configure_usart_callback+0x1c>)
    3c28:	1c20      	adds	r0, r4, #0
    3c2a:	4906      	ldr	r1, [pc, #24]	; (3c44 <configure_usart_callback+0x20>)
    3c2c:	2200      	movs	r2, #0
    3c2e:	4b06      	ldr	r3, [pc, #24]	; (3c48 <configure_usart_callback+0x24>)
    3c30:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3c32:	2221      	movs	r2, #33	; 0x21
    3c34:	5ca1      	ldrb	r1, [r4, r2]
    3c36:	2301      	movs	r3, #1
    3c38:	430b      	orrs	r3, r1
    3c3a:	54a3      	strb	r3, [r4, r2]
	//! [setup_enable_callbacks]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	//usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
	
}
    3c3c:	bd10      	pop	{r4, pc}
    3c3e:	46c0      	nop			; (mov r8, r8)
    3c40:	20000104 	.word	0x20000104
    3c44:	000039fd 	.word	0x000039fd
    3c48:	00002e59 	.word	0x00002e59

00003c4c <configure_adc>:

void configure_adc(void){
    3c4c:	b510      	push	{r4, lr}
    3c4e:	b08c      	sub	sp, #48	; 0x30
	
		struct adc_config config_adc;
		adc_get_config_defaults(&config_adc);
    3c50:	4668      	mov	r0, sp
    3c52:	4b14      	ldr	r3, [pc, #80]	; (3ca4 <configure_adc+0x58>)
    3c54:	4798      	blx	r3
		config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
    3c56:	23f0      	movs	r3, #240	; 0xf0
    3c58:	051b      	lsls	r3, r3, #20
    3c5a:	9302      	str	r3, [sp, #8]
		config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
    3c5c:	2300      	movs	r3, #0
    3c5e:	466a      	mov	r2, sp
    3c60:	8053      	strh	r3, [r2, #2]
		config_adc.reference = ADC_REFERENCE_INTVCC1;
    3c62:	3302      	adds	r3, #2
    3c64:	7053      	strb	r3, [r2, #1]
		config_adc.positive_input = ADC_POSITIVE_INPUT_PIN1;
    3c66:	3b01      	subs	r3, #1
    3c68:	7313      	strb	r3, [r2, #12]
		config_adc.resolution = ADC_RESOLUTION_12BIT;
    3c6a:	2200      	movs	r2, #0
    3c6c:	4669      	mov	r1, sp
    3c6e:	710a      	strb	r2, [r1, #4]
		
		config_adc.event_action = ADC_EVENT_ACTION_START_CONV;
    3c70:	222a      	movs	r2, #42	; 0x2a
    3c72:	548b      	strb	r3, [r1, r2]
		adc_init(&adc_instance, ADC, &config_adc);
    3c74:	4c0c      	ldr	r4, [pc, #48]	; (3ca8 <configure_adc+0x5c>)
    3c76:	1c20      	adds	r0, r4, #0
    3c78:	490c      	ldr	r1, [pc, #48]	; (3cac <configure_adc+0x60>)
    3c7a:	466a      	mov	r2, sp
    3c7c:	4b0c      	ldr	r3, [pc, #48]	; (3cb0 <configure_adc+0x64>)
    3c7e:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3c80:	6822      	ldr	r2, [r4, #0]
    3c82:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    3c84:	b25b      	sxtb	r3, r3
    3c86:	2b00      	cmp	r3, #0
    3c88:	dbfb      	blt.n	3c82 <configure_adc+0x36>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3c8a:	7811      	ldrb	r1, [r2, #0]
    3c8c:	2302      	movs	r3, #2
    3c8e:	430b      	orrs	r3, r1
    3c90:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3c92:	4b05      	ldr	r3, [pc, #20]	; (3ca8 <configure_adc+0x5c>)
    3c94:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3c96:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    3c98:	b25b      	sxtb	r3, r3
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	dbfb      	blt.n	3c96 <configure_adc+0x4a>
		
		adc_enable(&adc_instance);
}
    3c9e:	b00c      	add	sp, #48	; 0x30
    3ca0:	bd10      	pop	{r4, pc}
    3ca2:	46c0      	nop			; (mov r8, r8)
    3ca4:	00001e79 	.word	0x00001e79
    3ca8:	20000884 	.word	0x20000884
    3cac:	42004000 	.word	0x42004000
    3cb0:	00001ec1 	.word	0x00001ec1

00003cb4 <configure_adc_callbacks>:

void configure_adc_callbacks(void){
	
	//adc_enable_interrupt(&adc_instance, ADC_INTERRUPT_RESULT_READY);
	REG_ADC_INTENSET = ADC_INTENSET_RESRDY;
    3cb4:	2201      	movs	r2, #1
    3cb6:	4b03      	ldr	r3, [pc, #12]	; (3cc4 <configure_adc_callbacks+0x10>)
    3cb8:	701a      	strb	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    3cba:	2280      	movs	r2, #128	; 0x80
    3cbc:	0392      	lsls	r2, r2, #14
    3cbe:	4b02      	ldr	r3, [pc, #8]	; (3cc8 <configure_adc_callbacks+0x14>)
    3cc0:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(ADC_IRQn);
	//NVIC_SetPriority(ADC_IRQn, 3);
	
}
    3cc2:	4770      	bx	lr
    3cc4:	42004017 	.word	0x42004017
    3cc8:	e000e100 	.word	0xe000e100

00003ccc <configure_osc32k>:
	system_clock_source_xosc32k_set_config(&config_ext32k);
	
}

void configure_osc32k(void)
{
    3ccc:	b500      	push	{lr}
    3cce:	b087      	sub	sp, #28
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
	config->enable_32khz_output = true;
    3cd0:	a804      	add	r0, sp, #16
    3cd2:	2201      	movs	r2, #1
    3cd4:	7082      	strb	r2, [r0, #2]
	config->run_in_standby      = false;
    3cd6:	2300      	movs	r3, #0
    3cd8:	70c3      	strb	r3, [r0, #3]
	config->on_demand           = true;
    3cda:	7102      	strb	r2, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    3cdc:	3206      	adds	r2, #6
    3cde:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    3ce0:	7143      	strb	r3, [r0, #5]
	struct system_clock_source_osc32k_config config_32k;
	//! [config_extosc32k_config]
	//! [config_extosc32k_get_defaults]
	system_clock_source_osc32k_get_config_defaults(&config_32k);
	//! [config_extosc32k_get_defaults]
	config_32k.enable_1khz_output = false;
    3ce2:	7043      	strb	r3, [r0, #1]
	//! [config_extosc32k_set_config]
	system_clock_source_osc32k_set_config(&config_32k);
    3ce4:	4b0e      	ldr	r3, [pc, #56]	; (3d20 <configure_osc32k+0x54>)
    3ce6:	4798      	blx	r3
	//! [config_extosc32k_set_config]
	
	volatile enum status_code osc32k_status = system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    3ce8:	2004      	movs	r0, #4
    3cea:	4b0e      	ldr	r3, [pc, #56]	; (3d24 <configure_osc32k+0x58>)
    3cec:	4798      	blx	r3
    3cee:	230f      	movs	r3, #15
    3cf0:	446b      	add	r3, sp
    3cf2:	7018      	strb	r0, [r3, #0]

	if (osc32k_status != STATUS_OK) {
    3cf4:	781b      	ldrb	r3, [r3, #0]
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d002      	beq.n	3d00 <configure_osc32k+0x34>

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    3cfa:	2220      	movs	r2, #32
    3cfc:	4b0a      	ldr	r3, [pc, #40]	; (3d28 <configure_osc32k+0x5c>)
    3cfe:	619a      	str	r2, [r3, #24]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    3d00:	2300      	movs	r3, #0
    3d02:	466a      	mov	r2, sp
    3d04:	7053      	strb	r3, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    3d06:	7253      	strb	r3, [r2, #9]
		/* Error enabling the clock source */
	}

	struct system_gclk_gen_config config_gclock_gen;
	system_gclk_gen_get_config_defaults(&config_gclock_gen);
	config_gclock_gen.source_clock    = SYSTEM_CLOCK_SOURCE_OSC32K;
    3d08:	3304      	adds	r3, #4
    3d0a:	7013      	strb	r3, [r2, #0]
	config_gclock_gen.division_factor = 16;
    3d0c:	330c      	adds	r3, #12
    3d0e:	9301      	str	r3, [sp, #4]
	config_gclock_gen.run_in_standby = true;
    3d10:	3b0f      	subs	r3, #15
    3d12:	7213      	strb	r3, [r2, #8]
	
	system_gclk_gen_set_config(GCLK_GENERATOR_1, &config_gclock_gen);
    3d14:	2001      	movs	r0, #1
    3d16:	4669      	mov	r1, sp
    3d18:	4b04      	ldr	r3, [pc, #16]	; (3d2c <configure_osc32k+0x60>)
    3d1a:	4798      	blx	r3
}
    3d1c:	b007      	add	sp, #28
    3d1e:	bd00      	pop	{pc}
    3d20:	0000307d 	.word	0x0000307d
    3d24:	00003105 	.word	0x00003105
    3d28:	41004400 	.word	0x41004400
    3d2c:	00003251 	.word	0x00003251

00003d30 <configure_tc_sampler>:

void configure_tc_sampler(void)
{
    3d30:	b510      	push	{r4, lr}
    3d32:	b090      	sub	sp, #64	; 0x40
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3d34:	aa03      	add	r2, sp, #12
    3d36:	2300      	movs	r3, #0
    3d38:	2100      	movs	r1, #0
    3d3a:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3d3c:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3d3e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3d40:	7051      	strb	r1, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3d42:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3d44:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3d46:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3d48:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    3d4a:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3d4c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3d4e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3d50:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3d52:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3d54:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3d56:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3d58:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    3d5a:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3d5c:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_events config_events;
	//! [setup_config]
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	
	config_tc.clock_source = GCLK_GENERATOR_1;
    3d5e:	3301      	adds	r3, #1
    3d60:	7013      	strb	r3, [r2, #0]
	//! [setup_change_config]
	config_tc.counter_size    = TC_COUNTER_SIZE_8BIT;
    3d62:	3303      	adds	r3, #3
    3d64:	7093      	strb	r3, [r2, #2]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_FREQ;
	config_tc.counter_8_bit.period = 3;
    3d66:	2103      	movs	r1, #3
    3d68:	3325      	adds	r3, #37	; 0x25
    3d6a:	54d1      	strb	r1, [r2, r3]
	//! [setup_change_config_pwm]
	config_tc.pwm_channel[0].enabled = false;
	//! [setup_change_config_pwm]

	//! [setup_set_config]
	tc_init(&tc_sampler_instance, TC0, &config_tc);
    3d6c:	4c19      	ldr	r4, [pc, #100]	; (3dd4 <configure_tc_sampler+0xa4>)
    3d6e:	1c20      	adds	r0, r4, #0
    3d70:	4919      	ldr	r1, [pc, #100]	; (3dd8 <configure_tc_sampler+0xa8>)
    3d72:	4b1a      	ldr	r3, [pc, #104]	; (3ddc <configure_tc_sampler+0xac>)
    3d74:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Tc *const tc_module = module_inst->hw;
    3d76:	6822      	ldr	r2, [r4, #0]

	uint32_t event_mask = 0;

	if (events->invert_event_input == true) {
    3d78:	ab01      	add	r3, sp, #4
    3d7a:	7919      	ldrb	r1, [r3, #4]
		event_mask |= TC_EVCTRL_TCINV;
    3d7c:	1e4b      	subs	r3, r1, #1
    3d7e:	4199      	sbcs	r1, r3
    3d80:	0109      	lsls	r1, r1, #4
	}

	if (events->on_event_perform_action == true) {
    3d82:	ab01      	add	r3, sp, #4
    3d84:	78db      	ldrb	r3, [r3, #3]
    3d86:	2b00      	cmp	r3, #0
    3d88:	d001      	beq.n	3d8e <configure_tc_sampler+0x5e>
		event_mask |= TC_EVCTRL_TCEI;
    3d8a:	2320      	movs	r3, #32
    3d8c:	4319      	orrs	r1, r3
	}

	if (events->generate_event_on_overflow == true) {
		event_mask |= TC_EVCTRL_OVFEO;
    3d8e:	2380      	movs	r3, #128	; 0x80
    3d90:	005b      	lsls	r3, r3, #1
    3d92:	430b      	orrs	r3, r1
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (events->generate_event_on_compare_channel[i] == true) {
    3d94:	a801      	add	r0, sp, #4
    3d96:	7800      	ldrb	r0, [r0, #0]
    3d98:	2800      	cmp	r0, #0
    3d9a:	d002      	beq.n	3da2 <configure_tc_sampler+0x72>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    3d9c:	2388      	movs	r3, #136	; 0x88
    3d9e:	015b      	lsls	r3, r3, #5
    3da0:	430b      	orrs	r3, r1
	if (events->generate_event_on_overflow == true) {
		event_mask |= TC_EVCTRL_OVFEO;
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (events->generate_event_on_compare_channel[i] == true) {
    3da2:	a901      	add	r1, sp, #4
    3da4:	7849      	ldrb	r1, [r1, #1]
    3da6:	2900      	cmp	r1, #0
    3da8:	d002      	beq.n	3db0 <configure_tc_sampler+0x80>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    3daa:	2180      	movs	r1, #128	; 0x80
    3dac:	0189      	lsls	r1, r1, #6
    3dae:	430b      	orrs	r3, r1
		}
	}

	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
    3db0:	8950      	ldrh	r0, [r2, #10]
    3db2:	a901      	add	r1, sp, #4
    3db4:	7949      	ldrb	r1, [r1, #5]
    3db6:	4301      	orrs	r1, r0
    3db8:	430b      	orrs	r3, r1
    3dba:	b29b      	uxth	r3, r3
    3dbc:	8153      	strh	r3, [r2, #10]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3dbe:	217f      	movs	r1, #127	; 0x7f
    3dc0:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3dc2:	438b      	bics	r3, r1
    3dc4:	d1fc      	bne.n	3dc0 <configure_tc_sampler+0x90>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3dc6:	8811      	ldrh	r1, [r2, #0]
    3dc8:	3302      	adds	r3, #2
    3dca:	430b      	orrs	r3, r1
    3dcc:	8013      	strh	r3, [r2, #0]
	tc_enable_events(&tc_sampler_instance, &config_events);

	//! [setup_enable]
	tc_enable(&tc_sampler_instance);
	//! [setup_enable]
}
    3dce:	b010      	add	sp, #64	; 0x40
    3dd0:	bd10      	pop	{r4, pc}
    3dd2:	46c0      	nop			; (mov r8, r8)
    3dd4:	20000364 	.word	0x20000364
    3dd8:	42002000 	.word	0x42002000
    3ddc:	000036b5 	.word	0x000036b5

00003de0 <add_timestamp>:
// 	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
// 	//! [setup_13]
// }

int8_t add_timestamp(){
	if(buttoncounter<BUTTONCOUNT_LIMIT){
    3de0:	4b08      	ldr	r3, [pc, #32]	; (3e04 <add_timestamp+0x24>)
    3de2:	881b      	ldrh	r3, [r3, #0]
    3de4:	2b31      	cmp	r3, #49	; 0x31
    3de6:	d809      	bhi.n	3dfc <add_timestamp+0x1c>
		buttonstamps[buttoncounter] = timestamp;
    3de8:	4a07      	ldr	r2, [pc, #28]	; (3e08 <add_timestamp+0x28>)
    3dea:	6810      	ldr	r0, [r2, #0]
    3dec:	0099      	lsls	r1, r3, #2
    3dee:	4a07      	ldr	r2, [pc, #28]	; (3e0c <add_timestamp+0x2c>)
    3df0:	5088      	str	r0, [r1, r2]
		buttoncounter++;
    3df2:	3301      	adds	r3, #1
    3df4:	4a03      	ldr	r2, [pc, #12]	; (3e04 <add_timestamp+0x24>)
    3df6:	8013      	strh	r3, [r2, #0]
		return 1;
    3df8:	2001      	movs	r0, #1
    3dfa:	e000      	b.n	3dfe <add_timestamp+0x1e>
	}else{
		return -1;
    3dfc:	20ff      	movs	r0, #255	; 0xff
    3dfe:	b240      	sxtb	r0, r0
	}
}
    3e00:	4770      	bx	lr
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	2000007c 	.word	0x2000007c
    3e08:	20000080 	.word	0x20000080
    3e0c:	20000384 	.word	0x20000384

00003e10 <write_data>:

int8_t write_data(void){
    3e10:	b508      	push	{r3, lr}
	
	if(flag_buffer_ready){
    3e12:	4b18      	ldr	r3, [pc, #96]	; (3e74 <write_data+0x64>)
    3e14:	781b      	ldrb	r3, [r3, #0]
			GLED_off();
		else
			RLED_off();
		return 1;
	}
	return 0;
    3e16:	2000      	movs	r0, #0
	}
}

int8_t write_data(void){
	
	if(flag_buffer_ready){
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d028      	beq.n	3e6e <write_data+0x5e>

		flag_buffer_ready = 0;
    3e1c:	2200      	movs	r2, #0
    3e1e:	4b15      	ldr	r3, [pc, #84]	; (3e74 <write_data+0x64>)
    3e20:	701a      	strb	r2, [r3, #0]
		
		if(battery_voltage > BATTERY_VOLTAGE_LOW)
    3e22:	4b15      	ldr	r3, [pc, #84]	; (3e78 <write_data+0x68>)
    3e24:	881a      	ldrh	r2, [r3, #0]
    3e26:	23af      	movs	r3, #175	; 0xaf
    3e28:	005b      	lsls	r3, r3, #1
    3e2a:	429a      	cmp	r2, r3
    3e2c:	d903      	bls.n	3e36 <write_data+0x26>
    3e2e:	2240      	movs	r2, #64	; 0x40
    3e30:	4b12      	ldr	r3, [pc, #72]	; (3e7c <write_data+0x6c>)
    3e32:	619a      	str	r2, [r3, #24]
    3e34:	e002      	b.n	3e3c <write_data+0x2c>
    3e36:	2220      	movs	r2, #32
    3e38:	4b10      	ldr	r3, [pc, #64]	; (3e7c <write_data+0x6c>)
    3e3a:	619a      	str	r2, [r3, #24]
			GLED_on();
		else
			RLED_on();		

		//write to sd card		
		if(!sdcard_write(buffer_last, BUFFER_SIZE))
    3e3c:	4b10      	ldr	r3, [pc, #64]	; (3e80 <write_data+0x70>)
    3e3e:	6818      	ldr	r0, [r3, #0]
    3e40:	2180      	movs	r1, #128	; 0x80
    3e42:	0089      	lsls	r1, r1, #2
    3e44:	4b0f      	ldr	r3, [pc, #60]	; (3e84 <write_data+0x74>)
    3e46:	4798      	blx	r3
    3e48:	2800      	cmp	r0, #0
    3e4a:	d00f      	beq.n	3e6c <write_data+0x5c>
			return -1;	
			
		if(battery_voltage > BATTERY_VOLTAGE_LOW)	
    3e4c:	4b0a      	ldr	r3, [pc, #40]	; (3e78 <write_data+0x68>)
    3e4e:	881a      	ldrh	r2, [r3, #0]
    3e50:	23af      	movs	r3, #175	; 0xaf
    3e52:	005b      	lsls	r3, r3, #1
    3e54:	429a      	cmp	r2, r3
    3e56:	d904      	bls.n	3e62 <write_data+0x52>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    3e58:	2240      	movs	r2, #64	; 0x40
    3e5a:	4b08      	ldr	r3, [pc, #32]	; (3e7c <write_data+0x6c>)
    3e5c:	615a      	str	r2, [r3, #20]
			GLED_off();
		else
			RLED_off();
		return 1;
    3e5e:	2001      	movs	r0, #1
    3e60:	e005      	b.n	3e6e <write_data+0x5e>
    3e62:	2220      	movs	r2, #32
    3e64:	4b05      	ldr	r3, [pc, #20]	; (3e7c <write_data+0x6c>)
    3e66:	615a      	str	r2, [r3, #20]
    3e68:	2001      	movs	r0, #1
    3e6a:	e000      	b.n	3e6e <write_data+0x5e>
		else
			RLED_on();		

		//write to sd card		
		if(!sdcard_write(buffer_last, BUFFER_SIZE))
			return -1;	
    3e6c:	20ff      	movs	r0, #255	; 0xff
    3e6e:	b240      	sxtb	r0, r0
		else
			RLED_off();
		return 1;
	}
	return 0;
}
    3e70:	bd08      	pop	{r3, pc}
    3e72:	46c0      	nop			; (mov r8, r8)
    3e74:	20000089 	.word	0x20000089
    3e78:	2000008c 	.word	0x2000008c
    3e7c:	41004400 	.word	0x41004400
    3e80:	20000360 	.word	0x20000360
    3e84:	00003a91 	.word	0x00003a91

00003e88 <check_button>:

void check_button(void){
    3e88:	b510      	push	{r4, lr}
	
	if(flag_button){
    3e8a:	4b1e      	ldr	r3, [pc, #120]	; (3f04 <check_button+0x7c>)
    3e8c:	781b      	ldrb	r3, [r3, #0]
    3e8e:	2b00      	cmp	r3, #0
    3e90:	d037      	beq.n	3f02 <check_button+0x7a>
		flag_button = 0;
    3e92:	2200      	movs	r2, #0
    3e94:	4b1b      	ldr	r3, [pc, #108]	; (3f04 <check_button+0x7c>)
    3e96:	701a      	strb	r2, [r3, #0]
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    3e98:	4b1b      	ldr	r3, [pc, #108]	; (3f08 <check_button+0x80>)
    3e9a:	6a1b      	ldr	r3, [r3, #32]
		uint8_t i = 0;
		//Soft switch check
		//Button must be held x seconds to turn on / off
		//Otherwise, a timestamp will be saved while logging
		while(button_is_pressed() && i<255){
    3e9c:	061b      	lsls	r3, r3, #24
    3e9e:	d50b      	bpl.n	3eb8 <check_button+0x30>
    3ea0:	e011      	b.n	3ec6 <check_button+0x3e>
    3ea2:	3b01      	subs	r3, #1
			for(int j = 0; j < 10000; j++);
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d1fc      	bne.n	3ea2 <check_button+0x1a>
			i++;
    3ea8:	3201      	adds	r2, #1
    3eaa:	b2d2      	uxtb	r2, r2
    3eac:	6a03      	ldr	r3, [r0, #32]
		flag_button = 0;
		uint8_t i = 0;
		//Soft switch check
		//Button must be held x seconds to turn on / off
		//Otherwise, a timestamp will be saved while logging
		while(button_is_pressed() && i<255){
    3eae:	4219      	tst	r1, r3
    3eb0:	d107      	bne.n	3ec2 <check_button+0x3a>
    3eb2:	2aff      	cmp	r2, #255	; 0xff
    3eb4:	d103      	bne.n	3ebe <check_button+0x36>
    3eb6:	e00e      	b.n	3ed6 <check_button+0x4e>
		return 1;
	}
	return 0;
}

void check_button(void){
    3eb8:	4c14      	ldr	r4, [pc, #80]	; (3f0c <check_button+0x84>)
    3eba:	4813      	ldr	r0, [pc, #76]	; (3f08 <check_button+0x80>)
    3ebc:	2180      	movs	r1, #128	; 0x80
    3ebe:	1c23      	adds	r3, r4, #0
    3ec0:	e7ef      	b.n	3ea2 <check_button+0x1a>
			for(int j = 0; j < 10000; j++);
			i++;
		}
		
		//Check duration and state
		if(i < 200 && function_pointer == sampling){
    3ec2:	2ac7      	cmp	r2, #199	; 0xc7
    3ec4:	d807      	bhi.n	3ed6 <check_button+0x4e>
    3ec6:	4b12      	ldr	r3, [pc, #72]	; (3f10 <check_button+0x88>)
    3ec8:	681a      	ldr	r2, [r3, #0]
    3eca:	4b12      	ldr	r3, [pc, #72]	; (3f14 <check_button+0x8c>)
    3ecc:	429a      	cmp	r2, r3
    3ece:	d118      	bne.n	3f02 <check_button+0x7a>
			add_timestamp();
    3ed0:	4b11      	ldr	r3, [pc, #68]	; (3f18 <check_button+0x90>)
    3ed2:	4798      	blx	r3
    3ed4:	e015      	b.n	3f02 <check_button+0x7a>
		}else if(i >= 200){
			//Soft switch, selecting state
			if(function_pointer == sleep)
    3ed6:	4b0e      	ldr	r3, [pc, #56]	; (3f10 <check_button+0x88>)
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	4a10      	ldr	r2, [pc, #64]	; (3f1c <check_button+0x94>)
    3edc:	4293      	cmp	r3, r2
    3ede:	d103      	bne.n	3ee8 <check_button+0x60>
			function_pointer = &wake;
    3ee0:	4a0f      	ldr	r2, [pc, #60]	; (3f20 <check_button+0x98>)
    3ee2:	4b0b      	ldr	r3, [pc, #44]	; (3f10 <check_button+0x88>)
    3ee4:	601a      	str	r2, [r3, #0]
    3ee6:	e00c      	b.n	3f02 <check_button+0x7a>
			else if(function_pointer == sampling || function_pointer == die)
    3ee8:	4a0a      	ldr	r2, [pc, #40]	; (3f14 <check_button+0x8c>)
    3eea:	4293      	cmp	r3, r2
    3eec:	d002      	beq.n	3ef4 <check_button+0x6c>
    3eee:	4a0d      	ldr	r2, [pc, #52]	; (3f24 <check_button+0x9c>)
    3ef0:	4293      	cmp	r3, r2
    3ef2:	d103      	bne.n	3efc <check_button+0x74>
			function_pointer = &sleep;
    3ef4:	4a09      	ldr	r2, [pc, #36]	; (3f1c <check_button+0x94>)
    3ef6:	4b06      	ldr	r3, [pc, #24]	; (3f10 <check_button+0x88>)
    3ef8:	601a      	str	r2, [r3, #0]
    3efa:	e002      	b.n	3f02 <check_button+0x7a>
			else
			function_pointer = &sleep;
    3efc:	4a07      	ldr	r2, [pc, #28]	; (3f1c <check_button+0x94>)
    3efe:	4b04      	ldr	r3, [pc, #16]	; (3f10 <check_button+0x88>)
    3f00:	601a      	str	r2, [r3, #0]
		}
	}
	
}
    3f02:	bd10      	pop	{r4, pc}
    3f04:	20000088 	.word	0x20000088
    3f08:	41004400 	.word	0x41004400
    3f0c:	00002710 	.word	0x00002710
    3f10:	20000380 	.word	0x20000380
    3f14:	00003fbd 	.word	0x00003fbd
    3f18:	00003de1 	.word	0x00003de1
    3f1c:	00003f29 	.word	0x00003f29
    3f20:	0000413d 	.word	0x0000413d
    3f24:	00004035 	.word	0x00004035

00003f28 <sleep>:
		
	}
	/* Insert application code here, after the board has been initialized. */
}

void sleep(void){
    3f28:	b508      	push	{r3, lr}
	
	//Turn off everything
	sdcard_close();
    3f2a:	4b1f      	ldr	r3, [pc, #124]	; (3fa8 <sleep+0x80>)
    3f2c:	4798      	blx	r3
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    3f2e:	4b1f      	ldr	r3, [pc, #124]	; (3fac <sleep+0x84>)
    3f30:	2280      	movs	r2, #128	; 0x80
    3f32:	0512      	lsls	r2, r2, #20
    3f34:	615a      	str	r2, [r3, #20]
    3f36:	2280      	movs	r2, #128	; 0x80
    3f38:	0452      	lsls	r2, r2, #17
    3f3a:	615a      	str	r2, [r3, #20]
    3f3c:	2280      	movs	r2, #128	; 0x80
    3f3e:	0312      	lsls	r2, r2, #12
    3f40:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3f42:	4b1b      	ldr	r3, [pc, #108]	; (3fb0 <sleep+0x88>)
    3f44:	681a      	ldr	r2, [r3, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3f46:	217f      	movs	r1, #127	; 0x7f
    3f48:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3f4a:	438b      	bics	r3, r1
    3f4c:	d1fc      	bne.n	3f48 <sleep+0x20>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    3f4e:	3380      	adds	r3, #128	; 0x80
    3f50:	7153      	strb	r3, [r2, #5]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3f52:	217f      	movs	r1, #127	; 0x7f
    3f54:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3f56:	438b      	bics	r3, r1
    3f58:	d1fc      	bne.n	3f54 <sleep+0x2c>
		/* Wait for sync */
	}

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    3f5a:	8813      	ldrh	r3, [r2, #0]
    3f5c:	2102      	movs	r1, #2
    3f5e:	438b      	bics	r3, r1
    3f60:	8013      	strh	r3, [r2, #0]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3f62:	4b14      	ldr	r3, [pc, #80]	; (3fb4 <sleep+0x8c>)
    3f64:	681a      	ldr	r2, [r3, #0]
    3f66:	7e53      	ldrb	r3, [r2, #25]
#	else
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	while (adc_is_syncing(module_inst)) {
    3f68:	b25b      	sxtb	r3, r3
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	dbfb      	blt.n	3f66 <sleep+0x3e>
		/* Wait for synchronization */
	}

	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    3f6e:	7813      	ldrb	r3, [r2, #0]
    3f70:	2102      	movs	r1, #2
    3f72:	438b      	bics	r3, r1
    3f74:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3f76:	4b0f      	ldr	r3, [pc, #60]	; (3fb4 <sleep+0x8c>)
    3f78:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3f7a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    3f7c:	b25b      	sxtb	r3, r3
    3f7e:	2b00      	cmp	r3, #0
    3f80:	dbfb      	blt.n	3f7a <sleep+0x52>
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    3f82:	4b0a      	ldr	r3, [pc, #40]	; (3fac <sleep+0x84>)
    3f84:	6a1b      	ldr	r3, [r3, #32]
	
	tc_stop_counter(&tc_sampler_instance);
	tc_disable(&tc_sampler_instance);
	adc_disable(&adc_instance);
	
	if(!chg_is_charging())
    3f86:	021b      	lsls	r3, r3, #8
    3f88:	d502      	bpl.n	3f90 <sleep+0x68>
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    3f8a:	2220      	movs	r2, #32
    3f8c:	4b07      	ldr	r3, [pc, #28]	; (3fac <sleep+0x84>)
    3f8e:	615a      	str	r2, [r3, #20]
    3f90:	4b06      	ldr	r3, [pc, #24]	; (3fac <sleep+0x84>)
    3f92:	2240      	movs	r2, #64	; 0x40
    3f94:	615a      	str	r2, [r3, #20]
    3f96:	3a20      	subs	r2, #32
    3f98:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    3f9a:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    3f9e:	bf30      	wfi
	RLED_off();
	
	//Go to sleep
	system_sleep();
	//On wakeup
	check_button();
    3fa0:	4b05      	ldr	r3, [pc, #20]	; (3fb8 <sleep+0x90>)
    3fa2:	4798      	blx	r3


}
    3fa4:	bd08      	pop	{r3, pc}
    3fa6:	46c0      	nop			; (mov r8, r8)
    3fa8:	00003abd 	.word	0x00003abd
    3fac:	41004400 	.word	0x41004400
    3fb0:	20000364 	.word	0x20000364
    3fb4:	20000884 	.word	0x20000884
    3fb8:	00003e89 	.word	0x00003e89

00003fbc <sampling>:
	tc_start_counter(&tc_sampler_instance);
	usart_write_buffer_job(&usart_instance, buffer_current, 2);

}

void sampling(void){
    3fbc:	b510      	push	{r4, lr}
	
	write_data();
    3fbe:	4b14      	ldr	r3, [pc, #80]	; (4010 <sampling+0x54>)
    3fc0:	4798      	blx	r3
	check_button();
    3fc2:	4b14      	ldr	r3, [pc, #80]	; (4014 <sampling+0x58>)
    3fc4:	4798      	blx	r3
	
	if(flag_battery_read){
    3fc6:	4b14      	ldr	r3, [pc, #80]	; (4018 <sampling+0x5c>)
    3fc8:	781b      	ldrb	r3, [r3, #0]
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d00b      	beq.n	3fe6 <sampling+0x2a>
		flag_battery_read = 0;
    3fce:	2200      	movs	r2, #0
    3fd0:	4b11      	ldr	r3, [pc, #68]	; (4018 <sampling+0x5c>)
    3fd2:	701a      	strb	r2, [r3, #0]
		battery_voltage = battery_voltage * 2 * 33 * 100 / 40960;
    3fd4:	4c11      	ldr	r4, [pc, #68]	; (401c <sampling+0x60>)
    3fd6:	8820      	ldrh	r0, [r4, #0]
    3fd8:	4b11      	ldr	r3, [pc, #68]	; (4020 <sampling+0x64>)
    3fda:	4358      	muls	r0, r3
    3fdc:	21a0      	movs	r1, #160	; 0xa0
    3fde:	0209      	lsls	r1, r1, #8
    3fe0:	4b10      	ldr	r3, [pc, #64]	; (4024 <sampling+0x68>)
    3fe2:	4798      	blx	r3
    3fe4:	8020      	strh	r0, [r4, #0]
	}
	
	//Power is low, save data and turn off
	if(battery_voltage < BATTERY_VOLTAGE_SHUTDOWN)
    3fe6:	4b0d      	ldr	r3, [pc, #52]	; (401c <sampling+0x60>)
    3fe8:	881a      	ldrh	r2, [r3, #0]
    3fea:	23a7      	movs	r3, #167	; 0xa7
    3fec:	005b      	lsls	r3, r3, #1
    3fee:	429a      	cmp	r2, r3
    3ff0:	d802      	bhi.n	3ff8 <sampling+0x3c>
		function_pointer = die;
    3ff2:	4a0d      	ldr	r2, [pc, #52]	; (4028 <sampling+0x6c>)
    3ff4:	4b0d      	ldr	r3, [pc, #52]	; (402c <sampling+0x70>)
    3ff6:	601a      	str	r2, [r3, #0]
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
    3ff8:	4b0d      	ldr	r3, [pc, #52]	; (4030 <sampling+0x74>)
    3ffa:	6a1b      	ldr	r3, [r3, #32]
	
	if(chg_is_charging())
    3ffc:	021b      	lsls	r3, r3, #8
    3ffe:	d403      	bmi.n	4008 <sampling+0x4c>

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    4000:	2220      	movs	r2, #32
    4002:	4b0b      	ldr	r3, [pc, #44]	; (4030 <sampling+0x74>)
    4004:	619a      	str	r2, [r3, #24]
    4006:	e002      	b.n	400e <sampling+0x52>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    4008:	2220      	movs	r2, #32
    400a:	4b09      	ldr	r3, [pc, #36]	; (4030 <sampling+0x74>)
    400c:	615a      	str	r2, [r3, #20]
		RLED_on();
	else
		RLED_off();
}
    400e:	bd10      	pop	{r4, pc}
    4010:	00003e11 	.word	0x00003e11
    4014:	00003e89 	.word	0x00003e89
    4018:	2000008a 	.word	0x2000008a
    401c:	2000008c 	.word	0x2000008c
    4020:	000019c8 	.word	0x000019c8
    4024:	000044e1 	.word	0x000044e1
    4028:	00004035 	.word	0x00004035
    402c:	20000380 	.word	0x20000380
    4030:	41004400 	.word	0x41004400

00004034 <die>:

void die(void){
    4034:	b570      	push	{r4, r5, r6, lr}
    4036:	2240      	movs	r2, #64	; 0x40
    4038:	4b0f      	ldr	r3, [pc, #60]	; (4078 <die+0x44>)
    403a:	615a      	str	r2, [r3, #20]
	
	//Shutdown
	GLED_off();
	sdcard_close();
    403c:	4b0f      	ldr	r3, [pc, #60]	; (407c <die+0x48>)
    403e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4040:	4b0f      	ldr	r3, [pc, #60]	; (4080 <die+0x4c>)
    4042:	681a      	ldr	r2, [r3, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4044:	217f      	movs	r1, #127	; 0x7f
    4046:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    4048:	438b      	bics	r3, r1
    404a:	d1fc      	bne.n	4046 <die+0x12>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    404c:	3380      	adds	r3, #128	; 0x80
    404e:	7153      	strb	r3, [r2, #5]
	tc_stop_counter(&tc_sampler_instance);
	
	//Todo: turn off unused peripherals
	while(function_pointer == die){
    4050:	4b0c      	ldr	r3, [pc, #48]	; (4084 <die+0x50>)
    4052:	681a      	ldr	r2, [r3, #0]
    4054:	4b0c      	ldr	r3, [pc, #48]	; (4088 <die+0x54>)
    4056:	429a      	cmp	r2, r3
    4058:	d10d      	bne.n	4076 <die+0x42>
		delay_ms(500);
    405a:	4e0c      	ldr	r6, [pc, #48]	; (408c <die+0x58>)
		ioport_toggle_pin_level(RLED_PIN);
		check_button();
    405c:	4d0c      	ldr	r5, [pc, #48]	; (4090 <die+0x5c>)
	GLED_off();
	sdcard_close();
	tc_stop_counter(&tc_sampler_instance);
	
	//Todo: turn off unused peripherals
	while(function_pointer == die){
    405e:	4c09      	ldr	r4, [pc, #36]	; (4084 <die+0x50>)
		delay_ms(500);
    4060:	20fa      	movs	r0, #250	; 0xfa
    4062:	0040      	lsls	r0, r0, #1
    4064:	47b0      	blx	r6
	return arch_ioport_port_to_base(port)->IN.reg & mask;
}

inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	arch_ioport_pin_to_base(pin)->OUTTGL.reg = arch_ioport_pin_to_mask(pin);
    4066:	2220      	movs	r2, #32
    4068:	4b03      	ldr	r3, [pc, #12]	; (4078 <die+0x44>)
    406a:	61da      	str	r2, [r3, #28]
		ioport_toggle_pin_level(RLED_PIN);
		check_button();
    406c:	47a8      	blx	r5
	GLED_off();
	sdcard_close();
	tc_stop_counter(&tc_sampler_instance);
	
	//Todo: turn off unused peripherals
	while(function_pointer == die){
    406e:	4b06      	ldr	r3, [pc, #24]	; (4088 <die+0x54>)
    4070:	6822      	ldr	r2, [r4, #0]
    4072:	429a      	cmp	r2, r3
    4074:	d0f4      	beq.n	4060 <die+0x2c>
		delay_ms(500);
		ioport_toggle_pin_level(RLED_PIN);
		check_button();
	}
	
}
    4076:	bd70      	pop	{r4, r5, r6, pc}
    4078:	41004400 	.word	0x41004400
    407c:	00003abd 	.word	0x00003abd
    4080:	20000364 	.word	0x20000364
    4084:	20000380 	.word	0x20000380
    4088:	00004035 	.word	0x00004035
    408c:	00001df1 	.word	0x00001df1
    4090:	00003e89 	.word	0x00003e89

00004094 <update_battery_voltage>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4094:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    4096:	f3bf 8f5f 	dmb	sy
}

void update_battery_voltage(void){
	
	//We don't wanna store the ADC result in the buffers, so we disable interrupts
	cpu_irq_disable();
    409a:	2200      	movs	r2, #0
    409c:	4b1f      	ldr	r3, [pc, #124]	; (411c <update_battery_voltage+0x88>)
    409e:	701a      	strb	r2, [r3, #0]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    40a0:	2280      	movs	r2, #128	; 0x80
    40a2:	03d2      	lsls	r2, r2, #15
    40a4:	4b1e      	ldr	r3, [pc, #120]	; (4120 <update_battery_voltage+0x8c>)
    40a6:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    40a8:	4b1e      	ldr	r3, [pc, #120]	; (4124 <update_battery_voltage+0x90>)
    40aa:	681a      	ldr	r2, [r3, #0]
    40ac:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    40ae:	b25b      	sxtb	r3, r3
    40b0:	2b00      	cmp	r3, #0
    40b2:	dbfb      	blt.n	40ac <update_battery_voltage+0x18>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    40b4:	6913      	ldr	r3, [r2, #16]
    40b6:	211f      	movs	r1, #31
    40b8:	438b      	bics	r3, r1
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    40ba:	6113      	str	r3, [r2, #16]
    40bc:	7e53      	ldrb	r3, [r2, #25]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    40be:	b25b      	sxtb	r3, r3
    40c0:	2b00      	cmp	r3, #0
    40c2:	dbfb      	blt.n	40bc <update_battery_voltage+0x28>
	battsense_enable();
	//swap ADC input, start ADC and wait till resrdy
	adc_set_positive_input(&adc_instance, ADC_POSITIVE_INPUT_PIN0);
	REG_ADC_SWTRIG |= ADC_SWTRIG_START;
    40c4:	4a18      	ldr	r2, [pc, #96]	; (4128 <update_battery_voltage+0x94>)
    40c6:	7811      	ldrb	r1, [r2, #0]
    40c8:	2302      	movs	r3, #2
    40ca:	430b      	orrs	r3, r1
    40cc:	7013      	strb	r3, [r2, #0]
	while(!(REG_ADC_INTFLAG & ADC_INTFLAG_RESRDY));
    40ce:	4917      	ldr	r1, [pc, #92]	; (412c <update_battery_voltage+0x98>)
    40d0:	2201      	movs	r2, #1
    40d2:	780b      	ldrb	r3, [r1, #0]
    40d4:	4213      	tst	r3, r2
    40d6:	d0fc      	beq.n	40d2 <update_battery_voltage+0x3e>
	
	//Interrupt flag is cleared by reading the result register
	battery_voltage = REG_ADC_RESULT;
    40d8:	4b15      	ldr	r3, [pc, #84]	; (4130 <update_battery_voltage+0x9c>)
    40da:	881a      	ldrh	r2, [r3, #0]
    40dc:	4b15      	ldr	r3, [pc, #84]	; (4134 <update_battery_voltage+0xa0>)
    40de:	801a      	strh	r2, [r3, #0]
	flag_battery_read = 1;
    40e0:	2201      	movs	r2, #1
    40e2:	4b15      	ldr	r3, [pc, #84]	; (4138 <update_battery_voltage+0xa4>)
    40e4:	701a      	strb	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    40e6:	4b0f      	ldr	r3, [pc, #60]	; (4124 <update_battery_voltage+0x90>)
    40e8:	681a      	ldr	r2, [r3, #0]
    40ea:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    40ec:	b25b      	sxtb	r3, r3
    40ee:	2b00      	cmp	r3, #0
    40f0:	dbfb      	blt.n	40ea <update_battery_voltage+0x56>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    40f2:	6913      	ldr	r3, [r2, #16]
    40f4:	211f      	movs	r1, #31
    40f6:	438b      	bics	r3, r1
    40f8:	391e      	subs	r1, #30
    40fa:	430b      	orrs	r3, r1
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    40fc:	6113      	str	r3, [r2, #16]
    40fe:	7e53      	ldrb	r3, [r2, #25]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    4100:	b25b      	sxtb	r3, r3
    4102:	2b00      	cmp	r3, #0
    4104:	dbfb      	blt.n	40fe <update_battery_voltage+0x6a>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    4106:	2280      	movs	r2, #128	; 0x80
    4108:	03d2      	lsls	r2, r2, #15
    410a:	4b05      	ldr	r3, [pc, #20]	; (4120 <update_battery_voltage+0x8c>)
    410c:	615a      	str	r2, [r3, #20]
			
	//swap the ADC input back to the AFE
	adc_set_positive_input(&adc_instance, ADC_POSITIVE_INPUT_PIN1);
	
	battsense_disable();
	cpu_irq_enable();
    410e:	2201      	movs	r2, #1
    4110:	4b02      	ldr	r3, [pc, #8]	; (411c <update_battery_voltage+0x88>)
    4112:	701a      	strb	r2, [r3, #0]
    4114:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4118:	b662      	cpsie	i
	
}
    411a:	4770      	bx	lr
    411c:	20000020 	.word	0x20000020
    4120:	41004400 	.word	0x41004400
    4124:	20000884 	.word	0x20000884
    4128:	4200400c 	.word	0x4200400c
    412c:	42004018 	.word	0x42004018
    4130:	4200401a 	.word	0x4200401a
    4134:	2000008c 	.word	0x2000008c
    4138:	2000008a 	.word	0x2000008a

0000413c <wake>:
	check_button();


}

void wake(void){
    413c:	b508      	push	{r3, lr}
	
	function_pointer = sampling;
    413e:	4a28      	ldr	r2, [pc, #160]	; (41e0 <wake+0xa4>)
    4140:	4b28      	ldr	r3, [pc, #160]	; (41e4 <wake+0xa8>)
    4142:	601a      	str	r2, [r3, #0]

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    4144:	4b28      	ldr	r3, [pc, #160]	; (41e8 <wake+0xac>)
    4146:	2240      	movs	r2, #64	; 0x40
    4148:	619a      	str	r2, [r3, #24]
    414a:	2280      	movs	r2, #128	; 0x80
    414c:	0512      	lsls	r2, r2, #20
    414e:	619a      	str	r2, [r3, #24]
    4150:	2280      	movs	r2, #128	; 0x80
    4152:	0452      	lsls	r2, r2, #17
    4154:	619a      	str	r2, [r3, #24]
    4156:	2280      	movs	r2, #128	; 0x80
    4158:	0312      	lsls	r2, r2, #12
    415a:	619a      	str	r2, [r3, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    415c:	4b23      	ldr	r3, [pc, #140]	; (41ec <wake+0xb0>)
    415e:	681a      	ldr	r2, [r3, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4160:	217f      	movs	r1, #127	; 0x7f
    4162:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    4164:	438b      	bics	r3, r1
    4166:	d1fc      	bne.n	4162 <wake+0x26>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    4168:	8811      	ldrh	r1, [r2, #0]
    416a:	3302      	adds	r3, #2
    416c:	430b      	orrs	r3, r1
    416e:	8013      	strh	r3, [r2, #0]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4170:	4b1f      	ldr	r3, [pc, #124]	; (41f0 <wake+0xb4>)
    4172:	681a      	ldr	r2, [r3, #0]
    4174:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    4176:	b25b      	sxtb	r3, r3
    4178:	2b00      	cmp	r3, #0
    417a:	dbfb      	blt.n	4174 <wake+0x38>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    417c:	7811      	ldrb	r1, [r2, #0]
    417e:	2302      	movs	r3, #2
    4180:	430b      	orrs	r3, r1
    4182:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    4184:	4b1a      	ldr	r3, [pc, #104]	; (41f0 <wake+0xb4>)
    4186:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    4188:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    418a:	b25b      	sxtb	r3, r3
    418c:	2b00      	cmp	r3, #0
    418e:	dbfb      	blt.n	4188 <wake+0x4c>
	ext_enable();
	
	tc_enable(&tc_sampler_instance);
	adc_enable(&adc_instance);
	
	if(!sdcard_init())
    4190:	4b18      	ldr	r3, [pc, #96]	; (41f4 <wake+0xb8>)
    4192:	4798      	blx	r3
    4194:	2800      	cmp	r0, #0
    4196:	d102      	bne.n	419e <wake+0x62>
		function_pointer = die;
    4198:	4a17      	ldr	r2, [pc, #92]	; (41f8 <wake+0xbc>)
    419a:	4b12      	ldr	r3, [pc, #72]	; (41e4 <wake+0xa8>)
    419c:	601a      	str	r2, [r3, #0]
	
	buffer_counter = 0;
    419e:	2300      	movs	r3, #0
    41a0:	4a16      	ldr	r2, [pc, #88]	; (41fc <wake+0xc0>)
    41a2:	8013      	strh	r3, [r2, #0]
	timestamp = 0;
    41a4:	4a16      	ldr	r2, [pc, #88]	; (4200 <wake+0xc4>)
    41a6:	6013      	str	r3, [r2, #0]
	buttoncounter = 0;	
    41a8:	4a16      	ldr	r2, [pc, #88]	; (4204 <wake+0xc8>)
    41aa:	8013      	strh	r3, [r2, #0]
	buffer_current = buffer_a;
    41ac:	4a16      	ldr	r2, [pc, #88]	; (4208 <wake+0xcc>)
    41ae:	4b17      	ldr	r3, [pc, #92]	; (420c <wake+0xd0>)
    41b0:	601a      	str	r2, [r3, #0]
	
	update_battery_voltage();
    41b2:	4b17      	ldr	r3, [pc, #92]	; (4210 <wake+0xd4>)
    41b4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    41b6:	4b0d      	ldr	r3, [pc, #52]	; (41ec <wake+0xb0>)
    41b8:	681a      	ldr	r2, [r3, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    41ba:	217f      	movs	r1, #127	; 0x7f
    41bc:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    41be:	438b      	bics	r3, r1
    41c0:	d1fc      	bne.n	41bc <wake+0x80>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    41c2:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    41c4:	217f      	movs	r1, #127	; 0x7f
    41c6:	7bd3      	ldrb	r3, [r2, #15]
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;

	while (tc_is_syncing(module_inst)) {
    41c8:	438b      	bics	r3, r1
    41ca:	d1fc      	bne.n	41c6 <wake+0x8a>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_RETRIGGER_Val);
    41cc:	3340      	adds	r3, #64	; 0x40
    41ce:	7153      	strb	r3, [r2, #5]

	tc_start_counter(&tc_sampler_instance);
	usart_write_buffer_job(&usart_instance, buffer_current, 2);
    41d0:	4b0e      	ldr	r3, [pc, #56]	; (420c <wake+0xd0>)
    41d2:	6819      	ldr	r1, [r3, #0]
    41d4:	480f      	ldr	r0, [pc, #60]	; (4214 <wake+0xd8>)
    41d6:	2202      	movs	r2, #2
    41d8:	4b0f      	ldr	r3, [pc, #60]	; (4218 <wake+0xdc>)
    41da:	4798      	blx	r3

}
    41dc:	bd08      	pop	{r3, pc}
    41de:	46c0      	nop			; (mov r8, r8)
    41e0:	00003fbd 	.word	0x00003fbd
    41e4:	20000380 	.word	0x20000380
    41e8:	41004400 	.word	0x41004400
    41ec:	20000364 	.word	0x20000364
    41f0:	20000884 	.word	0x20000884
    41f4:	00003a4d 	.word	0x00003a4d
    41f8:	00004035 	.word	0x00004035
    41fc:	20000086 	.word	0x20000086
    4200:	20000080 	.word	0x20000080
    4204:	2000007c 	.word	0x2000007c
    4208:	20000684 	.word	0x20000684
    420c:	20000100 	.word	0x20000100
    4210:	00004095 	.word	0x00004095
    4214:	20000104 	.word	0x20000104
    4218:	00002e71 	.word	0x00002e71

0000421c <main>:
	
}


int main (void)
{
    421c:	b570      	push	{r4, r5, r6, lr}
    421e:	b082      	sub	sp, #8
	
	function_pointer = &wake;
    4220:	4a26      	ldr	r2, [pc, #152]	; (42bc <main+0xa0>)
    4222:	4b27      	ldr	r3, [pc, #156]	; (42c0 <main+0xa4>)
    4224:	601a      	str	r2, [r3, #0]
	
	system_init();
    4226:	4b27      	ldr	r3, [pc, #156]	; (42c4 <main+0xa8>)
    4228:	4798      	blx	r3
	delay_init();
    422a:	4b27      	ldr	r3, [pc, #156]	; (42c8 <main+0xac>)
    422c:	4798      	blx	r3
	configure_osc32k();
    422e:	4b27      	ldr	r3, [pc, #156]	; (42cc <main+0xb0>)
    4230:	4798      	blx	r3
	configure_tc_sampler();	
    4232:	4b27      	ldr	r3, [pc, #156]	; (42d0 <main+0xb4>)
    4234:	4798      	blx	r3
	configure_adc();
    4236:	4b27      	ldr	r3, [pc, #156]	; (42d4 <main+0xb8>)
    4238:	4798      	blx	r3
	configure_usart();
    423a:	4b27      	ldr	r3, [pc, #156]	; (42d8 <main+0xbc>)
    423c:	4798      	blx	r3
	configure_usart_callback();
    423e:	4b27      	ldr	r3, [pc, #156]	; (42dc <main+0xc0>)
    4240:	4798      	blx	r3
	//! [setup_1]
	struct events_config config;
	//! [setup_1]

	//! [setup_2]
	events_get_config_defaults(&config);
    4242:	ac01      	add	r4, sp, #4
    4244:	1c20      	adds	r0, r4, #0
    4246:	4b26      	ldr	r3, [pc, #152]	; (42e0 <main+0xc4>)
    4248:	4798      	blx	r3
	//! [setup_2]

	//! [setup_3]
	config.generator      = EVSYS_ID_GEN_TC0_OVF;
    424a:	231c      	movs	r3, #28
    424c:	70a3      	strb	r3, [r4, #2]
	config.edge_detect    = EVENTS_EDGE_DETECT_NONE;
    424e:	2300      	movs	r3, #0
    4250:	7023      	strb	r3, [r4, #0]
	config.path           = EVENTS_PATH_ASYNCHRONOUS;
    4252:	2502      	movs	r5, #2
    4254:	7065      	strb	r5, [r4, #1]
	config.clock_source   = GCLK_GENERATOR_0;
    4256:	70e3      	strb	r3, [r4, #3]

	//! [setup_3]

	//! [setup_4]
	events_allocate(resource, &config);
    4258:	4e22      	ldr	r6, [pc, #136]	; (42e4 <main+0xc8>)
    425a:	1c30      	adds	r0, r6, #0
    425c:	1c21      	adds	r1, r4, #0
    425e:	4b22      	ldr	r3, [pc, #136]	; (42e8 <main+0xcc>)
    4260:	4798      	blx	r3

static void configure_event_user(struct events_resource *resource)
{
	//! [setup_5]
	//An user for the event
	events_attach_user(resource, EVSYS_ID_USER_ADC_START);
    4262:	1c30      	adds	r0, r6, #0
    4264:	2108      	movs	r1, #8
    4266:	4b21      	ldr	r3, [pc, #132]	; (42ec <main+0xd0>)
    4268:	4798      	blx	r3
	configure_event_channel(&tc_tick_event);
	configure_event_user(&tc_tick_event);
	//configure_event_channel_adc(&adc_resrdy_event);
	//configure_event_user_dummy(&adc_resrdy_event);
	//configure_event_interrupt(&tc_tick_event, &hook);
	configure_adc_callbacks();
    426a:	4b21      	ldr	r3, [pc, #132]	; (42f0 <main+0xd4>)
    426c:	4798      	blx	r3
 	configure_extint_channel();
    426e:	4b21      	ldr	r3, [pc, #132]	; (42f4 <main+0xd8>)
    4270:	4798      	blx	r3
 	configure_extint_callbacks();
    4272:	4b21      	ldr	r3, [pc, #132]	; (42f8 <main+0xdc>)
    4274:	4798      	blx	r3
	const enum system_sleepmode sleep_mode)
{
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    4276:	4a21      	ldr	r2, [pc, #132]	; (42fc <main+0xe0>)
    4278:	6853      	ldr	r3, [r2, #4]
    427a:	21c0      	movs	r1, #192	; 0xc0
    427c:	0089      	lsls	r1, r1, #2
    427e:	430b      	orrs	r3, r1
    4280:	6053      	str	r3, [r2, #4]

	switch (sleep_mode) {
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    4282:	4a1f      	ldr	r2, [pc, #124]	; (4300 <main+0xe4>)
    4284:	6913      	ldr	r3, [r2, #16]
    4286:	2104      	movs	r1, #4
    4288:	438b      	bics	r3, r1
    428a:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    428c:	4b1d      	ldr	r3, [pc, #116]	; (4304 <main+0xe8>)
    428e:	705d      	strb	r5, [r3, #1]
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    4290:	2201      	movs	r2, #1
    4292:	4b1d      	ldr	r3, [pc, #116]	; (4308 <main+0xec>)
    4294:	701a      	strb	r2, [r3, #0]
    4296:	f3bf 8f5f 	dmb	sy
    429a:	b662      	cpsie	i
	 
	system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE_2);
 	
 	system_interrupt_enable_global();
	 
	buffer_current = buffer_a;
    429c:	4a1b      	ldr	r2, [pc, #108]	; (430c <main+0xf0>)
    429e:	4b1c      	ldr	r3, [pc, #112]	; (4310 <main+0xf4>)
    42a0:	601a      	str	r2, [r3, #0]
	buffer_last = buffer_b;
    42a2:	4a1c      	ldr	r2, [pc, #112]	; (4314 <main+0xf8>)
    42a4:	4b1c      	ldr	r3, [pc, #112]	; (4318 <main+0xfc>)
    42a6:	601a      	str	r2, [r3, #0]
// 	tc_start_counter(&tc_instance);
	
	while (events_is_busy(&tc_tick_event)) {
    42a8:	4d0e      	ldr	r5, [pc, #56]	; (42e4 <main+0xc8>)
    42aa:	4c1c      	ldr	r4, [pc, #112]	; (431c <main+0x100>)
    42ac:	1c28      	adds	r0, r5, #0
    42ae:	47a0      	blx	r4
    42b0:	2800      	cmp	r0, #0
    42b2:	d1fb      	bne.n	42ac <main+0x90>
		/* Wait for channel */
	};
	
	
	while(1){
		function_pointer();
    42b4:	4c02      	ldr	r4, [pc, #8]	; (42c0 <main+0xa4>)
    42b6:	6823      	ldr	r3, [r4, #0]
    42b8:	4798      	blx	r3
		
	}
    42ba:	e7fc      	b.n	42b6 <main+0x9a>
    42bc:	0000413d 	.word	0x0000413d
    42c0:	20000380 	.word	0x20000380
    42c4:	00003591 	.word	0x00003591
    42c8:	00001db5 	.word	0x00001db5
    42cc:	00003ccd 	.word	0x00003ccd
    42d0:	00003d31 	.word	0x00003d31
    42d4:	00003c4d 	.word	0x00003c4d
    42d8:	00003b81 	.word	0x00003b81
    42dc:	00003c25 	.word	0x00003c25
    42e0:	0000237d 	.word	0x0000237d
    42e4:	2000044c 	.word	0x2000044c
    42e8:	0000238d 	.word	0x0000238d
    42ec:	00002471 	.word	0x00002471
    42f0:	00003cb5 	.word	0x00003cb5
    42f4:	00003b29 	.word	0x00003b29
    42f8:	00003b5d 	.word	0x00003b5d
    42fc:	41004000 	.word	0x41004000
    4300:	e000ed00 	.word	0xe000ed00
    4304:	40000400 	.word	0x40000400
    4308:	20000020 	.word	0x20000020
    430c:	20000684 	.word	0x20000684
    4310:	20000100 	.word	0x20000100
    4314:	20000460 	.word	0x20000460
    4318:	20000360 	.word	0x20000360
    431c:	00002451 	.word	0x00002451

00004320 <ADC_Handler>:
		check_button();
	}
	
}

void ADC_Handler(){
    4320:	b510      	push	{r4, lr}
	return arch_ioport_port_to_base(port)->IN.reg & mask;
}

inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	arch_ioport_pin_to_base(pin)->OUTTGL.reg = arch_ioport_pin_to_mask(pin);
    4322:	2280      	movs	r2, #128	; 0x80
    4324:	02d2      	lsls	r2, r2, #11
    4326:	4b1d      	ldr	r3, [pc, #116]	; (439c <ADC_Handler+0x7c>)
    4328:	61da      	str	r2, [r3, #28]
	
	ioport_toggle_pin_level(EXT_STATUS_PIN);
	//Result is ready, put it in buffer
	if(buffer_counter < BUFFER_SIZE){
    432a:	4b1d      	ldr	r3, [pc, #116]	; (43a0 <ADC_Handler+0x80>)
    432c:	881b      	ldrh	r3, [r3, #0]
    432e:	b29b      	uxth	r3, r3
    4330:	4a1c      	ldr	r2, [pc, #112]	; (43a4 <ADC_Handler+0x84>)
    4332:	4293      	cmp	r3, r2
    4334:	d82e      	bhi.n	4394 <ADC_Handler+0x74>
	
		uint16_t resultat = REG_ADC_RESULT;
    4336:	4b1c      	ldr	r3, [pc, #112]	; (43a8 <ADC_Handler+0x88>)
    4338:	881a      	ldrh	r2, [r3, #0]
		
		//store the result as little endian
		*(buffer_current + buffer_counter) = resultat;
    433a:	4b19      	ldr	r3, [pc, #100]	; (43a0 <ADC_Handler+0x80>)
    433c:	8819      	ldrh	r1, [r3, #0]
    433e:	481b      	ldr	r0, [pc, #108]	; (43ac <ADC_Handler+0x8c>)
    4340:	6804      	ldr	r4, [r0, #0]
    4342:	5462      	strb	r2, [r4, r1]
		*(buffer_current + buffer_counter + 1) = 0xFF & (resultat>>8);
    4344:	8819      	ldrh	r1, [r3, #0]
    4346:	6800      	ldr	r0, [r0, #0]
    4348:	1841      	adds	r1, r0, r1
    434a:	0a12      	lsrs	r2, r2, #8
    434c:	704a      	strb	r2, [r1, #1]
		buffer_counter+=2;
    434e:	881a      	ldrh	r2, [r3, #0]
    4350:	3202      	adds	r2, #2
    4352:	b292      	uxth	r2, r2
    4354:	801a      	strh	r2, [r3, #0]
		
		if(buffer_counter >= BUFFER_SIZE){
    4356:	881b      	ldrh	r3, [r3, #0]
    4358:	b29b      	uxth	r3, r3
    435a:	4a12      	ldr	r2, [pc, #72]	; (43a4 <ADC_Handler+0x84>)
    435c:	4293      	cmp	r3, r2
    435e:	d91c      	bls.n	439a <ADC_Handler+0x7a>
			if(battery_check_counter++ > BATTERY_CHECK_TIMER_MAX){
    4360:	4a13      	ldr	r2, [pc, #76]	; (43b0 <ADC_Handler+0x90>)
    4362:	8813      	ldrh	r3, [r2, #0]
    4364:	1c59      	adds	r1, r3, #1
    4366:	8011      	strh	r1, [r2, #0]
    4368:	2280      	movs	r2, #128	; 0x80
    436a:	0092      	lsls	r2, r2, #2
    436c:	4293      	cmp	r3, r2
    436e:	d904      	bls.n	437a <ADC_Handler+0x5a>
				update_battery_voltage();
    4370:	4b10      	ldr	r3, [pc, #64]	; (43b4 <ADC_Handler+0x94>)
    4372:	4798      	blx	r3
				battery_check_counter = 0;	
    4374:	2200      	movs	r2, #0
    4376:	4b0e      	ldr	r3, [pc, #56]	; (43b0 <ADC_Handler+0x90>)
    4378:	801a      	strh	r2, [r3, #0]
			}
			

			flag_buffer_ready = 1;
    437a:	2201      	movs	r2, #1
    437c:	4b0e      	ldr	r3, [pc, #56]	; (43b8 <ADC_Handler+0x98>)
    437e:	701a      	strb	r2, [r3, #0]
			buffer_counter = 0;
    4380:	2200      	movs	r2, #0
    4382:	4b07      	ldr	r3, [pc, #28]	; (43a0 <ADC_Handler+0x80>)
    4384:	801a      	strh	r2, [r3, #0]
			
			char * buffer_temp;
			buffer_temp = buffer_current;
    4386:	4a09      	ldr	r2, [pc, #36]	; (43ac <ADC_Handler+0x8c>)
    4388:	6811      	ldr	r1, [r2, #0]
			buffer_current = buffer_last;
    438a:	4b0c      	ldr	r3, [pc, #48]	; (43bc <ADC_Handler+0x9c>)
    438c:	6818      	ldr	r0, [r3, #0]
    438e:	6010      	str	r0, [r2, #0]
			buffer_last = buffer_temp;
    4390:	6019      	str	r1, [r3, #0]
    4392:	e002      	b.n	439a <ADC_Handler+0x7a>

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    4394:	2220      	movs	r2, #32
    4396:	4b01      	ldr	r3, [pc, #4]	; (439c <ADC_Handler+0x7c>)
    4398:	619a      	str	r2, [r3, #24]
		RLED_on();
		
	}
		
	
}
    439a:	bd10      	pop	{r4, pc}
    439c:	41004400 	.word	0x41004400
    43a0:	20000086 	.word	0x20000086
    43a4:	000001ff 	.word	0x000001ff
    43a8:	4200401a 	.word	0x4200401a
    43ac:	20000100 	.word	0x20000100
    43b0:	20000084 	.word	0x20000084
    43b4:	00004095 	.word	0x00004095
    43b8:	20000089 	.word	0x20000089
    43bc:	20000360 	.word	0x20000360

000043c0 <__aeabi_uidiv>:
    43c0:	2200      	movs	r2, #0
    43c2:	0843      	lsrs	r3, r0, #1
    43c4:	428b      	cmp	r3, r1
    43c6:	d374      	bcc.n	44b2 <__aeabi_uidiv+0xf2>
    43c8:	0903      	lsrs	r3, r0, #4
    43ca:	428b      	cmp	r3, r1
    43cc:	d35f      	bcc.n	448e <__aeabi_uidiv+0xce>
    43ce:	0a03      	lsrs	r3, r0, #8
    43d0:	428b      	cmp	r3, r1
    43d2:	d344      	bcc.n	445e <__aeabi_uidiv+0x9e>
    43d4:	0b03      	lsrs	r3, r0, #12
    43d6:	428b      	cmp	r3, r1
    43d8:	d328      	bcc.n	442c <__aeabi_uidiv+0x6c>
    43da:	0c03      	lsrs	r3, r0, #16
    43dc:	428b      	cmp	r3, r1
    43de:	d30d      	bcc.n	43fc <__aeabi_uidiv+0x3c>
    43e0:	22ff      	movs	r2, #255	; 0xff
    43e2:	0209      	lsls	r1, r1, #8
    43e4:	ba12      	rev	r2, r2
    43e6:	0c03      	lsrs	r3, r0, #16
    43e8:	428b      	cmp	r3, r1
    43ea:	d302      	bcc.n	43f2 <__aeabi_uidiv+0x32>
    43ec:	1212      	asrs	r2, r2, #8
    43ee:	0209      	lsls	r1, r1, #8
    43f0:	d065      	beq.n	44be <__aeabi_uidiv+0xfe>
    43f2:	0b03      	lsrs	r3, r0, #12
    43f4:	428b      	cmp	r3, r1
    43f6:	d319      	bcc.n	442c <__aeabi_uidiv+0x6c>
    43f8:	e000      	b.n	43fc <__aeabi_uidiv+0x3c>
    43fa:	0a09      	lsrs	r1, r1, #8
    43fc:	0bc3      	lsrs	r3, r0, #15
    43fe:	428b      	cmp	r3, r1
    4400:	d301      	bcc.n	4406 <__aeabi_uidiv+0x46>
    4402:	03cb      	lsls	r3, r1, #15
    4404:	1ac0      	subs	r0, r0, r3
    4406:	4152      	adcs	r2, r2
    4408:	0b83      	lsrs	r3, r0, #14
    440a:	428b      	cmp	r3, r1
    440c:	d301      	bcc.n	4412 <__aeabi_uidiv+0x52>
    440e:	038b      	lsls	r3, r1, #14
    4410:	1ac0      	subs	r0, r0, r3
    4412:	4152      	adcs	r2, r2
    4414:	0b43      	lsrs	r3, r0, #13
    4416:	428b      	cmp	r3, r1
    4418:	d301      	bcc.n	441e <__aeabi_uidiv+0x5e>
    441a:	034b      	lsls	r3, r1, #13
    441c:	1ac0      	subs	r0, r0, r3
    441e:	4152      	adcs	r2, r2
    4420:	0b03      	lsrs	r3, r0, #12
    4422:	428b      	cmp	r3, r1
    4424:	d301      	bcc.n	442a <__aeabi_uidiv+0x6a>
    4426:	030b      	lsls	r3, r1, #12
    4428:	1ac0      	subs	r0, r0, r3
    442a:	4152      	adcs	r2, r2
    442c:	0ac3      	lsrs	r3, r0, #11
    442e:	428b      	cmp	r3, r1
    4430:	d301      	bcc.n	4436 <__aeabi_uidiv+0x76>
    4432:	02cb      	lsls	r3, r1, #11
    4434:	1ac0      	subs	r0, r0, r3
    4436:	4152      	adcs	r2, r2
    4438:	0a83      	lsrs	r3, r0, #10
    443a:	428b      	cmp	r3, r1
    443c:	d301      	bcc.n	4442 <__aeabi_uidiv+0x82>
    443e:	028b      	lsls	r3, r1, #10
    4440:	1ac0      	subs	r0, r0, r3
    4442:	4152      	adcs	r2, r2
    4444:	0a43      	lsrs	r3, r0, #9
    4446:	428b      	cmp	r3, r1
    4448:	d301      	bcc.n	444e <__aeabi_uidiv+0x8e>
    444a:	024b      	lsls	r3, r1, #9
    444c:	1ac0      	subs	r0, r0, r3
    444e:	4152      	adcs	r2, r2
    4450:	0a03      	lsrs	r3, r0, #8
    4452:	428b      	cmp	r3, r1
    4454:	d301      	bcc.n	445a <__aeabi_uidiv+0x9a>
    4456:	020b      	lsls	r3, r1, #8
    4458:	1ac0      	subs	r0, r0, r3
    445a:	4152      	adcs	r2, r2
    445c:	d2cd      	bcs.n	43fa <__aeabi_uidiv+0x3a>
    445e:	09c3      	lsrs	r3, r0, #7
    4460:	428b      	cmp	r3, r1
    4462:	d301      	bcc.n	4468 <__aeabi_uidiv+0xa8>
    4464:	01cb      	lsls	r3, r1, #7
    4466:	1ac0      	subs	r0, r0, r3
    4468:	4152      	adcs	r2, r2
    446a:	0983      	lsrs	r3, r0, #6
    446c:	428b      	cmp	r3, r1
    446e:	d301      	bcc.n	4474 <__aeabi_uidiv+0xb4>
    4470:	018b      	lsls	r3, r1, #6
    4472:	1ac0      	subs	r0, r0, r3
    4474:	4152      	adcs	r2, r2
    4476:	0943      	lsrs	r3, r0, #5
    4478:	428b      	cmp	r3, r1
    447a:	d301      	bcc.n	4480 <__aeabi_uidiv+0xc0>
    447c:	014b      	lsls	r3, r1, #5
    447e:	1ac0      	subs	r0, r0, r3
    4480:	4152      	adcs	r2, r2
    4482:	0903      	lsrs	r3, r0, #4
    4484:	428b      	cmp	r3, r1
    4486:	d301      	bcc.n	448c <__aeabi_uidiv+0xcc>
    4488:	010b      	lsls	r3, r1, #4
    448a:	1ac0      	subs	r0, r0, r3
    448c:	4152      	adcs	r2, r2
    448e:	08c3      	lsrs	r3, r0, #3
    4490:	428b      	cmp	r3, r1
    4492:	d301      	bcc.n	4498 <__aeabi_uidiv+0xd8>
    4494:	00cb      	lsls	r3, r1, #3
    4496:	1ac0      	subs	r0, r0, r3
    4498:	4152      	adcs	r2, r2
    449a:	0883      	lsrs	r3, r0, #2
    449c:	428b      	cmp	r3, r1
    449e:	d301      	bcc.n	44a4 <__aeabi_uidiv+0xe4>
    44a0:	008b      	lsls	r3, r1, #2
    44a2:	1ac0      	subs	r0, r0, r3
    44a4:	4152      	adcs	r2, r2
    44a6:	0843      	lsrs	r3, r0, #1
    44a8:	428b      	cmp	r3, r1
    44aa:	d301      	bcc.n	44b0 <__aeabi_uidiv+0xf0>
    44ac:	004b      	lsls	r3, r1, #1
    44ae:	1ac0      	subs	r0, r0, r3
    44b0:	4152      	adcs	r2, r2
    44b2:	1a41      	subs	r1, r0, r1
    44b4:	d200      	bcs.n	44b8 <__aeabi_uidiv+0xf8>
    44b6:	4601      	mov	r1, r0
    44b8:	4152      	adcs	r2, r2
    44ba:	4610      	mov	r0, r2
    44bc:	4770      	bx	lr
    44be:	e7ff      	b.n	44c0 <__aeabi_uidiv+0x100>
    44c0:	b501      	push	{r0, lr}
    44c2:	2000      	movs	r0, #0
    44c4:	f000 f8fc 	bl	46c0 <__aeabi_idiv0>
    44c8:	bd02      	pop	{r1, pc}
    44ca:	46c0      	nop			; (mov r8, r8)

000044cc <__aeabi_uidivmod>:
    44cc:	2900      	cmp	r1, #0
    44ce:	d0f7      	beq.n	44c0 <__aeabi_uidiv+0x100>
    44d0:	b503      	push	{r0, r1, lr}
    44d2:	f7ff ff75 	bl	43c0 <__aeabi_uidiv>
    44d6:	bc0e      	pop	{r1, r2, r3}
    44d8:	4342      	muls	r2, r0
    44da:	1a89      	subs	r1, r1, r2
    44dc:	4718      	bx	r3
    44de:	46c0      	nop			; (mov r8, r8)

000044e0 <__aeabi_idiv>:
    44e0:	4603      	mov	r3, r0
    44e2:	430b      	orrs	r3, r1
    44e4:	d47f      	bmi.n	45e6 <__aeabi_idiv+0x106>
    44e6:	2200      	movs	r2, #0
    44e8:	0843      	lsrs	r3, r0, #1
    44ea:	428b      	cmp	r3, r1
    44ec:	d374      	bcc.n	45d8 <__aeabi_idiv+0xf8>
    44ee:	0903      	lsrs	r3, r0, #4
    44f0:	428b      	cmp	r3, r1
    44f2:	d35f      	bcc.n	45b4 <__aeabi_idiv+0xd4>
    44f4:	0a03      	lsrs	r3, r0, #8
    44f6:	428b      	cmp	r3, r1
    44f8:	d344      	bcc.n	4584 <__aeabi_idiv+0xa4>
    44fa:	0b03      	lsrs	r3, r0, #12
    44fc:	428b      	cmp	r3, r1
    44fe:	d328      	bcc.n	4552 <__aeabi_idiv+0x72>
    4500:	0c03      	lsrs	r3, r0, #16
    4502:	428b      	cmp	r3, r1
    4504:	d30d      	bcc.n	4522 <__aeabi_idiv+0x42>
    4506:	22ff      	movs	r2, #255	; 0xff
    4508:	0209      	lsls	r1, r1, #8
    450a:	ba12      	rev	r2, r2
    450c:	0c03      	lsrs	r3, r0, #16
    450e:	428b      	cmp	r3, r1
    4510:	d302      	bcc.n	4518 <__aeabi_idiv+0x38>
    4512:	1212      	asrs	r2, r2, #8
    4514:	0209      	lsls	r1, r1, #8
    4516:	d065      	beq.n	45e4 <__aeabi_idiv+0x104>
    4518:	0b03      	lsrs	r3, r0, #12
    451a:	428b      	cmp	r3, r1
    451c:	d319      	bcc.n	4552 <__aeabi_idiv+0x72>
    451e:	e000      	b.n	4522 <__aeabi_idiv+0x42>
    4520:	0a09      	lsrs	r1, r1, #8
    4522:	0bc3      	lsrs	r3, r0, #15
    4524:	428b      	cmp	r3, r1
    4526:	d301      	bcc.n	452c <__aeabi_idiv+0x4c>
    4528:	03cb      	lsls	r3, r1, #15
    452a:	1ac0      	subs	r0, r0, r3
    452c:	4152      	adcs	r2, r2
    452e:	0b83      	lsrs	r3, r0, #14
    4530:	428b      	cmp	r3, r1
    4532:	d301      	bcc.n	4538 <__aeabi_idiv+0x58>
    4534:	038b      	lsls	r3, r1, #14
    4536:	1ac0      	subs	r0, r0, r3
    4538:	4152      	adcs	r2, r2
    453a:	0b43      	lsrs	r3, r0, #13
    453c:	428b      	cmp	r3, r1
    453e:	d301      	bcc.n	4544 <__aeabi_idiv+0x64>
    4540:	034b      	lsls	r3, r1, #13
    4542:	1ac0      	subs	r0, r0, r3
    4544:	4152      	adcs	r2, r2
    4546:	0b03      	lsrs	r3, r0, #12
    4548:	428b      	cmp	r3, r1
    454a:	d301      	bcc.n	4550 <__aeabi_idiv+0x70>
    454c:	030b      	lsls	r3, r1, #12
    454e:	1ac0      	subs	r0, r0, r3
    4550:	4152      	adcs	r2, r2
    4552:	0ac3      	lsrs	r3, r0, #11
    4554:	428b      	cmp	r3, r1
    4556:	d301      	bcc.n	455c <__aeabi_idiv+0x7c>
    4558:	02cb      	lsls	r3, r1, #11
    455a:	1ac0      	subs	r0, r0, r3
    455c:	4152      	adcs	r2, r2
    455e:	0a83      	lsrs	r3, r0, #10
    4560:	428b      	cmp	r3, r1
    4562:	d301      	bcc.n	4568 <__aeabi_idiv+0x88>
    4564:	028b      	lsls	r3, r1, #10
    4566:	1ac0      	subs	r0, r0, r3
    4568:	4152      	adcs	r2, r2
    456a:	0a43      	lsrs	r3, r0, #9
    456c:	428b      	cmp	r3, r1
    456e:	d301      	bcc.n	4574 <__aeabi_idiv+0x94>
    4570:	024b      	lsls	r3, r1, #9
    4572:	1ac0      	subs	r0, r0, r3
    4574:	4152      	adcs	r2, r2
    4576:	0a03      	lsrs	r3, r0, #8
    4578:	428b      	cmp	r3, r1
    457a:	d301      	bcc.n	4580 <__aeabi_idiv+0xa0>
    457c:	020b      	lsls	r3, r1, #8
    457e:	1ac0      	subs	r0, r0, r3
    4580:	4152      	adcs	r2, r2
    4582:	d2cd      	bcs.n	4520 <__aeabi_idiv+0x40>
    4584:	09c3      	lsrs	r3, r0, #7
    4586:	428b      	cmp	r3, r1
    4588:	d301      	bcc.n	458e <__aeabi_idiv+0xae>
    458a:	01cb      	lsls	r3, r1, #7
    458c:	1ac0      	subs	r0, r0, r3
    458e:	4152      	adcs	r2, r2
    4590:	0983      	lsrs	r3, r0, #6
    4592:	428b      	cmp	r3, r1
    4594:	d301      	bcc.n	459a <__aeabi_idiv+0xba>
    4596:	018b      	lsls	r3, r1, #6
    4598:	1ac0      	subs	r0, r0, r3
    459a:	4152      	adcs	r2, r2
    459c:	0943      	lsrs	r3, r0, #5
    459e:	428b      	cmp	r3, r1
    45a0:	d301      	bcc.n	45a6 <__aeabi_idiv+0xc6>
    45a2:	014b      	lsls	r3, r1, #5
    45a4:	1ac0      	subs	r0, r0, r3
    45a6:	4152      	adcs	r2, r2
    45a8:	0903      	lsrs	r3, r0, #4
    45aa:	428b      	cmp	r3, r1
    45ac:	d301      	bcc.n	45b2 <__aeabi_idiv+0xd2>
    45ae:	010b      	lsls	r3, r1, #4
    45b0:	1ac0      	subs	r0, r0, r3
    45b2:	4152      	adcs	r2, r2
    45b4:	08c3      	lsrs	r3, r0, #3
    45b6:	428b      	cmp	r3, r1
    45b8:	d301      	bcc.n	45be <__aeabi_idiv+0xde>
    45ba:	00cb      	lsls	r3, r1, #3
    45bc:	1ac0      	subs	r0, r0, r3
    45be:	4152      	adcs	r2, r2
    45c0:	0883      	lsrs	r3, r0, #2
    45c2:	428b      	cmp	r3, r1
    45c4:	d301      	bcc.n	45ca <__aeabi_idiv+0xea>
    45c6:	008b      	lsls	r3, r1, #2
    45c8:	1ac0      	subs	r0, r0, r3
    45ca:	4152      	adcs	r2, r2
    45cc:	0843      	lsrs	r3, r0, #1
    45ce:	428b      	cmp	r3, r1
    45d0:	d301      	bcc.n	45d6 <__aeabi_idiv+0xf6>
    45d2:	004b      	lsls	r3, r1, #1
    45d4:	1ac0      	subs	r0, r0, r3
    45d6:	4152      	adcs	r2, r2
    45d8:	1a41      	subs	r1, r0, r1
    45da:	d200      	bcs.n	45de <__aeabi_idiv+0xfe>
    45dc:	4601      	mov	r1, r0
    45de:	4152      	adcs	r2, r2
    45e0:	4610      	mov	r0, r2
    45e2:	4770      	bx	lr
    45e4:	e05d      	b.n	46a2 <__aeabi_idiv+0x1c2>
    45e6:	0fca      	lsrs	r2, r1, #31
    45e8:	d000      	beq.n	45ec <__aeabi_idiv+0x10c>
    45ea:	4249      	negs	r1, r1
    45ec:	1003      	asrs	r3, r0, #32
    45ee:	d300      	bcc.n	45f2 <__aeabi_idiv+0x112>
    45f0:	4240      	negs	r0, r0
    45f2:	4053      	eors	r3, r2
    45f4:	2200      	movs	r2, #0
    45f6:	469c      	mov	ip, r3
    45f8:	0903      	lsrs	r3, r0, #4
    45fa:	428b      	cmp	r3, r1
    45fc:	d32d      	bcc.n	465a <__aeabi_idiv+0x17a>
    45fe:	0a03      	lsrs	r3, r0, #8
    4600:	428b      	cmp	r3, r1
    4602:	d312      	bcc.n	462a <__aeabi_idiv+0x14a>
    4604:	22fc      	movs	r2, #252	; 0xfc
    4606:	0189      	lsls	r1, r1, #6
    4608:	ba12      	rev	r2, r2
    460a:	0a03      	lsrs	r3, r0, #8
    460c:	428b      	cmp	r3, r1
    460e:	d30c      	bcc.n	462a <__aeabi_idiv+0x14a>
    4610:	0189      	lsls	r1, r1, #6
    4612:	1192      	asrs	r2, r2, #6
    4614:	428b      	cmp	r3, r1
    4616:	d308      	bcc.n	462a <__aeabi_idiv+0x14a>
    4618:	0189      	lsls	r1, r1, #6
    461a:	1192      	asrs	r2, r2, #6
    461c:	428b      	cmp	r3, r1
    461e:	d304      	bcc.n	462a <__aeabi_idiv+0x14a>
    4620:	0189      	lsls	r1, r1, #6
    4622:	d03a      	beq.n	469a <__aeabi_idiv+0x1ba>
    4624:	1192      	asrs	r2, r2, #6
    4626:	e000      	b.n	462a <__aeabi_idiv+0x14a>
    4628:	0989      	lsrs	r1, r1, #6
    462a:	09c3      	lsrs	r3, r0, #7
    462c:	428b      	cmp	r3, r1
    462e:	d301      	bcc.n	4634 <__aeabi_idiv+0x154>
    4630:	01cb      	lsls	r3, r1, #7
    4632:	1ac0      	subs	r0, r0, r3
    4634:	4152      	adcs	r2, r2
    4636:	0983      	lsrs	r3, r0, #6
    4638:	428b      	cmp	r3, r1
    463a:	d301      	bcc.n	4640 <__aeabi_idiv+0x160>
    463c:	018b      	lsls	r3, r1, #6
    463e:	1ac0      	subs	r0, r0, r3
    4640:	4152      	adcs	r2, r2
    4642:	0943      	lsrs	r3, r0, #5
    4644:	428b      	cmp	r3, r1
    4646:	d301      	bcc.n	464c <__aeabi_idiv+0x16c>
    4648:	014b      	lsls	r3, r1, #5
    464a:	1ac0      	subs	r0, r0, r3
    464c:	4152      	adcs	r2, r2
    464e:	0903      	lsrs	r3, r0, #4
    4650:	428b      	cmp	r3, r1
    4652:	d301      	bcc.n	4658 <__aeabi_idiv+0x178>
    4654:	010b      	lsls	r3, r1, #4
    4656:	1ac0      	subs	r0, r0, r3
    4658:	4152      	adcs	r2, r2
    465a:	08c3      	lsrs	r3, r0, #3
    465c:	428b      	cmp	r3, r1
    465e:	d301      	bcc.n	4664 <__aeabi_idiv+0x184>
    4660:	00cb      	lsls	r3, r1, #3
    4662:	1ac0      	subs	r0, r0, r3
    4664:	4152      	adcs	r2, r2
    4666:	0883      	lsrs	r3, r0, #2
    4668:	428b      	cmp	r3, r1
    466a:	d301      	bcc.n	4670 <__aeabi_idiv+0x190>
    466c:	008b      	lsls	r3, r1, #2
    466e:	1ac0      	subs	r0, r0, r3
    4670:	4152      	adcs	r2, r2
    4672:	d2d9      	bcs.n	4628 <__aeabi_idiv+0x148>
    4674:	0843      	lsrs	r3, r0, #1
    4676:	428b      	cmp	r3, r1
    4678:	d301      	bcc.n	467e <__aeabi_idiv+0x19e>
    467a:	004b      	lsls	r3, r1, #1
    467c:	1ac0      	subs	r0, r0, r3
    467e:	4152      	adcs	r2, r2
    4680:	1a41      	subs	r1, r0, r1
    4682:	d200      	bcs.n	4686 <__aeabi_idiv+0x1a6>
    4684:	4601      	mov	r1, r0
    4686:	4663      	mov	r3, ip
    4688:	4152      	adcs	r2, r2
    468a:	105b      	asrs	r3, r3, #1
    468c:	4610      	mov	r0, r2
    468e:	d301      	bcc.n	4694 <__aeabi_idiv+0x1b4>
    4690:	4240      	negs	r0, r0
    4692:	2b00      	cmp	r3, #0
    4694:	d500      	bpl.n	4698 <__aeabi_idiv+0x1b8>
    4696:	4249      	negs	r1, r1
    4698:	4770      	bx	lr
    469a:	4663      	mov	r3, ip
    469c:	105b      	asrs	r3, r3, #1
    469e:	d300      	bcc.n	46a2 <__aeabi_idiv+0x1c2>
    46a0:	4240      	negs	r0, r0
    46a2:	b501      	push	{r0, lr}
    46a4:	2000      	movs	r0, #0
    46a6:	f000 f80b 	bl	46c0 <__aeabi_idiv0>
    46aa:	bd02      	pop	{r1, pc}

000046ac <__aeabi_idivmod>:
    46ac:	2900      	cmp	r1, #0
    46ae:	d0f8      	beq.n	46a2 <__aeabi_idiv+0x1c2>
    46b0:	b503      	push	{r0, r1, lr}
    46b2:	f7ff ff15 	bl	44e0 <__aeabi_idiv>
    46b6:	bc0e      	pop	{r1, r2, r3}
    46b8:	4342      	muls	r2, r0
    46ba:	1a89      	subs	r1, r1, r2
    46bc:	4718      	bx	r3
    46be:	46c0      	nop			; (mov r8, r8)

000046c0 <__aeabi_idiv0>:
    46c0:	4770      	bx	lr
    46c2:	46c0      	nop			; (mov r8, r8)

000046c4 <__aeabi_lmul>:
    46c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46c6:	464f      	mov	r7, r9
    46c8:	4646      	mov	r6, r8
    46ca:	0405      	lsls	r5, r0, #16
    46cc:	0c2d      	lsrs	r5, r5, #16
    46ce:	1c2c      	adds	r4, r5, #0
    46d0:	b4c0      	push	{r6, r7}
    46d2:	0417      	lsls	r7, r2, #16
    46d4:	0c16      	lsrs	r6, r2, #16
    46d6:	0c3f      	lsrs	r7, r7, #16
    46d8:	4699      	mov	r9, r3
    46da:	0c03      	lsrs	r3, r0, #16
    46dc:	437c      	muls	r4, r7
    46de:	4375      	muls	r5, r6
    46e0:	435f      	muls	r7, r3
    46e2:	4373      	muls	r3, r6
    46e4:	197d      	adds	r5, r7, r5
    46e6:	0c26      	lsrs	r6, r4, #16
    46e8:	19ad      	adds	r5, r5, r6
    46ea:	469c      	mov	ip, r3
    46ec:	42af      	cmp	r7, r5
    46ee:	d903      	bls.n	46f8 <__aeabi_lmul+0x34>
    46f0:	2380      	movs	r3, #128	; 0x80
    46f2:	025b      	lsls	r3, r3, #9
    46f4:	4698      	mov	r8, r3
    46f6:	44c4      	add	ip, r8
    46f8:	464b      	mov	r3, r9
    46fa:	4351      	muls	r1, r2
    46fc:	4343      	muls	r3, r0
    46fe:	0424      	lsls	r4, r4, #16
    4700:	0c2e      	lsrs	r6, r5, #16
    4702:	0c24      	lsrs	r4, r4, #16
    4704:	042d      	lsls	r5, r5, #16
    4706:	4466      	add	r6, ip
    4708:	192c      	adds	r4, r5, r4
    470a:	1859      	adds	r1, r3, r1
    470c:	1989      	adds	r1, r1, r6
    470e:	1c20      	adds	r0, r4, #0
    4710:	bc0c      	pop	{r2, r3}
    4712:	4690      	mov	r8, r2
    4714:	4699      	mov	r9, r3
    4716:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004718 <__libc_init_array>:
    4718:	4b0e      	ldr	r3, [pc, #56]	; (4754 <__libc_init_array+0x3c>)
    471a:	b570      	push	{r4, r5, r6, lr}
    471c:	2500      	movs	r5, #0
    471e:	1c1e      	adds	r6, r3, #0
    4720:	4c0d      	ldr	r4, [pc, #52]	; (4758 <__libc_init_array+0x40>)
    4722:	1ae4      	subs	r4, r4, r3
    4724:	10a4      	asrs	r4, r4, #2
    4726:	42a5      	cmp	r5, r4
    4728:	d004      	beq.n	4734 <__libc_init_array+0x1c>
    472a:	00ab      	lsls	r3, r5, #2
    472c:	58f3      	ldr	r3, [r6, r3]
    472e:	4798      	blx	r3
    4730:	3501      	adds	r5, #1
    4732:	e7f8      	b.n	4726 <__libc_init_array+0xe>
    4734:	f000 f944 	bl	49c0 <_init>
    4738:	4b08      	ldr	r3, [pc, #32]	; (475c <__libc_init_array+0x44>)
    473a:	2500      	movs	r5, #0
    473c:	1c1e      	adds	r6, r3, #0
    473e:	4c08      	ldr	r4, [pc, #32]	; (4760 <__libc_init_array+0x48>)
    4740:	1ae4      	subs	r4, r4, r3
    4742:	10a4      	asrs	r4, r4, #2
    4744:	42a5      	cmp	r5, r4
    4746:	d004      	beq.n	4752 <__libc_init_array+0x3a>
    4748:	00ab      	lsls	r3, r5, #2
    474a:	58f3      	ldr	r3, [r6, r3]
    474c:	4798      	blx	r3
    474e:	3501      	adds	r5, #1
    4750:	e7f8      	b.n	4744 <__libc_init_array+0x2c>
    4752:	bd70      	pop	{r4, r5, r6, pc}
    4754:	000049cc 	.word	0x000049cc
    4758:	000049cc 	.word	0x000049cc
    475c:	000049cc 	.word	0x000049cc
    4760:	000049d0 	.word	0x000049d0

00004764 <memcpy>:
    4764:	2300      	movs	r3, #0
    4766:	b510      	push	{r4, lr}
    4768:	4293      	cmp	r3, r2
    476a:	d003      	beq.n	4774 <memcpy+0x10>
    476c:	5ccc      	ldrb	r4, [r1, r3]
    476e:	54c4      	strb	r4, [r0, r3]
    4770:	3301      	adds	r3, #1
    4772:	e7f9      	b.n	4768 <memcpy+0x4>
    4774:	bd10      	pop	{r4, pc}
    4776:	0000      	movs	r0, r0
    4778:	2c2b2a22 	.word	0x2c2b2a22
    477c:	3d3c3b3a 	.word	0x3d3c3b3a
    4780:	5d5b3f3e 	.word	0x5d5b3f3e
    4784:	00007f7c 	.word	0x00007f7c

00004788 <ExCvt>:
    4788:	41909a80 808f418e 49454545 8f8e4949     ...A.A..EEEIII..
    4798:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
    47a8:	554f4941 a7a6a5a5 abaaa9a8 afae21ac     AIOU.........!..
    47b8:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    47c8:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
    47d8:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    47e8:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
    47f8:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    4808:	00002070 000022e2 000022e2 000022e2     p ..."..."..."..
    4818:	000022e2 000022e2 000022e2 000022e2     ."..."..."..."..
    4828:	000022e2 000022e2 000022e2 000022e2     ."..."..."..."..
    4838:	000022e2 000022e2 000022e2 000022e2     ."..."..."..."..
    4848:	00002052 000022e2 000022e2 000022e2     R ..."..."..."..
    4858:	000022e2 000022e2 000022e2 000022e2     ."..."..."..."..
    4868:	000022e2 000022e2 000022e2 000022e2     ."..."..."..."..
    4878:	000022e2 000022e2 000022e2 000022e2     ."..."..."..."..
    4888:	00002068 000022e2 000022e2 000022e2     h ..."..."..."..
    4898:	000022e2 000022e2 000022e2 000022e2     ."..."..."..."..
    48a8:	000022e2 000022e2 000022e2 000022e2     ."..."..."..."..
    48b8:	000022e2 000022e2 000022e2 000022e2     ."..."..."..."..
    48c8:	00002060 00002078 00002034 00002044     ` ..x ..4 ..D ..
    48d8:	0000203c 00000002 00000003 0000ffff     < ..............
    48e8:	0000ffff 00000004 00000005 00000006     ................
    48f8:	00000007 0000ffff 0000ffff 0000ffff     ................
    4908:	0000ffff 0000ffff 0000ffff 0000ffff     ................
    4918:	0000ffff 00000008 00000009 0000000a     ................
    4928:	0000000b 42000800 42000c00 42001000     .......B...B...B
    4938:	42001400 0a090807 00002fd2 00002fce     ...B...../.../..
    4948:	00002fce 0000301c 0000301c 00002fe8     ./...0...0.../..
    4958:	00002fd8 00002fee 00003130 00003110     ./.../..01...1..
    4968:	00003110 00003180 00003122 0000313e     .1...1.."1..>1..
    4978:	00003114 0000314c 42002000 42002400     .1..L1... .B.$.B
    4988:	42002800 42002c00 42003000 42003400     .(.B.,.B.0.B.4.B
    4998:	14141313 00001515 02000100 08000400     ................
    49a8:	20001000 0000ffff 00000000 64676365     ... ........ecgd
    49b8:	2e617461 006e6962                       ata.bin.

000049c0 <_init>:
    49c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49c2:	46c0      	nop			; (mov r8, r8)
    49c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    49c6:	bc08      	pop	{r3}
    49c8:	469e      	mov	lr, r3
    49ca:	4770      	bx	lr

000049cc <__init_array_start>:
    49cc:	000000cd 	.word	0x000000cd

000049d0 <_fini>:
    49d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49d2:	46c0      	nop			; (mov r8, r8)
    49d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    49d6:	bc08      	pop	{r3}
    49d8:	469e      	mov	lr, r3
    49da:	4770      	bx	lr

000049dc <__fini_array_start>:
    49dc:	000000a5 	.word	0x000000a5
